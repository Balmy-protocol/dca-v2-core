{
  "language": "Solidity",
  "sources": {
    "contracts/DCAHub/DCAHubPlatformHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport './DCAHubConfigHandler.sol';\n\nabstract contract DCAHubPlatformHandler is ReentrancyGuard, DCAHubConfigHandler, IDCAHubPlatformHandler {\n  using SafeERC20 for IERC20Metadata;\n\n  /// @inheritdoc IDCAHubPlatformHandler\n  function withdrawFromPlatformBalance(IDCAHub.AmountOfToken[] calldata _amounts, address _recipient)\n    external\n    nonReentrant\n    onlyRole(PLATFORM_WITHDRAW_ROLE)\n  {\n    for (uint256 i; i < _amounts.length; i++) {\n      platformBalance[_amounts[i].token] -= _amounts[i].amount;\n      _transfer(_amounts[i].token, _recipient, _amounts[i].amount);\n    }\n\n    emit WithdrewFromPlatform(msg.sender, _recipient, _amounts);\n  }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/DCAHub/DCAHubConfigHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/access/AccessControl.sol';\nimport '@openzeppelin/contracts/security/Pausable.sol';\nimport '../interfaces/oracles/IPriceOracle.sol';\nimport '../libraries/Intervals.sol';\nimport '../libraries/FeeMath.sol';\nimport './DCAHubParameters.sol';\n\nabstract contract DCAHubConfigHandler is DCAHubParameters, AccessControl, Pausable, IDCAHubConfigHandler {\n  // Internal constants (all should be constants, but apparently the byte code size increases when they are)\n  // solhint-disable var-name-mixedcase\n  bytes32 public IMMEDIATE_ROLE = keccak256('IMMEDIATE_ROLE');\n  bytes32 public TIME_LOCKED_ROLE = keccak256('TIME_LOCKED_ROLE');\n  bytes32 public PLATFORM_WITHDRAW_ROLE = keccak256('PLATFORM_WITHDRAW_ROLE');\n  // solhint-enable var-name-mixedcase\n  /// @inheritdoc IDCAHubConfigHandler\n  uint32 public constant MAX_FEE = 100000; // 10%\n  /// @inheritdoc IDCAHubConfigHandler\n  uint16 public constant MAX_PLATFORM_FEE_RATIO = 10000;\n\n  /// @inheritdoc IDCAHubConfigHandler\n  IPriceOracle public oracle;\n  /// @inheritdoc IDCAHubConfigHandler\n  uint32 public swapFee = 6000; // 0.6%\n  /// @inheritdoc IDCAHubConfigHandler\n  bytes1 public allowedSwapIntervals = 0xF0; // Start allowing weekly, daily, every 4 hours, hourly\n  /// @inheritdoc IDCAHubConfigHandler\n  uint16 public platformFeeRatio = 2500; // 25%\n\n  constructor(\n    address _immediateGovernor,\n    address _timeLockedGovernor,\n    IPriceOracle _oracle\n  ) {\n    if (_immediateGovernor == address(0) || _timeLockedGovernor == address(0) || address(_oracle) == address(0)) revert IDCAHub.ZeroAddress();\n    _setupRole(IMMEDIATE_ROLE, _immediateGovernor);\n    _setupRole(TIME_LOCKED_ROLE, _timeLockedGovernor);\n    _setRoleAdmin(PLATFORM_WITHDRAW_ROLE, TIME_LOCKED_ROLE);\n    // We set each role as its own admin, so they can assign new addresses with the same role\n    _setRoleAdmin(IMMEDIATE_ROLE, IMMEDIATE_ROLE);\n    _setRoleAdmin(TIME_LOCKED_ROLE, TIME_LOCKED_ROLE);\n    oracle = _oracle;\n  }\n\n  /// @inheritdoc IDCAHubConfigHandler\n  function setOracle(IPriceOracle _oracle) external onlyRole(TIME_LOCKED_ROLE) {\n    _assertNonZeroAddress(address(_oracle));\n    oracle = _oracle;\n    emit OracleSet(_oracle);\n  }\n\n  /// @inheritdoc IDCAHubConfigHandler\n  function setSwapFee(uint32 _swapFee) external onlyRole(TIME_LOCKED_ROLE) {\n    _validateFee(_swapFee);\n    swapFee = _swapFee;\n    emit SwapFeeSet(_swapFee);\n  }\n\n  /// @inheritdoc IDCAHubConfigHandler\n  function setPlatformFeeRatio(uint16 _platformFeeRatio) external onlyRole(TIME_LOCKED_ROLE) {\n    if (_platformFeeRatio > MAX_PLATFORM_FEE_RATIO) revert HighPlatformFeeRatio();\n    platformFeeRatio = _platformFeeRatio;\n    emit PlatformFeeRatioSet(_platformFeeRatio);\n  }\n\n  /// @inheritdoc IDCAHubConfigHandler\n  function addSwapIntervalsToAllowedList(uint32[] calldata _swapIntervals) external onlyRole(IMMEDIATE_ROLE) {\n    for (uint256 i; i < _swapIntervals.length; i++) {\n      allowedSwapIntervals |= Intervals.intervalToMask(_swapIntervals[i]);\n    }\n    emit SwapIntervalsAllowed(_swapIntervals);\n  }\n\n  /// @inheritdoc IDCAHubConfigHandler\n  function removeSwapIntervalsFromAllowedList(uint32[] calldata _swapIntervals) external onlyRole(IMMEDIATE_ROLE) {\n    for (uint256 i; i < _swapIntervals.length; i++) {\n      allowedSwapIntervals &= ~Intervals.intervalToMask(_swapIntervals[i]);\n    }\n    emit SwapIntervalsForbidden(_swapIntervals);\n  }\n\n  /// @inheritdoc IDCAHubConfigHandler\n  function pause() external onlyRole(IMMEDIATE_ROLE) {\n    _pause();\n  }\n\n  /// @inheritdoc IDCAHubConfigHandler\n  function unpause() external onlyRole(IMMEDIATE_ROLE) {\n    _unpause();\n  }\n\n  /// @inheritdoc IDCAHubConfigHandler\n  function paused() public view virtual override(IDCAHubConfigHandler, Pausable) returns (bool) {\n    return super.paused();\n  }\n\n  function _validateFee(uint32 _fee) internal pure {\n    if (_fee > MAX_FEE) revert HighFee();\n    if (_fee % 100 != 0) revert InvalidFee();\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/interfaces/oracles/IPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for an oracle that provides price quotes\n/// @notice These methods allow users to add support for pairs, and then ask for quotes\ninterface IPriceOracle {\n  /// @notice Returns whether this oracle can support this pair of tokens\n  /// @dev _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\n  /// @param _tokenA One of the pair's tokens\n  /// @param _tokenB The other of the pair's tokens\n  /// @return Whether the given pair of tokens can be supported by the oracle\n  function canSupportPair(address _tokenA, address _tokenB) external view returns (bool);\n\n  /// @notice Returns a quote, based on the given tokens and amount\n  /// @param _tokenIn The token that will be provided\n  /// @param _amountIn The amount that will be provided\n  /// @param _tokenOut The token we would like to quote\n  /// @return _amountOut How much _tokenOut will be returned in exchange for _amountIn amount of _tokenIn\n  function quote(\n    address _tokenIn,\n    uint128 _amountIn,\n    address _tokenOut\n  ) external view returns (uint256 _amountOut);\n\n  /// @notice Reconfigures support for a given pair. This function will let the oracle take some actions to configure the pair, in\n  /// preparation for future quotes. Can be called many times in order to let the oracle re-configure for a new context.\n  /// @dev Will revert if pair cannot be supported. _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\n  /// @param _tokenA One of the pair's tokens\n  /// @param _tokenB The other of the pair's tokens\n  function reconfigureSupportForPair(address _tokenA, address _tokenB) external;\n\n  /// @notice Adds support for a given pair if the oracle didn't support it already. If called for a pair that is already supported,\n  /// then nothing will happen. This function will let the oracle take some actions to configure the pair, in preparation for future quotes.\n  /// @dev Will revert if pair cannot be supported. _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\n  /// @param _tokenA One of the pair's tokens\n  /// @param _tokenB The other of the pair's tokens\n  function addSupportForPairIfNeeded(address _tokenA, address _tokenB) external;\n}\n"
    },
    "contracts/libraries/Intervals.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\n/// @title Intervals library\n/// @notice Provides functions to easily convert from swap intervals to their byte representation and viceversa\nlibrary Intervals {\n  /// @notice Thrown when a user tries convert and invalid interval to a byte representation\n  error InvalidInterval();\n\n  /// @notice Thrown when a user tries convert and invalid byte representation to an interval\n  error InvalidMask();\n\n  /// @notice Takes a swap interval and returns its byte representation\n  /// @dev Will revert with InvalidInterval if the swap interval is not valid\n  /// @param _swapInterval The swap interval\n  /// @return The interval's byte representation\n  function intervalToMask(uint32 _swapInterval) internal pure returns (bytes1) {\n    if (_swapInterval == 1 minutes) return 0x01;\n    if (_swapInterval == 5 minutes) return 0x02;\n    if (_swapInterval == 15 minutes) return 0x04;\n    if (_swapInterval == 30 minutes) return 0x08;\n    if (_swapInterval == 1 hours) return 0x10;\n    if (_swapInterval == 4 hours) return 0x20;\n    if (_swapInterval == 1 days) return 0x40;\n    if (_swapInterval == 1 weeks) return 0x80;\n    revert InvalidInterval();\n  }\n\n  /// @notice Takes a byte representation of a swap interval and returns the swap interval\n  /// @dev Will revert with InvalidMask if the byte representation is not valid\n  /// @param _mask The byte representation\n  /// @return The swap interval\n  function maskToInterval(bytes1 _mask) internal pure returns (uint32) {\n    if (_mask == 0x01) return 1 minutes;\n    if (_mask == 0x02) return 5 minutes;\n    if (_mask == 0x04) return 15 minutes;\n    if (_mask == 0x08) return 30 minutes;\n    if (_mask == 0x10) return 1 hours;\n    if (_mask == 0x20) return 4 hours;\n    if (_mask == 0x40) return 1 days;\n    if (_mask == 0x80) return 1 weeks;\n    revert InvalidMask();\n  }\n\n  /// @notice Takes a byte representation of a set of swap intervals and returns which ones are in the set\n  /// @dev Will always return an array of length 8, with zeros at the end if there are less than 8 intervals\n  /// @param _byte The byte representation\n  /// @return _intervals The swap intervals in the set\n  function intervalsInByte(bytes1 _byte) internal pure returns (uint32[] memory _intervals) {\n    _intervals = new uint32[](8);\n    uint8 _index;\n    bytes1 _mask = 0x01;\n    while (_byte >= _mask && _mask > 0) {\n      if (_byte & _mask != 0) {\n        _intervals[_index++] = maskToInterval(_mask);\n      }\n      _mask <<= 1;\n    }\n  }\n}\n"
    },
    "contracts/libraries/FeeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\n/// @title Fee Math library\n/// @notice Provides functions to calculate and apply fees to amounts\nlibrary FeeMath {\n  /// @notice How much would a 1% fee be\n  uint24 public constant FEE_PRECISION = 10000;\n\n  /// @notice Takes a fee and an amount that has had the fee subtracted, and returns the amount that was subtracted\n  /// @param _fee Fee that was applied\n  /// @param _subtractionResult Amount that had the fee subtracted\n  /// @return The amount that was subtracted\n  function calculateSubtractedFee(uint32 _fee, uint256 _subtractionResult) internal pure returns (uint256) {\n    return (_subtractionResult * _fee) / (FEE_PRECISION * 100 - _fee);\n  }\n\n  /// @notice Takes a fee and applies it to a certain amount. So if fee is 0.6%, it would return the 0.6% of the given amount\n  /// @param _fee Fee to apply\n  /// @param _amount Amount to apply the fee to\n  /// @return The calculated fee\n  function calculateFeeForAmount(uint32 _fee, uint256 _amount) internal pure returns (uint256) {\n    return (_amount * _fee) / FEE_PRECISION / 100;\n  }\n\n  /// @notice Takes a fee and a certain amount, and subtracts the fee. So if fee is 0.6%, it would return 99.4% of the given amount\n  /// @param _fee Fee to subtract\n  /// @param _amount Amount that subtract the fee from\n  /// @return The amount with the fee subtracted\n  function subtractFeeFromAmount(uint32 _fee, uint256 _amount) internal pure returns (uint256) {\n    return (_amount * (FEE_PRECISION - _fee / 100)) / FEE_PRECISION;\n  }\n}\n"
    },
    "contracts/DCAHub/DCAHubParameters.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '../interfaces/IDCAHub.sol';\nimport '../libraries/TokenSorting.sol';\n\nabstract contract DCAHubParameters is IDCAHubParameters {\n  using SafeERC20 for IERC20Metadata;\n\n  /// @inheritdoc IDCAHubParameters\n  mapping(address => mapping(address => bytes1)) public activeSwapIntervals; // token A => token B => active swap intervals\n  mapping(address => uint256) public magnitude;\n  /// @inheritdoc IDCAHubParameters\n  mapping(address => uint256) public platformBalance; // token => balance\n  mapping(address => mapping(address => mapping(bytes1 => mapping(uint32 => SwapDelta)))) internal _swapAmountDelta; // token A => token B => swap interval => swap number => delta\n  mapping(address => mapping(address => mapping(bytes1 => mapping(uint32 => AccumRatio)))) internal _accumRatio; // token A => token B => swap interval => swap number => accum\n  mapping(address => mapping(address => mapping(bytes1 => SwapData))) internal _swapData; // token A => token B => swap interval => swap data\n\n  /// @inheritdoc IDCAHubParameters\n  function swapAmountDelta(\n    address _tokenA,\n    address _tokenB,\n    bytes1 _swapIntervalMask,\n    uint32 _swapNumber\n  ) external view returns (SwapDelta memory) {\n    (address __tokenA, address __tokenB) = TokenSorting.sortTokens(_tokenA, _tokenB);\n    return _swapAmountDelta[__tokenA][__tokenB][_swapIntervalMask][_swapNumber];\n  }\n\n  /// @inheritdoc IDCAHubParameters\n  function accumRatio(\n    address _tokenA,\n    address _tokenB,\n    bytes1 _swapIntervalMask,\n    uint32 _swapNumber\n  ) external view returns (AccumRatio memory) {\n    (address __tokenA, address __tokenB) = TokenSorting.sortTokens(_tokenA, _tokenB);\n    return _accumRatio[__tokenA][__tokenB][_swapIntervalMask][_swapNumber];\n  }\n\n  /// @inheritdoc IDCAHubParameters\n  function swapData(\n    address _tokenA,\n    address _tokenB,\n    bytes1 _swapIntervalMask\n  ) external view returns (SwapData memory) {\n    (address __tokenA, address __tokenB) = TokenSorting.sortTokens(_tokenA, _tokenB);\n    return _swapData[__tokenA][__tokenB][_swapIntervalMask];\n  }\n\n  function _assertNonZeroAddress(address _address) internal pure {\n    if (_address == address(0)) revert IDCAHub.ZeroAddress();\n  }\n\n  function _transfer(\n    address _token,\n    address _to,\n    uint256 _amount\n  ) internal {\n    IERC20Metadata(_token).safeTransfer(_to, _amount);\n  }\n\n  function _balanceOf(address _token) internal view returns (uint256) {\n    return IERC20Metadata(_token).balanceOf(address(this));\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IDCAHub.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport './IDCAPermissionManager.sol';\nimport './oracles/IPriceOracle.sol';\n\n/// @title The interface for all state related queries\n/// @notice These methods allow users to read the hubs's current values\ninterface IDCAHubParameters {\n  /// @notice Swap information about a specific pair\n  struct SwapData {\n    // How many swaps have been executed\n    uint32 performedSwaps;\n    // How much of token A will be swapped on the next swap\n    uint224 nextAmountToSwapAToB;\n    // Timestamp of the last swap\n    uint32 lastSwappedAt;\n    // How much of token B will be swapped on the next swap\n    uint224 nextAmountToSwapBToA;\n  }\n\n  /// @notice The difference of tokens to swap between a swap, and the previous one\n  struct SwapDelta {\n    // How much less of token A will the following swap require\n    uint128 swapDeltaAToB;\n    // How much less of token B will the following swap require\n    uint128 swapDeltaBToA;\n  }\n\n  /// @notice The sum of the ratios the oracle reported in all executed swaps\n  struct AccumRatio {\n    // The sum of all ratios from A to B\n    uint256 accumRatioAToB;\n    // The sum of all ratios from B to A\n    uint256 accumRatioBToA;\n  }\n\n  /// @notice Returns how much will the amount to swap differ from the previous swap. f.e. if the returned value is -100, then the amount to swap will be 100 less than the swap just before it\n  /// @dev _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\n  /// @param _tokenA One of the pair's token\n  /// @param _tokenB The other of the pair's token\n  /// @param _swapIntervalMask The byte representation of the swap interval to check\n  /// @param _swapNumber The swap number to check\n  /// @return How much will the amount to swap differ, when compared to the swap just before this one\n  function swapAmountDelta(\n    address _tokenA,\n    address _tokenB,\n    bytes1 _swapIntervalMask,\n    uint32 _swapNumber\n  ) external view returns (SwapDelta memory);\n\n  /// @notice Returns the sum of the ratios reported in all swaps executed until the given swap number\n  /// @dev _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\n  /// @param _tokenA One of the pair's token\n  /// @param _tokenB The other of the pair's token\n  /// @param _swapIntervalMask The byte representation of the swap interval to check\n  /// @param _swapNumber The swap number to check\n  /// @return The sum of the ratios\n  function accumRatio(\n    address _tokenA,\n    address _tokenB,\n    bytes1 _swapIntervalMask,\n    uint32 _swapNumber\n  ) external view returns (AccumRatio memory);\n\n  /// @notice Returns swapping information about a specific pair\n  /// @dev _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\n  /// @param _tokenA One of the pair's token\n  /// @param _tokenB The other of the pair's token\n  /// @param _swapIntervalMask The byte representation of the swap interval to check\n  /// @return The swapping information\n  function swapData(\n    address _tokenA,\n    address _tokenB,\n    bytes1 _swapIntervalMask\n  ) external view returns (SwapData memory);\n\n  /// @notice Returns the byte representation of the set of actice swap intervals for the given pair\n  /// @dev `_tokenA` must be smaller than `_tokenB` (_tokenA < _tokenB)\n  /// @param _tokenA The smaller of the pair's token\n  /// @param _tokenB The other of the pair's token\n  /// @return The byte representation of the set of actice swap intervals\n  function activeSwapIntervals(address _tokenA, address _tokenB) external view returns (bytes1);\n\n  /// @notice Returns how much of the hub's token balance belongs to the platform\n  /// @param _token The token to check\n  /// @return The amount that belongs to the platform\n  function platformBalance(address _token) external view returns (uint256);\n}\n\n/// @title The interface for all position related matters\n/// @notice These methods allow users to create, modify and terminate their positions\ninterface IDCAHubPositionHandler {\n  /// @notice The position of a certain user\n  struct UserPosition {\n    // The token that the user deposited and will be swapped in exchange for \"to\"\n    IERC20Metadata from;\n    // The token that the user will get in exchange for their \"from\" tokens in each swap\n    IERC20Metadata to;\n    // How frequently the position's swaps should be executed\n    uint32 swapInterval;\n    // How many swaps were executed since deposit, last modification, or last withdraw\n    uint32 swapsExecuted;\n    // How many \"to\" tokens can currently be withdrawn\n    uint256 swapped;\n    // How many swaps left the position has to execute\n    uint32 swapsLeft;\n    // How many \"from\" tokens there are left to swap\n    uint256 remaining;\n    // How many \"from\" tokens need to be traded in each swap\n    uint120 rate;\n  }\n\n  /// @notice A list of positions that all have the same `to` token\n  struct PositionSet {\n    // The `to` token\n    address token;\n    // The position ids\n    uint256[] positionIds;\n  }\n\n  /// @notice Emitted when a position is terminated\n  /// @param user The address of the user that terminated the position\n  /// @param recipientUnswapped The address of the user that will receive the unswapped tokens\n  /// @param recipientSwapped The address of the user that will receive the swapped tokens\n  /// @param positionId The id of the position that was terminated\n  /// @param returnedUnswapped How many \"from\" tokens were returned to the caller\n  /// @param returnedSwapped How many \"to\" tokens were returned to the caller\n  event Terminated(\n    address indexed user,\n    address indexed recipientUnswapped,\n    address indexed recipientSwapped,\n    uint256 positionId,\n    uint256 returnedUnswapped,\n    uint256 returnedSwapped\n  );\n\n  /// @notice Emitted when a position is created\n  /// @param depositor The address of the user that creates the position\n  /// @param owner The address of the user that will own the position\n  /// @param positionId The id of the position that was created\n  /// @param fromToken The address of the \"from\" token\n  /// @param toToken The address of the \"to\" token\n  /// @param swapInterval How frequently the position's swaps should be executed\n  /// @param rate How many \"from\" tokens need to be traded in each swap\n  /// @param startingSwap The number of the swap when the position will be executed for the first time\n  /// @param lastSwap The number of the swap when the position will be executed for the last time\n  /// @param permissions The permissions defined for the position\n  event Deposited(\n    address indexed depositor,\n    address indexed owner,\n    uint256 positionId,\n    address fromToken,\n    address toToken,\n    uint32 swapInterval,\n    uint120 rate,\n    uint32 startingSwap,\n    uint32 lastSwap,\n    IDCAPermissionManager.PermissionSet[] permissions\n  );\n\n  /// @notice Emitted when a position is created and extra data is provided\n  /// @param positionId The id of the position that was created\n  /// @param data The extra data that was provided\n  event Miscellaneous(uint256 positionId, bytes data);\n\n  /// @notice Emitted when a user withdraws all swapped tokens from a position\n  /// @param withdrawer The address of the user that executed the withdraw\n  /// @param recipient The address of the user that will receive the withdrawn tokens\n  /// @param positionId The id of the position that was affected\n  /// @param token The address of the withdrawn tokens. It's the same as the position's \"to\" token\n  /// @param amount The amount that was withdrawn\n  event Withdrew(address indexed withdrawer, address indexed recipient, uint256 positionId, address token, uint256 amount);\n\n  /// @notice Emitted when a user withdraws all swapped tokens from many positions\n  /// @param withdrawer The address of the user that executed the withdraws\n  /// @param recipient The address of the user that will receive the withdrawn tokens\n  /// @param positions The positions to withdraw from\n  /// @param withdrew The total amount that was withdrawn from each token\n  event WithdrewMany(address indexed withdrawer, address indexed recipient, PositionSet[] positions, uint256[] withdrew);\n\n  /// @notice Emitted when a position is modified\n  /// @param user The address of the user that modified the position\n  /// @param positionId The id of the position that was modified\n  /// @param rate How many \"from\" tokens need to be traded in each swap\n  /// @param startingSwap The number of the swap when the position will be executed for the first time\n  /// @param lastSwap The number of the swap when the position will be executed for the last time\n  event Modified(address indexed user, uint256 positionId, uint120 rate, uint32 startingSwap, uint32 lastSwap);\n\n  /// @notice Thrown when a user tries to create a position with the same `from` & `to`\n  error InvalidToken();\n\n  /// @notice Thrown when a user tries to create a position with a swap interval that is not allowed\n  error IntervalNotAllowed();\n\n  /// @notice Thrown when a user tries operate on a position that doesn't exist (it might have been already terminated)\n  error InvalidPosition();\n\n  /// @notice Thrown when a user tries operate on a position that they don't have access to\n  error UnauthorizedCaller();\n\n  /// @notice Thrown when a user tries to create a position with zero swaps\n  error ZeroSwaps();\n\n  /// @notice Thrown when a user tries to create a position with zero funds\n  error ZeroAmount();\n\n  /// @notice Thrown when a user tries to withdraw a position whose `to` token doesn't match the specified one\n  error PositionDoesNotMatchToken();\n\n  /// @notice Thrown when a user tries create or modify a position with an amount too big\n  error AmountTooBig();\n\n  /// @notice Returns the permission manager contract\n  /// @return The contract itself\n  function permissionManager() external view returns (IDCAPermissionManager);\n\n  /// @notice Returns total created positions\n  /// @return The total created positions\n  function totalCreatedPositions() external view returns (uint256);\n\n  /// @notice Returns a user position\n  /// @param _positionId The id of the position\n  /// @return _position The position itself\n  function userPosition(uint256 _positionId) external view returns (UserPosition memory _position);\n\n  /// @notice Creates a new position\n  /// @dev Will revert:\n  /// With ZeroAddress if _from, _to or _owner are zero\n  /// With InvalidToken if _from == _to\n  /// With ZeroAmount if _amount is zero\n  /// With AmountTooBig if _amount is too big\n  /// With ZeroSwaps if _amountOfSwaps is zero\n  /// With IntervalNotAllowed if _swapInterval is not allowed\n  /// @param _from The address of the \"from\" token\n  /// @param _to The address of the \"to\" token\n  /// @param _amount How many \"from\" tokens will be swapped in total\n  /// @param _amountOfSwaps How many swaps to execute for this position\n  /// @param _swapInterval How frequently the position's swaps should be executed\n  /// @param _owner The address of the owner of the position being created\n  /// @param _permissions Extra permissions to add to the position. Can be empty\n  /// @return _positionId The id of the created position\n  function deposit(\n    address _from,\n    address _to,\n    uint256 _amount,\n    uint32 _amountOfSwaps,\n    uint32 _swapInterval,\n    address _owner,\n    IDCAPermissionManager.PermissionSet[] calldata _permissions\n  ) external returns (uint256 _positionId);\n\n  /// @notice Creates a new position\n  /// @dev Will revert:\n  /// With ZeroAddress if _from, _to or _owner are zero\n  /// With InvalidToken if _from == _to\n  /// With ZeroAmount if _amount is zero\n  /// With AmountTooBig if _amount is too big\n  /// With ZeroSwaps if _amountOfSwaps is zero\n  /// With IntervalNotAllowed if _swapInterval is not allowed\n  /// @param _from The address of the \"from\" token\n  /// @param _to The address of the \"to\" token\n  /// @param _amount How many \"from\" tokens will be swapped in total\n  /// @param _amountOfSwaps How many swaps to execute for this position\n  /// @param _swapInterval How frequently the position's swaps should be executed\n  /// @param _owner The address of the owner of the position being created\n  /// @param _permissions Extra permissions to add to the position. Can be empty\n  /// @param _miscellaneous Bytes that will be emitted, and associated with the position\n  /// @return _positionId The id of the created position\n  function deposit(\n    address _from,\n    address _to,\n    uint256 _amount,\n    uint32 _amountOfSwaps,\n    uint32 _swapInterval,\n    address _owner,\n    IDCAPermissionManager.PermissionSet[] calldata _permissions,\n    bytes calldata _miscellaneous\n  ) external returns (uint256 _positionId);\n\n  /// @notice Withdraws all swapped tokens from a position to a recipient\n  /// @dev Will revert:\n  /// With InvalidPosition if _positionId is invalid\n  /// With UnauthorizedCaller if the caller doesn't have access to the position\n  /// With ZeroAddress if recipient is zero\n  /// @param _positionId The position's id\n  /// @param _recipient The address to withdraw swapped tokens to\n  /// @return _swapped How much was withdrawn\n  function withdrawSwapped(uint256 _positionId, address _recipient) external returns (uint256 _swapped);\n\n  /// @notice Withdraws all swapped tokens from multiple positions\n  /// @dev Will revert:\n  /// With InvalidPosition if any of the position ids are invalid\n  /// With UnauthorizedCaller if the caller doesn't have access to the position to any of the given positions\n  /// With ZeroAddress if recipient is zero\n  /// With PositionDoesNotMatchToken if any of the positions do not match the token in their position set\n  /// @param _positions A list positions, grouped by `to` token\n  /// @param _recipient The address to withdraw swapped tokens to\n  /// @return _withdrawn How much was withdrawn for each token\n  function withdrawSwappedMany(PositionSet[] calldata _positions, address _recipient) external returns (uint256[] memory _withdrawn);\n\n  /// @notice Takes the unswapped balance, adds the new deposited funds and modifies the position so that\n  /// it is executed in _newSwaps swaps\n  /// @dev Will revert:\n  /// With InvalidPosition if _positionId is invalid\n  /// With UnauthorizedCaller if the caller doesn't have access to the position\n  /// With AmountTooBig if _amount is too big\n  /// @param _positionId The position's id\n  /// @param _amount Amount of funds to add to the position\n  /// @param _newSwaps The new amount of swaps\n  function increasePosition(\n    uint256 _positionId,\n    uint256 _amount,\n    uint32 _newSwaps\n  ) external;\n\n  /// @notice Withdraws the specified amount from the unswapped balance and modifies the position so that\n  /// it is executed in _newSwaps swaps\n  /// @dev Will revert:\n  /// With InvalidPosition if _positionId is invalid\n  /// With UnauthorizedCaller if the caller doesn't have access to the position\n  /// With ZeroSwaps if _newSwaps is zero and _amount is not the total unswapped balance\n  /// @param _positionId The position's id\n  /// @param _amount Amount of funds to withdraw from the position\n  /// @param _newSwaps The new amount of swaps\n  /// @param _recipient The address to send tokens to\n  function reducePosition(\n    uint256 _positionId,\n    uint256 _amount,\n    uint32 _newSwaps,\n    address _recipient\n  ) external;\n\n  /// @notice Terminates the position and sends all unswapped and swapped balance to the specified recipients\n  /// @dev Will revert:\n  /// With InvalidPosition if _positionId is invalid\n  /// With UnauthorizedCaller if the caller doesn't have access to the position\n  /// With ZeroAddress if _recipientUnswapped or _recipientSwapped is zero\n  /// @param _positionId The position's id\n  /// @param _recipientUnswapped The address to withdraw unswapped tokens to\n  /// @param _recipientSwapped The address to withdraw swapped tokens to\n  /// @return _unswapped The unswapped balance sent to `_recipientUnswapped`\n  /// @return _swapped The swapped balance sent to `_recipientSwapped`\n  function terminate(\n    uint256 _positionId,\n    address _recipientUnswapped,\n    address _recipientSwapped\n  ) external returns (uint256 _unswapped, uint256 _swapped);\n}\n\n/// @title The interface for all swap related matters\n/// @notice These methods allow users to get information about the next swap, and how to execute it\ninterface IDCAHubSwapHandler {\n  /// @notice Information about a swap\n  struct SwapInfo {\n    // The tokens involved in the swap\n    TokenInSwap[] tokens;\n    // The pairs involved in the swap\n    PairInSwap[] pairs;\n  }\n\n  /// @notice Information about a token's role in a swap\n  struct TokenInSwap {\n    // The token's address\n    address token;\n    // How much will be given of this token as a reward\n    uint256 reward;\n    // How much of this token needs to be provided by swapper\n    uint256 toProvide;\n    // How much of this token will be paid to the platform\n    uint256 platformFee;\n  }\n\n  /// @notice Information about a pair in a swap\n  struct PairInSwap {\n    // The address of one of the tokens\n    address tokenA;\n    // The address of the other token\n    address tokenB;\n    // How much is 1 unit of token A when converted to B\n    uint256 ratioAToB;\n    // How much is 1 unit of token B when converted to A\n    uint256 ratioBToA;\n    // The swap intervals involved in the swap, represented as a byte\n    bytes1 intervalsInSwap;\n  }\n\n  /// @notice A pair of tokens, represented by their indexes in an array\n  struct PairIndexes {\n    // The index of the token A\n    uint8 indexTokenA;\n    // The index of the token B\n    uint8 indexTokenB;\n  }\n\n  /// @notice Emitted when a swap is executed\n  /// @param sender The address of the user that initiated the swap\n  /// @param rewardRecipient The address that received the reward\n  /// @param callbackHandler The address that executed the callback\n  /// @param swapInformation All information related to the swap\n  /// @param borrowed How much was borrowed\n  /// @param fee The swap fee at the moment of the swap\n  event Swapped(\n    address indexed sender,\n    address indexed rewardRecipient,\n    address indexed callbackHandler,\n    SwapInfo swapInformation,\n    uint256[] borrowed,\n    uint32 fee\n  );\n\n  /// @notice Thrown when pairs indexes are not sorted correctly\n  error InvalidPairs();\n\n  /// @notice Thrown when trying to execute a swap, but there is nothing to swap\n  error NoSwapsToExecute();\n\n  /// @notice Returns all information related to the next swap\n  /// @dev Will revert with:\n  /// With InvalidTokens if _tokens are not sorted, or if there are duplicates\n  /// With InvalidPairs if _pairs are not sorted (first by indexTokenA and then indexTokenB), or if indexTokenA >= indexTokenB for any pair\n  /// @param _tokens The tokens involved in the next swap\n  /// @param _pairs The pairs that you want to swap. Each element of the list points to the index of the token in the _tokens array\n  /// @return _swapInformation The information about the next swap\n  function getNextSwapInfo(address[] calldata _tokens, PairIndexes[] calldata _pairs) external view returns (SwapInfo memory _swapInformation);\n\n  /// @notice Executes a flash swap\n  /// @dev Will revert with:\n  /// With InvalidTokens if _tokens are not sorted, or if there are duplicates\n  /// With InvalidPairs if _pairs are not sorted (first by indexTokenA and then indexTokenB), or if indexTokenA >= indexTokenB for any pair\n  /// Paused if swaps are paused by protocol\n  /// NoSwapsToExecute if there are no swaps to execute for the given pairs\n  /// LiquidityNotReturned if the required tokens were not back during the callback\n  /// @param _tokens The tokens involved in the next swap\n  /// @param _pairsToSwap The pairs that you want to swap. Each element of the list points to the index of the token in the _tokens array\n  /// @param _rewardRecipient The address to send the reward to\n  /// @param _callbackHandler Address to call for callback (and send the borrowed tokens to)\n  /// @param _borrow How much to borrow of each of the tokens in _tokens. The amount must match the position of the token in the _tokens array\n  /// @param _data Bytes to send to the caller during the callback\n  /// @return Information about the executed swap\n  function swap(\n    address[] calldata _tokens,\n    PairIndexes[] calldata _pairsToSwap,\n    address _rewardRecipient,\n    address _callbackHandler,\n    uint256[] calldata _borrow,\n    bytes calldata _data\n  ) external returns (SwapInfo memory);\n}\n\n/// @title The interface for handling all configuration\n/// @notice This contract will manage configuration that affects all pairs, swappers, etc\ninterface IDCAHubConfigHandler {\n  /// @notice Emitted when a new oracle is set\n  /// @param _oracle The new oracle contract\n  event OracleSet(IPriceOracle _oracle);\n\n  /// @notice Emitted when a new swap fee is set\n  /// @param _feeSet The new swap fee\n  event SwapFeeSet(uint32 _feeSet);\n\n  /// @notice Emitted when new swap intervals are allowed\n  /// @param _swapIntervals The new swap intervals\n  event SwapIntervalsAllowed(uint32[] _swapIntervals);\n\n  /// @notice Emitted when some swap intervals are no longer allowed\n  /// @param _swapIntervals The swap intervals that are no longer allowed\n  event SwapIntervalsForbidden(uint32[] _swapIntervals);\n\n  /// @notice Emitted when a new platform fee ratio is set\n  /// @param _platformFeeRatio The new platform fee ratio\n  event PlatformFeeRatioSet(uint16 _platformFeeRatio);\n\n  /// @notice Thrown when trying to set a fee higher than the maximum allowed\n  error HighFee();\n\n  /// @notice Thrown when trying to set a fee that is not multiple of 100\n  error InvalidFee();\n\n  /// @notice Thrown when trying to set a fee ratio that is higher that the maximum allowed\n  error HighPlatformFeeRatio();\n\n  /// @notice Returns the max fee ratio that can be set\n  /// @dev Cannot be modified\n  /// @return The maximum possible value\n  // solhint-disable-next-line func-name-mixedcase\n  function MAX_PLATFORM_FEE_RATIO() external view returns (uint16);\n\n  /// @notice Returns the fee charged on swaps\n  /// @return _swapFee The fee itself\n  function swapFee() external view returns (uint32 _swapFee);\n\n  /// @notice Returns the price oracle contract\n  /// @return _oracle The contract itself\n  function oracle() external view returns (IPriceOracle _oracle);\n\n  /// @notice Returns how much will the platform take from the fees collected in swaps\n  /// @return The current ratio\n  function platformFeeRatio() external view returns (uint16);\n\n  /// @notice Returns the max fee that can be set for swaps\n  /// @dev Cannot be modified\n  /// @return _maxFee The maximum possible fee\n  // solhint-disable-next-line func-name-mixedcase\n  function MAX_FEE() external view returns (uint32 _maxFee);\n\n  /// @notice Returns a byte that represents allowed swap intervals\n  /// @return _allowedSwapIntervals The allowed swap intervals\n  function allowedSwapIntervals() external view returns (bytes1 _allowedSwapIntervals);\n\n  /// @notice Returns whether swaps and deposits are currently paused\n  /// @return _isPaused Whether swaps and deposits are currently paused\n  function paused() external view returns (bool _isPaused);\n\n  /// @notice Sets a new swap fee\n  /// @dev Will revert with HighFee if the fee is higher than the maximum\n  /// @dev Will revert with InvalidFee if the fee is not multiple of 100\n  /// @param _fee The new swap fee\n  function setSwapFee(uint32 _fee) external;\n\n  /// @notice Sets a new price oracle\n  /// @dev Will revert with ZeroAddress if the zero address is passed\n  /// @param _oracle The new oracle contract\n  function setOracle(IPriceOracle _oracle) external;\n\n  /// @notice Sets a new platform fee ratio\n  /// @dev Will revert with HighPlatformFeeRatio if given ratio is too high\n  /// @param _platformFeeRatio The new ratio\n  function setPlatformFeeRatio(uint16 _platformFeeRatio) external;\n\n  /// @notice Adds new swap intervals to the allowed list\n  /// @param _swapIntervals The new swap intervals\n  function addSwapIntervalsToAllowedList(uint32[] calldata _swapIntervals) external;\n\n  /// @notice Removes some swap intervals from the allowed list\n  /// @param _swapIntervals The swap intervals to remove\n  function removeSwapIntervalsFromAllowedList(uint32[] calldata _swapIntervals) external;\n\n  /// @notice Pauses all swaps and deposits\n  function pause() external;\n\n  /// @notice Unpauses all swaps and deposits\n  function unpause() external;\n}\n\n/// @title The interface for handling platform related actions\n/// @notice This contract will handle all actions that affect the platform in some way\ninterface IDCAHubPlatformHandler {\n  /// @notice Emitted when someone withdraws from the paltform balance\n  /// @param sender The address of the user that initiated the withdraw\n  /// @param recipient The address that received the withdraw\n  /// @param amounts The tokens (and the amount) that were withdrawn\n  event WithdrewFromPlatform(address indexed sender, address indexed recipient, IDCAHub.AmountOfToken[] amounts);\n\n  /// @notice Withdraws tokens from the platform balance\n  /// @param _amounts The amounts to withdraw\n  /// @param _recipient The address that will receive the tokens\n  function withdrawFromPlatformBalance(IDCAHub.AmountOfToken[] calldata _amounts, address _recipient) external;\n}\n\ninterface IDCAHub is IDCAHubParameters, IDCAHubConfigHandler, IDCAHubSwapHandler, IDCAHubPositionHandler, IDCAHubPlatformHandler {\n  /// @notice Specifies an amount of a token. For example to determine how much to borrow from certain tokens\n  struct AmountOfToken {\n    // The tokens' address\n    address token;\n    // How much to borrow or withdraw of the specified token\n    uint256 amount;\n  }\n\n  /// @notice Thrown when one of the parameters is a zero address\n  error ZeroAddress();\n\n  /// @notice Thrown when the expected liquidity is not returned in flash swaps\n  error LiquidityNotReturned();\n\n  /// @notice Thrown when a list of token pairs is not sorted, or if there are duplicates\n  error InvalidTokens();\n}\n"
    },
    "contracts/libraries/TokenSorting.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >0.6;\n\n/// @title TokenSorting library\n/// @notice Provides functions to sort tokens easily\nlibrary TokenSorting {\n  /// @notice Takes two tokens, and returns them sorted\n  /// @param _tokenA One of the tokens\n  /// @param _tokenB The other token\n  /// @return __tokenA The first of the tokens\n  /// @return __tokenB The second of the tokens\n  function sortTokens(address _tokenA, address _tokenB) internal pure returns (address __tokenA, address __tokenB) {\n    (__tokenA, __tokenB) = _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA);\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/interfaces/IDCAPermissionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport './IDCATokenDescriptor.sol';\n\ninterface IERC721BasicEnumerable {\n  /// @notice Count NFTs tracked by this contract\n  /// @return A count of valid NFTs tracked by this contract, where each one of\n  /// them has an assigned and queryable owner not equal to the zero address\n  function totalSupply() external view returns (uint256);\n}\n\n/// @title The interface for all permission related matters\n/// @notice These methods allow users to set and remove permissions to their positions\ninterface IDCAPermissionManager is IERC721, IERC721BasicEnumerable {\n  /// @notice Set of possible permissions\n  enum Permission {\n    INCREASE,\n    REDUCE,\n    WITHDRAW,\n    TERMINATE\n  }\n\n  /// @notice A set of permissions for a specific operator\n  struct PermissionSet {\n    // The address of the operator\n    address operator;\n    // The permissions given to the overator\n    Permission[] permissions;\n  }\n\n  /// @notice Emitted when permissions for a token are modified\n  /// @param tokenId The id of the token\n  /// @param permissions The set of permissions that were updated\n  event Modified(uint256 tokenId, PermissionSet[] permissions);\n\n  /// @notice Emitted when the address for a new descritor is set\n  /// @param descriptor The new descriptor contract\n  event NFTDescriptorSet(IDCATokenDescriptor descriptor);\n\n  /// @notice Thrown when a user tries to set the hub, once it was already set\n  error HubAlreadySet();\n\n  /// @notice Thrown when a user provides a zero address when they shouldn't\n  error ZeroAddress();\n\n  /// @notice Thrown when a user calls a method that can only be executed by the hub\n  error OnlyHubCanExecute();\n\n  /// @notice Thrown when a user tries to modify permissions for a token they do not own\n  error NotOwner();\n\n  /// @notice Thrown when a user tries to execute a permit with an expired deadline\n  error ExpiredDeadline();\n\n  /// @notice Thrown when a user tries to execute a permit with an invalid signature\n  error InvalidSignature();\n\n  /// @notice The permit typehash used in the permit signature\n  /// @return The typehash for the permit\n  // solhint-disable-next-line func-name-mixedcase\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n  /// @notice The permit typehash used in the permission permit signature\n  /// @return The typehash for the permission permit\n  // solhint-disable-next-line func-name-mixedcase\n  function PERMISSION_PERMIT_TYPEHASH() external pure returns (bytes32);\n\n  /// @notice The permit typehash used in the permission permit signature\n  /// @return The typehash for the permission set\n  // solhint-disable-next-line func-name-mixedcase\n  function PERMISSION_SET_TYPEHASH() external pure returns (bytes32);\n\n  /// @notice The domain separator used in the permit signature\n  /// @return The domain seperator used in encoding of permit signature\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n  /// @notice Returns the NFT descriptor contract\n  /// @return The contract for the NFT descriptor\n  function nftDescriptor() external returns (IDCATokenDescriptor);\n\n  /// @notice Returns the address of the DCA Hub\n  /// @return The address of the DCA Hub\n  function hub() external returns (address);\n\n  /// @notice Returns the next nonce to use for a given user\n  /// @param _user The address of the user\n  /// @return _nonce The next nonce to use\n  function nonces(address _user) external returns (uint256 _nonce);\n\n  /// @notice Returns whether the given address has the permission for the given token\n  /// @param _id The id of the token to check\n  /// @param _address The address of the user to check\n  /// @param _permission The permission to check\n  /// @return Whether the user has the permission or not\n  function hasPermission(\n    uint256 _id,\n    address _address,\n    Permission _permission\n  ) external view returns (bool);\n\n  /// @notice Returns whether the given address has the permissions for the given token\n  /// @param _id The id of the token to check\n  /// @param _address The address of the user to check\n  /// @param _permissions The permissions to check\n  /// @return _hasPermissions Whether the user has each permission or not\n  function hasPermissions(\n    uint256 _id,\n    address _address,\n    Permission[] calldata _permissions\n  ) external view returns (bool[] memory _hasPermissions);\n\n  /// @notice Sets the address for the hub\n  /// @dev Can only be successfully executed once. Once it's set, it can be modified again\n  /// Will revert:\n  /// With ZeroAddress if address is zero\n  /// With HubAlreadySet if the hub has already been set\n  /// @param _hub The address to set for the hub\n  function setHub(address _hub) external;\n\n  /// @notice Mints a new NFT with the given id, and sets the permissions for it\n  /// @dev Will revert with OnlyHubCanExecute if the caller is not the hub\n  /// @param _id The id of the new NFT\n  /// @param _owner The owner of the new NFT\n  /// @param _permissions Permissions to set for the new NFT\n  function mint(\n    uint256 _id,\n    address _owner,\n    PermissionSet[] calldata _permissions\n  ) external;\n\n  /// @notice Burns the NFT with the given id, and clears all permissions\n  /// @dev Will revert with OnlyHubCanExecute if the caller is not the hub\n  /// @param _id The token's id\n  function burn(uint256 _id) external;\n\n  /// @notice Sets new permissions for the given tokens\n  /// @dev Will revert with NotOwner if the caller is not the token's owner.\n  /// Operators that are not part of the given permission sets do not see their permissions modified.\n  /// In order to remove permissions to an operator, provide an empty list of permissions for them\n  /// @param _id The token's id\n  /// @param _permissions A list of permission sets\n  function modify(uint256 _id, PermissionSet[] calldata _permissions) external;\n\n  /// @notice Approves spending of a specific token ID by spender via signature\n  /// @param _spender The account that is being approved\n  /// @param _tokenId The ID of the token that is being approved for spending\n  /// @param _deadline The deadline timestamp by which the call must be mined for the approve to work\n  /// @param _v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n  /// @param _r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n  /// @param _s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n  function permit(\n    address _spender,\n    uint256 _tokenId,\n    uint256 _deadline,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) external;\n\n  /// @notice Sets permissions via signature\n  /// @dev This method works similarly to `modify`, but instead of being executed by the owner, it can be set my signature\n  /// @param _permissions The permissions to set\n  /// @param _tokenId The token's id\n  /// @param _deadline The deadline timestamp by which the call must be mined for the approve to work\n  /// @param _v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n  /// @param _r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n  /// @param _s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n  function permissionPermit(\n    PermissionSet[] calldata _permissions,\n    uint256 _tokenId,\n    uint256 _deadline,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) external;\n\n  /// @notice Sets a new NFT descriptor\n  /// @dev Will revert with ZeroAddress if address is zero\n  /// @param _descriptor The new NFT descriptor contract\n  function setNFTDescriptor(IDCATokenDescriptor _descriptor) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/interfaces/IDCATokenDescriptor.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\n/// @title The interface for generating a token's description\n/// @notice Contracts that implement this interface must return a base64 JSON with the entire description\ninterface IDCATokenDescriptor {\n  /// @notice Thrown when a user tries get the description of an unsupported interval\n  error InvalidInterval();\n\n  /// @notice Generates a token's description, both the JSON and the image inside\n  /// @param _hub The address of the DCA Hub\n  /// @param _tokenId The token/position id\n  /// @return _description The position's description\n  function tokenURI(address _hub, uint256 _tokenId) external view returns (string memory _description);\n\n  /// @notice Returns a text description for the given swap interval. For example for 3600, returns 'Hourly'\n  /// @dev Will revert with InvalidInterval if the function receives a unsupported interval\n  /// @param _swapInterval The swap interval\n  /// @return _description The description\n  function intervalToDescription(uint32 _swapInterval) external pure returns (string memory _description);\n}\n"
    },
    "contracts/mocks/DCAHub/DCAHubPlatformHandler.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.7 <0.9.0;\n\nimport '../../DCAHub/DCAHubPlatformHandler.sol';\nimport './DCAHubConfigHandler.sol';\n\ncontract DCAHubPlatformHandlerMock is DCAHubPlatformHandler, DCAHubConfigHandlerMock {\n  constructor(address _timelockedGovernor) DCAHubConfigHandlerMock(address(1), _timelockedGovernor, IPriceOracle(address(1))) {}\n}\n"
    },
    "contracts/mocks/DCAHub/DCAHubConfigHandler.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.8.7 <0.9.0;\n\nimport '../../DCAHub/DCAHubConfigHandler.sol';\nimport './DCAHubParameters.sol';\n\ncontract DCAHubConfigHandlerMock is DCAHubConfigHandler, DCAHubParametersMock {\n  constructor(\n    address _immediateGovernor,\n    address _timeLockedGovernor,\n    IPriceOracle _oracle\n  ) DCAHubConfigHandler(_immediateGovernor, _timeLockedGovernor, _oracle) {}\n}\n"
    },
    "contracts/mocks/DCAHub/DCAHubParameters.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.8.7 <0.9.0;\n\nimport '../../DCAHub/DCAHubParameters.sol';\n\ncontract DCAHubParametersMock is DCAHubParameters {\n  function setPlatformBalance(address _token, uint256 _amount) external {\n    platformBalance[_token] = _amount;\n  }\n\n  function addActiveSwapInterval(\n    address _tokenA,\n    address _tokenB,\n    bytes1 _swapIntervalMask\n  ) external {\n    activeSwapIntervals[_tokenA][_tokenB] |= _swapIntervalMask;\n  }\n\n  function setSwapAmountDelta(\n    address _tokenA,\n    address _tokenB,\n    bytes1 _swapIntervalMask,\n    uint32 _swap,\n    uint128 _deltaAToB,\n    uint128 _deltaBToA\n  ) external {\n    _swapAmountDelta[_tokenA][_tokenB][_swapIntervalMask][_swap] = SwapDelta(_deltaAToB, _deltaBToA);\n  }\n\n  function setAcummRatio(\n    address _tokenA,\n    address _tokenB,\n    bytes1 _swapIntervalMask,\n    uint32 _swap,\n    uint256 _accumRatioAToB,\n    uint256 _accumRatioBToA\n  ) external {\n    _accumRatio[_tokenA][_tokenB][_swapIntervalMask][_swap] = AccumRatio(_accumRatioAToB, _accumRatioBToA);\n  }\n\n  function setNextAmountsToSwap(\n    address _tokenA,\n    address _tokenB,\n    bytes1 _swapIntervalMask,\n    uint224 _amountToSwapAToB,\n    uint224 _amountToSwapBToA\n  ) external {\n    _swapData[_tokenA][_tokenB][_swapIntervalMask].nextAmountToSwapAToB = _amountToSwapAToB;\n    _swapData[_tokenA][_tokenB][_swapIntervalMask].nextAmountToSwapBToA = _amountToSwapBToA;\n  }\n\n  function setPerformedSwaps(\n    address _tokenA,\n    address _tokenB,\n    bytes1 _swapIntervalMask,\n    uint32 _performedSwaps\n  ) external {\n    _swapData[_tokenA][_tokenB][_swapIntervalMask].performedSwaps = _performedSwaps;\n  }\n\n  function setLastSwappedAt(\n    address _tokenA,\n    address _tokenB,\n    bytes1 _swapIntervalMask,\n    uint32 _lastSwappedAt\n  ) external {\n    _swapData[_tokenA][_tokenB][_swapIntervalMask].lastSwappedAt = _lastSwappedAt;\n  }\n\n  function setMagnitude(address[] calldata _tokens) external {\n    for (uint256 i; i < _tokens.length; i++) {\n      magnitude[_tokens[i]] = 10**IERC20Metadata(_tokens[i]).decimals();\n    }\n  }\n}\n"
    },
    "contracts/mocks/DCAHub/DCAHubSwapHandler.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.7 <0.9.0;\n\nimport '../../DCAHub/DCAHubSwapHandler.sol';\nimport './DCAHubConfigHandler.sol';\n\ncontract DCAHubSwapHandlerMock is DCAHubSwapHandler, DCAHubConfigHandlerMock {\n  struct RegisterSwapCall {\n    uint256 ratioAToB;\n    uint256 ratioBToA;\n    uint32 timestamp;\n  }\n\n  struct TotalAmountsToSwap {\n    uint256 amountTokenA;\n    uint256 amountTokenB;\n    bytes1 intervalsInSwap;\n  }\n\n  mapping(address => mapping(address => mapping(bytes1 => RegisterSwapCall))) public registerSwapCalls; // token A => token B => swap interval => call\n\n  mapping(address => mapping(address => uint256)) private _ratios; // from => to => ratio(from -> to)\n  mapping(address => mapping(address => TotalAmountsToSwap)) private _totalAmountsToSwap; // tokenA => tokenB => total amounts\n\n  SwapInfo private _swapInformation;\n  uint32 private _customTimestamp;\n\n  constructor(\n    address _immediateGovernor,\n    address _timeLockedGovernor,\n    IPriceOracle _oracle\n  ) DCAHubConfigHandlerMock(_immediateGovernor, _timeLockedGovernor, _oracle) DCAHubSwapHandler() {}\n\n  function registerSwap(\n    address _tokenA,\n    address _tokenB,\n    bytes1 _swapIntervalMask,\n    uint256 _ratioAToB,\n    uint256 _ratioBToA,\n    uint32 _timestamp\n  ) external {\n    _registerSwap(_tokenA, _tokenB, _swapIntervalMask, _ratioAToB, _ratioBToA, _timestamp);\n  }\n\n  function setBlockTimestamp(uint32 _blockTimestamp) external {\n    _customTimestamp = _blockTimestamp;\n  }\n\n  function _getTimestamp() internal view override returns (uint32 _blockTimestamp) {\n    _blockTimestamp = (_customTimestamp > 0) ? _customTimestamp : super._getTimestamp();\n  }\n\n  function getTotalAmountsToSwap(address _tokenA, address _tokenB)\n    external\n    view\n    returns (\n      uint256,\n      uint256,\n      bytes1\n    )\n  {\n    return _getTotalAmountsToSwap(_tokenA, _tokenB);\n  }\n\n  function _getTotalAmountsToSwap(address _tokenA, address _tokenB)\n    internal\n    view\n    override\n    returns (\n      uint256 _totalAmountTokenA,\n      uint256 _totalAmountTokenB,\n      bytes1 _affectedIntervals\n    )\n  {\n    TotalAmountsToSwap memory _amounts = _totalAmountsToSwap[_tokenA][_tokenB];\n    if (_amounts.amountTokenA == 0 && _amounts.amountTokenB == 0) {\n      return super._getTotalAmountsToSwap(_tokenA, _tokenB);\n    }\n    _totalAmountTokenA = _amounts.amountTokenA;\n    _totalAmountTokenB = _amounts.amountTokenB;\n    _affectedIntervals = _amounts.intervalsInSwap;\n  }\n\n  function getNextSwapInfo(address[] calldata _tokens, PairIndexes[] calldata _pairs) public view override returns (SwapInfo memory) {\n    if (_swapInformation.tokens.length > 0) {\n      return _swapInformation;\n    } else {\n      return super.getNextSwapInfo(_tokens, _pairs);\n    }\n  }\n\n  function calculateRatio(\n    address _tokenA,\n    address _tokenB,\n    uint256 _magnitudeA,\n    uint256 _magnitudeB,\n    IPriceOracle _oracle\n  ) external view returns (uint256, uint256) {\n    return _calculateRatio(_tokenA, _tokenB, _magnitudeA, _magnitudeB, _oracle);\n  }\n\n  function _calculateRatio(\n    address _tokenA,\n    address _tokenB,\n    uint256 _magnitudeA,\n    uint256 _magnitudeB,\n    IPriceOracle _oracle\n  ) internal view override returns (uint256 _ratioAToB, uint256 _ratioBToA) {\n    _ratioBToA = _ratios[_tokenB][_tokenA];\n    if (_ratioBToA == 0) {\n      return super._calculateRatio(_tokenA, _tokenB, _magnitudeA, _magnitudeB, _oracle);\n    }\n    _ratioAToB = (_magnitudeA * _magnitudeB) / _ratioBToA;\n  }\n\n  // Used to register calls\n  function _registerSwap(\n    address _tokenA,\n    address _tokenB,\n    bytes1 _swapInterval,\n    uint256 _ratioAToB,\n    uint256 _ratioBToA,\n    uint32 _timestamp\n  ) internal override {\n    registerSwapCalls[_tokenA][_tokenB][_swapInterval] = RegisterSwapCall({ratioAToB: _ratioAToB, ratioBToA: _ratioBToA, timestamp: _timestamp});\n    super._registerSwap(_tokenA, _tokenB, _swapInterval, _ratioAToB, _ratioBToA, _timestamp);\n  }\n\n  // Mocks setters\n\n  function setRatio(\n    address _tokenA,\n    address _tokenB,\n    uint256 _ratioBToA\n  ) external {\n    _ratios[_tokenB][_tokenA] = _ratioBToA;\n  }\n\n  function setTotalAmountsToSwap(\n    address _tokenA,\n    address _tokenB,\n    uint256 _totalAmountTokenA,\n    uint256 _totalAmountTokenB,\n    bytes1[] memory _intervalsInSwap\n  ) external {\n    _totalAmountsToSwap[_tokenA][_tokenB].amountTokenA = _totalAmountTokenA;\n    _totalAmountsToSwap[_tokenA][_tokenB].amountTokenB = _totalAmountTokenB;\n    bytes1 _intervalMask;\n\n    for (uint256 i = 0; i < _intervalsInSwap.length; i++) {\n      _intervalMask |= _intervalsInSwap[i];\n    }\n    _totalAmountsToSwap[_tokenA][_tokenB].intervalsInSwap = _intervalMask;\n  }\n\n  function setInternalGetNextSwapInfo(SwapInfo memory __swapInformation) external {\n    for (uint256 i; i < __swapInformation.tokens.length; i++) {\n      _swapInformation.tokens.push(__swapInformation.tokens[i]);\n    }\n\n    for (uint256 i; i < __swapInformation.pairs.length; i++) {\n      _swapInformation.pairs.push(__swapInformation.pairs[i]);\n    }\n  }\n}\n"
    },
    "contracts/DCAHub/DCAHubSwapHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/utils/math/Math.sol';\nimport '../interfaces/IDCAHubSwapCallee.sol';\nimport '../libraries/Intervals.sol';\nimport '../libraries/FeeMath.sol';\nimport './DCAHubConfigHandler.sol';\n\nabstract contract DCAHubSwapHandler is ReentrancyGuard, DCAHubConfigHandler, IDCAHubSwapHandler {\n  using SafeERC20 for IERC20Metadata;\n\n  function _registerSwap(\n    address _tokenA,\n    address _tokenB,\n    bytes1 _swapIntervalMask,\n    uint256 _ratioAToB,\n    uint256 _ratioBToA,\n    uint32 _timestamp\n  ) internal virtual {\n    SwapData memory _swapDataMem = _swapData[_tokenA][_tokenB][_swapIntervalMask];\n    if (_swapDataMem.nextAmountToSwapAToB > 0 || _swapDataMem.nextAmountToSwapBToA > 0) {\n      AccumRatio memory _accumRatioMem = _accumRatio[_tokenA][_tokenB][_swapIntervalMask][_swapDataMem.performedSwaps];\n      _accumRatio[_tokenA][_tokenB][_swapIntervalMask][_swapDataMem.performedSwaps + 1] = AccumRatio({\n        accumRatioAToB: _accumRatioMem.accumRatioAToB + _ratioAToB,\n        accumRatioBToA: _accumRatioMem.accumRatioBToA + _ratioBToA\n      });\n      SwapDelta memory _swapDeltaMem = _swapAmountDelta[_tokenA][_tokenB][_swapIntervalMask][_swapDataMem.performedSwaps + 2];\n      _swapData[_tokenA][_tokenB][_swapIntervalMask] = SwapData({\n        performedSwaps: _swapDataMem.performedSwaps + 1,\n        lastSwappedAt: _timestamp,\n        nextAmountToSwapAToB: _swapDataMem.nextAmountToSwapAToB - _swapDeltaMem.swapDeltaAToB,\n        nextAmountToSwapBToA: _swapDataMem.nextAmountToSwapBToA - _swapDeltaMem.swapDeltaBToA\n      });\n      delete _swapAmountDelta[_tokenA][_tokenB][_swapIntervalMask][_swapDataMem.performedSwaps + 2];\n    } else {\n      activeSwapIntervals[_tokenA][_tokenB] &= ~_swapIntervalMask;\n    }\n  }\n\n  function _convertTo(\n    uint256 _fromTokenMagnitude,\n    uint256 _amountFrom,\n    uint256 _rateFromTo,\n    uint32 _swapFee\n  ) internal pure returns (uint256 _amountTo) {\n    uint256 _numerator = _amountFrom * FeeMath.subtractFeeFromAmount(_swapFee, _rateFromTo);\n    _amountTo = _numerator / _fromTokenMagnitude;\n    // Note: we need to round up because we can't ask for less than what we actually need\n    if (_numerator % _fromTokenMagnitude != 0) _amountTo++;\n  }\n\n  function _getTimestamp() internal view virtual returns (uint32 _blockTimestamp) {\n    _blockTimestamp = uint32(block.timestamp);\n  }\n\n  function _getTotalAmountsToSwap(address _tokenA, address _tokenB)\n    internal\n    view\n    virtual\n    returns (\n      uint256 _totalAmountToSwapTokenA,\n      uint256 _totalAmountToSwapTokenB,\n      bytes1 _intervalsInSwap\n    )\n  {\n    bytes1 _activeIntervals = activeSwapIntervals[_tokenA][_tokenB];\n    uint32 _blockTimestamp = _getTimestamp();\n    bytes1 _mask = 0x01;\n    while (_activeIntervals >= _mask && _mask > 0) {\n      if (_activeIntervals & _mask != 0) {\n        SwapData memory _swapDataMem = _swapData[_tokenA][_tokenB][_mask];\n        uint32 _swapInterval = Intervals.maskToInterval(_mask);\n        if (((_swapDataMem.lastSwappedAt / _swapInterval) + 1) * _swapInterval > _blockTimestamp) {\n          // Note: this 'break' is both an optimization and a search for more CoW. Since this loop starts with the smaller intervals, it is\n          // highly unlikely that if a small interval can't be swapped, a bigger interval can. It could only happen when a position was just\n          // created for a new swap interval. At the same time, by adding this check, we force intervals to be swapped together. Therefore\n          // increasing the chance of CoW (Coincidence of Wants), and reducing the need for external funds.\n          break;\n        }\n        _intervalsInSwap |= _mask;\n        _totalAmountToSwapTokenA += _swapDataMem.nextAmountToSwapAToB;\n        _totalAmountToSwapTokenB += _swapDataMem.nextAmountToSwapBToA;\n      }\n      _mask <<= 1;\n    }\n\n    if (_totalAmountToSwapTokenA == 0 && _totalAmountToSwapTokenB == 0) {\n      // Note: if there are no tokens to swap, then we don't want to execute any swaps for this pair\n      _intervalsInSwap = 0;\n    }\n  }\n\n  function _calculateRatio(\n    address _tokenA,\n    address _tokenB,\n    uint256 _magnitudeA,\n    uint256 _magnitudeB,\n    IPriceOracle _oracle\n  ) internal view virtual returns (uint256 _ratioAToB, uint256 _ratioBToA) {\n    _ratioBToA = _oracle.quote(_tokenB, uint128(_magnitudeB), _tokenA);\n    _ratioAToB = (_magnitudeB * _magnitudeA) / _ratioBToA;\n  }\n\n  /// @inheritdoc IDCAHubSwapHandler\n  function getNextSwapInfo(address[] calldata _tokens, PairIndexes[] calldata _pairs)\n    public\n    view\n    virtual\n    returns (SwapInfo memory _swapInformation)\n  {\n    // Note: we are caching these variables in memory so we can read storage only once (it's cheaper that way)\n    uint32 _swapFee = swapFee;\n    IPriceOracle _oracle = oracle;\n\n    uint256[] memory _total = new uint256[](_tokens.length);\n    uint256[] memory _needed = new uint256[](_tokens.length);\n    _swapInformation.pairs = new PairInSwap[](_pairs.length);\n\n    for (uint256 i; i < _pairs.length; i++) {\n      uint8 indexTokenA = _pairs[i].indexTokenA;\n      uint8 indexTokenB = _pairs[i].indexTokenB;\n      if (\n        indexTokenA >= indexTokenB ||\n        (i > 0 &&\n          (indexTokenA < _pairs[i - 1].indexTokenA || (indexTokenA == _pairs[i - 1].indexTokenA && indexTokenB <= _pairs[i - 1].indexTokenB)))\n      ) {\n        // Note: this confusing condition verifies that the pairs are sorted, first by token A, and then by token B\n        revert InvalidPairs();\n      }\n\n      PairInSwap memory _pairInSwap;\n      _pairInSwap.tokenA = _tokens[indexTokenA];\n      _pairInSwap.tokenB = _tokens[indexTokenB];\n      uint256 _magnitudeA = magnitude[_pairInSwap.tokenA];\n      uint256 _magnitudeB = magnitude[_pairInSwap.tokenB];\n\n      if (_magnitudeA == 0 || _magnitudeB == 0) revert IDCAHub.InvalidTokens();\n      uint256 _amountToSwapTokenA;\n      uint256 _amountToSwapTokenB;\n\n      (_amountToSwapTokenA, _amountToSwapTokenB, _pairInSwap.intervalsInSwap) = _getTotalAmountsToSwap(_pairInSwap.tokenA, _pairInSwap.tokenB);\n\n      _total[indexTokenA] += _amountToSwapTokenA;\n      _total[indexTokenB] += _amountToSwapTokenB;\n\n      (_pairInSwap.ratioAToB, _pairInSwap.ratioBToA) = _calculateRatio(\n        _pairInSwap.tokenA,\n        _pairInSwap.tokenB,\n        _magnitudeA,\n        _magnitudeB,\n        _oracle\n      );\n\n      _needed[indexTokenA] += _convertTo(_magnitudeB, _amountToSwapTokenB, _pairInSwap.ratioBToA, _swapFee);\n      _needed[indexTokenB] += _convertTo(_magnitudeA, _amountToSwapTokenA, _pairInSwap.ratioAToB, _swapFee);\n\n      _swapInformation.pairs[i] = _pairInSwap;\n    }\n\n    // Note: we are caching this variable in memory so we can read storage only once (it's cheaper that way)\n    uint16 _platformFeeRatio = platformFeeRatio;\n\n    _swapInformation.tokens = new TokenInSwap[](_tokens.length);\n    for (uint256 i; i < _swapInformation.tokens.length; i++) {\n      if (i > 0 && _tokens[i] <= _tokens[i - 1]) {\n        revert IDCAHub.InvalidTokens();\n      }\n\n      TokenInSwap memory _tokenInSwap;\n      _tokenInSwap.token = _tokens[i];\n\n      uint256 _neededInSwap = _needed[i];\n      uint256 _totalBeingSwapped = _total[i];\n\n      if (_neededInSwap > 0 || _totalBeingSwapped > 0) {\n        uint256 _totalFee = FeeMath.calculateSubtractedFee(_swapFee, _neededInSwap);\n\n        int256 _platformFee = int256((_totalFee * _platformFeeRatio) / MAX_PLATFORM_FEE_RATIO);\n\n        // If diff is negative, we need tokens. If diff is positive, then we have more than is needed\n        int256 _diff = int256(_totalBeingSwapped) - int256(_neededInSwap);\n\n        // Instead of checking if diff is positive or not, we compare against the platform fee. This is to avoid any rounding issues\n        if (_diff > _platformFee) {\n          _tokenInSwap.reward = uint256(_diff - _platformFee);\n        } else if (_diff < _platformFee) {\n          _tokenInSwap.toProvide = uint256(_platformFee - _diff);\n        }\n        _tokenInSwap.platformFee = uint256(_platformFee);\n      }\n      _swapInformation.tokens[i] = _tokenInSwap;\n    }\n  }\n\n  /// @inheritdoc IDCAHubSwapHandler\n  function swap(\n    address[] calldata _tokens,\n    PairIndexes[] calldata _pairsToSwap,\n    address _rewardRecipient,\n    address _callbackHandler,\n    uint256[] calldata _borrow,\n    bytes calldata _data\n  ) public nonReentrant whenNotPaused returns (SwapInfo memory _swapInformation) {\n    // Note: we are caching this variable in memory so we can read storage only once (it's cheaper that way)\n    uint32 _swapFee = swapFee;\n\n    {\n      _swapInformation = getNextSwapInfo(_tokens, _pairsToSwap);\n\n      uint32 _timestamp = _getTimestamp();\n      bool _executedAPair;\n      for (uint256 i; i < _swapInformation.pairs.length; i++) {\n        PairInSwap memory _pairInSwap = _swapInformation.pairs[i];\n        bytes1 _intervalsInSwap = _pairInSwap.intervalsInSwap;\n        bytes1 _mask = 0x01;\n        while (_intervalsInSwap >= _mask && _mask > 0) {\n          if (_intervalsInSwap & _mask != 0) {\n            _registerSwap(\n              _pairInSwap.tokenA,\n              _pairInSwap.tokenB,\n              _mask,\n              FeeMath.subtractFeeFromAmount(_swapFee, _pairInSwap.ratioAToB),\n              FeeMath.subtractFeeFromAmount(_swapFee, _pairInSwap.ratioBToA),\n              _timestamp\n            );\n          }\n          _mask <<= 1;\n        }\n        _executedAPair = _executedAPair || _intervalsInSwap > 0;\n      }\n\n      if (!_executedAPair) {\n        revert NoSwapsToExecute();\n      }\n    }\n\n    uint256[] memory _beforeBalances = new uint256[](_swapInformation.tokens.length);\n    for (uint256 i; i < _swapInformation.tokens.length; i++) {\n      TokenInSwap memory _tokenInSwap = _swapInformation.tokens[i];\n      uint256 _amountToBorrow = _borrow[i];\n\n      // Remember balances before callback\n      if (_tokenInSwap.toProvide > 0 || _amountToBorrow > 0) {\n        _beforeBalances[i] = _balanceOf(_tokenInSwap.token);\n      }\n\n      // Optimistically transfer tokens\n      if (_rewardRecipient == _callbackHandler) {\n        uint256 _amountToSend = _tokenInSwap.reward + _amountToBorrow;\n        if (_amountToSend > 0) {\n          _transfer(_tokenInSwap.token, _callbackHandler, _amountToSend);\n        }\n      } else {\n        if (_tokenInSwap.reward > 0) {\n          _transfer(_tokenInSwap.token, _rewardRecipient, _tokenInSwap.reward);\n        }\n        if (_amountToBorrow > 0) {\n          _transfer(_tokenInSwap.token, _callbackHandler, _amountToBorrow);\n        }\n      }\n    }\n\n    // Make call\n    IDCAHubSwapCallee(_callbackHandler).DCAHubSwapCall(msg.sender, _swapInformation.tokens, _borrow, _data);\n\n    // Checks and balance updates\n    for (uint256 i; i < _swapInformation.tokens.length; i++) {\n      TokenInSwap memory _tokenInSwap = _swapInformation.tokens[i];\n      uint256 _addToPlatformBalance = _tokenInSwap.platformFee;\n\n      if (_tokenInSwap.toProvide > 0 || _borrow[i] > 0) {\n        uint256 _amountToHave = _beforeBalances[i] + _tokenInSwap.toProvide - _tokenInSwap.reward;\n\n        uint256 _currentBalance = _balanceOf(_tokenInSwap.token);\n\n        // Make sure tokens were sent back\n        if (_currentBalance < _amountToHave) {\n          revert IDCAHub.LiquidityNotReturned();\n        }\n\n        // Any extra tokens that might have been received, are set as platform balance\n        _addToPlatformBalance += (_currentBalance - _amountToHave);\n      }\n\n      // Update platform balance\n      if (_addToPlatformBalance > 0) {\n        platformBalance[_tokenInSwap.token] += _addToPlatformBalance;\n      }\n    }\n\n    // Emit event\n    emit Swapped(msg.sender, _rewardRecipient, _callbackHandler, _swapInformation, _borrow, _swapFee);\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "contracts/interfaces/IDCAHubSwapCallee.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport './IDCAHub.sol';\n\n/// @title The interface for handling flash swaps\n/// @notice Users that want to execute flash swaps must implement this interface\ninterface IDCAHubSwapCallee {\n  // solhint-disable-next-line func-name-mixedcase\n  function DCAHubSwapCall(\n    address _sender,\n    IDCAHub.TokenInSwap[] calldata _tokens,\n    uint256[] calldata _borrowed,\n    bytes calldata _data\n  ) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.0;\n\n/// @title Optimized overflow and underflow safe math operations\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\nlibrary LowGasSafeMath {\n    /// @notice Returns x + y, reverts if sum overflows uint256\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    /// @notice Returns x - y, reverts if underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    /// @notice Returns x * y, reverts if overflows\n    /// @param x The multiplicand\n    /// @param y The multiplier\n    /// @return z The product of x and y\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(x == 0 || (z = x * y) / x == y);\n    }\n\n    /// @notice Returns x + y, reverts if overflows or underflows\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x + y) >= x == (y >= 0));\n    }\n\n    /// @notice Returns x - y, reverts if overflows or underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x - y) <= x == (y >= 0));\n    }\n}\n"
    },
    "contracts/utils/Governable.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.7.0;\n\ninterface IGovernable {\n  event PendingGovernorSet(address pendingGovernor);\n  event PendingGovernorAccepted();\n\n  function setPendingGovernor(address _pendingGovernor) external;\n\n  function acceptPendingGovernor() external;\n\n  function governor() external view returns (address);\n\n  function pendingGovernor() external view returns (address);\n\n  function isGovernor(address _account) external view returns (bool _isGovernor);\n\n  function isPendingGovernor(address _account) external view returns (bool _isPendingGovernor);\n}\n\nabstract contract Governable is IGovernable {\n  address private _governor;\n  address private _pendingGovernor;\n\n  constructor(address __governor) {\n    require(__governor != address(0), 'Governable: zero address');\n    _governor = __governor;\n  }\n\n  function governor() external view override returns (address) {\n    return _governor;\n  }\n\n  function pendingGovernor() external view override returns (address) {\n    return _pendingGovernor;\n  }\n\n  function setPendingGovernor(address __pendingGovernor) external virtual override onlyGovernor {\n    _setPendingGovernor(__pendingGovernor);\n  }\n\n  function _setPendingGovernor(address __pendingGovernor) internal {\n    require(__pendingGovernor != address(0), 'Governable: zero address');\n    _pendingGovernor = __pendingGovernor;\n    emit PendingGovernorSet(__pendingGovernor);\n  }\n\n  function acceptPendingGovernor() external virtual override onlyPendingGovernor {\n    _acceptPendingGovernor();\n  }\n\n  function _acceptPendingGovernor() internal {\n    require(_pendingGovernor != address(0), 'Governable: no pending governor');\n    _governor = _pendingGovernor;\n    _pendingGovernor = address(0);\n    emit PendingGovernorAccepted();\n  }\n\n  function isGovernor(address _account) public view override returns (bool _isGovernor) {\n    return _account == _governor;\n  }\n\n  function isPendingGovernor(address _account) public view override returns (bool _isPendingGovernor) {\n    return _account == _pendingGovernor;\n  }\n\n  modifier onlyGovernor() {\n    require(isGovernor(msg.sender), 'Governable: only governor');\n    _;\n  }\n\n  modifier onlyPendingGovernor() {\n    require(isPendingGovernor(msg.sender), 'Governable: only pending governor');\n    _;\n  }\n}\n"
    },
    "contracts/mocks/utils/Governable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.8.7 <0.9.0;\n\nimport '../../utils/Governable.sol';\n\ncontract GovernableMock is Governable {\n  constructor(address _governor) Governable(_governor) {}\n\n  function onlyGovernorAllowed() external onlyGovernor {}\n\n  function onlyPendingGovernorAllowed() external onlyPendingGovernor {}\n\n  function setPendingGovernorInternal(address _pendingGovernor) external {\n    _setPendingGovernor(_pendingGovernor);\n  }\n\n  function acceptPendingGovernorInternal() external {\n    _acceptPendingGovernor();\n  }\n}\n"
    },
    "contracts/oracles/OracleAggregator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.7 <0.9.0;\n\nimport '../interfaces/oracles/IOracleAggregator.sol';\nimport '../libraries/TokenSorting.sol';\nimport '../utils/Governable.sol';\n\ncontract OracleAggregator is Governable, IOracleAggregator {\n  // Note: by default oracle 1 will take precendence over oracle 2\n  /// @inheritdoc IOracleAggregator\n  IPriceOracle public immutable oracle1;\n  /// @inheritdoc IOracleAggregator\n  IPriceOracle public immutable oracle2;\n  mapping(address => mapping(address => OracleInUse)) internal _oracleInUse;\n\n  constructor(\n    IPriceOracle _oracle1,\n    IPriceOracle _oracle2,\n    address _governor\n  ) Governable(_governor) {\n    require(address(_oracle1) != address(0) && address(_oracle2) != address(0), 'ZeroAddress');\n    oracle1 = _oracle1;\n    oracle2 = _oracle2;\n  }\n\n  /// @inheritdoc IPriceOracle\n  function canSupportPair(address _tokenA, address _tokenB) external view returns (bool) {\n    return oracle1.canSupportPair(_tokenA, _tokenB) || oracle2.canSupportPair(_tokenA, _tokenB);\n  }\n\n  /// @inheritdoc IPriceOracle\n  function quote(\n    address _tokenIn,\n    uint128 _amountIn,\n    address _tokenOut\n  ) external view returns (uint256 _amountOut) {\n    (address _tokenA, address _tokenB) = TokenSorting.sortTokens(_tokenIn, _tokenOut);\n    OracleInUse _inUse = _oracleInUse[_tokenA][_tokenB];\n    require(_inUse != OracleInUse.NONE, 'PairNotSupported');\n    if (_inUse == OracleInUse.ORACLE_1) {\n      return oracle1.quote(_tokenIn, _amountIn, _tokenOut);\n    } else {\n      return oracle2.quote(_tokenIn, _amountIn, _tokenOut);\n    }\n  }\n\n  /// @inheritdoc IOracleAggregator\n  function oracleInUse(address _tokenA, address _tokenB) external view returns (OracleInUse) {\n    (address __tokenA, address __tokenB) = TokenSorting.sortTokens(_tokenA, _tokenB);\n    return _oracleInUse[__tokenA][__tokenB];\n  }\n\n  /// @inheritdoc IPriceOracle\n  function reconfigureSupportForPair(address _tokenA, address _tokenB) external onlyGovernor {\n    (address __tokenA, address __tokenB) = TokenSorting.sortTokens(_tokenA, _tokenB);\n    _addSupportForPair(__tokenA, __tokenB);\n  }\n\n  /// @inheritdoc IPriceOracle\n  function addSupportForPairIfNeeded(address _tokenA, address _tokenB) external {\n    (address __tokenA, address __tokenB) = TokenSorting.sortTokens(_tokenA, _tokenB);\n    if (_oracleInUse[__tokenA][__tokenB] == OracleInUse.NONE) {\n      _addSupportForPair(__tokenA, __tokenB);\n    }\n  }\n\n  /// @inheritdoc IOracleAggregator\n  function setOracleForPair(\n    address _tokenA,\n    address _tokenB,\n    OracleInUse _oracle\n  ) external onlyGovernor {\n    if (_oracle == OracleInUse.ORACLE_1) {\n      oracle1.addSupportForPairIfNeeded(_tokenA, _tokenB);\n    } else if (_oracle == OracleInUse.ORACLE_2) {\n      oracle2.addSupportForPairIfNeeded(_tokenA, _tokenB);\n    } else {\n      revert InvalidOracle();\n    }\n    (address __tokenA, address __tokenB) = TokenSorting.sortTokens(_tokenA, _tokenB);\n    _setOracleInUse(__tokenA, __tokenB, _oracle);\n  }\n\n  function _addSupportForPair(address _tokenA, address _tokenB) internal virtual {\n    if (oracle1.canSupportPair(_tokenA, _tokenB)) {\n      oracle1.reconfigureSupportForPair(_tokenA, _tokenB);\n      _setOracleInUse(_tokenA, _tokenB, OracleInUse.ORACLE_1);\n    } else {\n      oracle2.reconfigureSupportForPair(_tokenA, _tokenB);\n      _setOracleInUse(_tokenA, _tokenB, OracleInUse.ORACLE_2);\n    }\n  }\n\n  function _setOracleInUse(\n    address _tokenA,\n    address _tokenB,\n    OracleInUse _oracle\n  ) internal {\n    _oracleInUse[_tokenA][_tokenB] = _oracle;\n    emit OracleSetForUse(_tokenA, _tokenB, _oracle);\n  }\n}\n"
    },
    "contracts/interfaces/oracles/IOracleAggregator.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './IPriceOracle.sol';\n\n/// @title An implementation of IPriceOracle that aggregates two other oracles\n/// @notice This oracle will use two other oracles to support price quotes\ninterface IOracleAggregator is IPriceOracle {\n  /// @notice The oracle that is currently in use by a specific pair\n  enum OracleInUse {\n    // No oracle is being used right now for the pair\n    NONE,\n    // Oracle 1 is being used for the pair\n    ORACLE_1,\n    // Oracle 2 is being used for the pair\n    ORACLE_2\n  }\n\n  /// @notice Emitted when a new oracle is set for use for a pair\n  /// @param tokenA One of the pair's tokens\n  /// @param tokenB The other of the pair's tokens\n  /// @param oracleInUse The oracle that will be used for the pair\n  event OracleSetForUse(address tokenA, address tokenB, OracleInUse oracleInUse);\n\n  /// @notice Thrown when trying to set an invalid oracle for use\n  error InvalidOracle();\n\n  /// @notice Returns the first oracle of the two being aggregated\n  /// @return The first oracle\n  function oracle1() external view returns (IPriceOracle);\n\n  /// @notice Returns the second oracle of the two being aggregated\n  /// @return The second oracle\n  function oracle2() external view returns (IPriceOracle);\n\n  /// @notice Returns the oracle that is being used for the given pair\n  /// @dev _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\n  /// @return The oracle that is being used for the given pair\n  function oracleInUse(address _tokenA, address _tokenB) external view returns (OracleInUse);\n\n  /// @notice Sets the oracle for the given pair, and initializes the oracle if necessary\n  /// @dev _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\n  /// @param _tokenA One of the pair's tokens\n  /// @param _tokenB The other of the pair's tokens\n  function setOracleForPair(\n    address _tokenA,\n    address _tokenB,\n    OracleInUse _oracle\n  ) external;\n}\n"
    },
    "contracts/interfaces/oracles/IUniswapV3Oracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol';\nimport './IPriceOracle.sol';\n\n/// @title An implementation of IPriceOracle that uses Uniswap V3 pool oracles\n/// @notice This oracle will attempt to use all fee tiers of the same pair when calculating quotes\ninterface IUniswapV3Oracle is IPriceOracle {\n  /// @notice Emitted when a new fee tier is added\n  /// @return feeTier The added fee tier\n  event AddedFeeTier(uint24 feeTier);\n\n  /// @notice Emitted when a new period is set\n  /// @return period The new period\n  event PeriodChanged(uint32 period);\n\n  /// @notice Emitted when a new cardinality per minute is set\n  /// @return cardinalityPerMinute The new cardinality per minute\n  event CardinalityPerMinuteChanged(uint8 cardinalityPerMinute);\n\n  /// @notice Emitted when the oracle add supports for a new pair\n  /// @param tokenA One of the pair's tokens\n  /// @param tokenB The other of the pair's tokens\n  event AddedSupportForPairInUniswapOracle(address tokenA, address tokenB);\n\n  /// @notice Returns the Uniswap V3 Factory\n  /// @dev Cannot be modified after deployment\n  /// @return _factory The Uniswap V3 Factory\n  function factory() external view returns (IUniswapV3Factory _factory);\n\n  /// @notice Returns a list of all supported Uniswap V3 fee tiers\n  /// @return _feeTiers An array of all supported fee tiers\n  function supportedFeeTiers() external view returns (uint24[] memory _feeTiers);\n\n  /// @notice Returns a list of all Uniswap V3 pools used for a given pair\n  /// @dev _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\n  /// @return _pools An array with all pools used for quoting the given pair\n  function poolsUsedForPair(address _tokenA, address _tokenB) external view returns (address[] memory _pools);\n\n  /// @notice Returns the cardinality per minute used for adding support to pairs\n  /// @return The cardinality per minute used for increase cardinality calculations\n  function cardinalityPerMinute() external view returns (uint8);\n\n  /// @notice Returns the period used for the TWAP calculation\n  /// @return The period used for the TWAP\n  function period() external view returns (uint16);\n\n  /// @notice Returns minimum possible period\n  /// @dev Cannot be modified after deployment\n  /// @return The minimum possible period\n  function minimumPeriod() external view returns (uint16);\n\n  /// @notice Returns maximum possible period\n  /// @dev Cannot be modified after deployment\n  /// @return The maximum possible period\n  function maximumPeriod() external view returns (uint16);\n\n  /// @notice Returns the minimum liquidity that a pool needs to have in order to be used for a pair's quote\n  /// @dev This check is only performed when adding support for a pair. If the pool's liquidity then\n  /// goes below the threshold, then it will still be used for the quote calculation\n  /// @return The minimum liquidity threshold\n  // solhint-disable-next-line func-name-mixedcase\n  function MINIMUM_LIQUIDITY_THRESHOLD() external view returns (uint16);\n\n  /// @notice Adds support for a new Uniswap V3 fee tier\n  /// @dev Will revert if the provided fee tier is not supported by Uniswap V3\n  /// @param _feeTier The new fee tier\n  function addFeeTier(uint24 _feeTier) external;\n\n  /// @notice Sets the period to be used for the TWAP calculation\n  /// @dev Will revert it is lower than minimumPeriod or greater than maximumPeriod\n  /// WARNING: increasing the period could cause big problems, because Uniswap V3 pools might not support a TWAP so old.\n  /// @param _period The new period\n  function setPeriod(uint16 _period) external;\n\n  /// @notice Sets the cardinality per minute to be used when increasing observation cardinality at the moment of adding support for pairs\n  /// WARNING: increasing the cardinality per minute will make adding support to a pair significantly costly\n  /// @param _cardinalityPerMinute The new cardinality per minute\n  function setCardinalityPerMinute(uint8 _cardinalityPerMinute) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "contracts/interfaces/oracles/IChainlinkOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport '@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol';\nimport './IPriceOracle.sol';\n\n/// @title An implementation of IPriceOracle that uses Chainlink feeds\n/// @notice This oracle will attempt to use all available feeds to determine prices between pairs\ninterface IChainlinkOracle is IPriceOracle {\n  /// @notice The plan that will be used to calculate quotes for a given pair\n  enum PricingPlan {\n    // There is no plan calculated\n    NONE,\n    // Will use the ETH/USD feed\n    ETH_USD_PAIR,\n    // Will use a token/USD feed\n    TOKEN_USD_PAIR,\n    // Will use a token/ETH feed\n    TOKEN_ETH_PAIR,\n    // Will use tokenIn/USD and tokenOut/USD feeds\n    TOKEN_TO_USD_TO_TOKEN_PAIR,\n    // Will use tokenIn/ETH and tokenOut/ETH feeds\n    TOKEN_TO_ETH_TO_TOKEN_PAIR,\n    // Will use tokenA/USD, tokenB/ETH and ETH/USD feeds\n    TOKEN_A_TO_USD_TO_ETH_TO_TOKEN_B,\n    // Will use tokenA/ETH, tokenB/USD and ETH/USD feeds\n    TOKEN_A_TO_ETH_TO_USD_TO_TOKEN_B\n  }\n\n  /// @notice Emitted when the oracle add supports for a new pair\n  /// @param tokenA One of the pair's tokens\n  /// @param tokenB The other of the pair's tokens\n  event AddedSupportForPairInChainlinkOracle(address tokenA, address tokenB);\n\n  /// @notice Emitted when new tokens are considered USD\n  /// @param tokens The new tokens\n  event TokensConsideredUSD(address[] tokens);\n\n  /// @notice Emitted when new mappings are added\n  /// @param tokens The tokens\n  /// @param mappings Their new mappings\n  event MappingsAdded(address[] tokens, address[] mappings);\n\n  /// @notice Emitted when a new max delay is set\n  /// @param newMaxDelay The new max delay\n  event MaxDelaySet(uint32 newMaxDelay);\n\n  /// @notice Thrown when the price is non-positive\n  error InvalidPrice();\n\n  /// @notice Thrown when the last price update was too long ago\n  error LastUpdateIsTooOld();\n\n  /// @notice Thrown when one of the parameters is a zero address\n  error ZeroAddress();\n\n  /// @notice Thrown when the given max delay is zero\n  error ZeroMaxDelay();\n\n  /// @notice Thrown when trying to configure a pair that is not supported\n  error PairNotSupported();\n\n  /// @notice Thrown when the input for adding mappings in invalid\n  error InvalidMappingsInput();\n\n  /// @notice Returns the Chainlink feed registry\n  /// @return The Chainlink registry\n  function registry() external view returns (FeedRegistryInterface);\n\n  /// @notice Returns how old the last price update can be before the oracle reverts by considering it too old\n  /// @return How old the last price update can be in seconds\n  function maxDelay() external view returns (uint32);\n\n  /// @notice Returns the address of the WETH ERC-20 token\n  /// @return The address of the token\n  // solhint-disable-next-line func-name-mixedcase\n  function WETH() external view returns (address);\n\n  /// @notice Returns the pricing plan that will be used when quoting the given pair\n  /// @dev It is expected that _tokenA < _tokenB\n  /// @return The pricing plan that will be used\n  function planForPair(address _tokenA, address _tokenB) external view returns (PricingPlan);\n\n  /// @notice Returns the mapping of the given token, if it exists. If it doesn't, then the original token is returned\n  /// @return If it exists, the mapping is returned. Otherwise, the original token is returned\n  function mappedToken(address _token) external view returns (address);\n\n  /// @notice Adds new tokens that should be considered USD stablecoins\n  /// @param _addresses The addresses of the tokens\n  function addUSDStablecoins(address[] calldata _addresses) external;\n\n  /// @notice Adds new token mappings\n  /// @param _addresses The addresses of the tokens\n  /// @param _mappings The addresses of their mappings\n  function addMappings(address[] calldata _addresses, address[] calldata _mappings) external;\n\n  /// @notice Sets a new max delay\n  /// @param _maxDelay The new max delay\n  function setMaxDelay(uint32 _maxDelay) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"./AggregatorV2V3Interface.sol\";\n\ninterface FeedRegistryInterface {\n  struct Phase {\n    uint16 phaseId;\n    uint80 startingAggregatorRoundId;\n    uint80 endingAggregatorRoundId;\n  }\n\n  event FeedProposed(\n    address indexed asset,\n    address indexed denomination,\n    address indexed proposedAggregator,\n    address currentAggregator,\n    address sender\n  );\n  event FeedConfirmed(\n    address indexed asset,\n    address indexed denomination,\n    address indexed latestAggregator,\n    address previousAggregator,\n    uint16 nextPhaseId,\n    address sender\n  );\n\n  // V3 AggregatorV3Interface\n\n  function decimals(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint256\n    );\n\n  function latestRoundData(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function getRoundData(\n    address base,\n    address quote,\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  // V2 AggregatorInterface\n\n  function latestAnswer(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      int256 answer\n    );\n\n  function latestTimestamp(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint256 timestamp\n    );\n\n  function latestRound(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint256 roundId\n    );\n\n  function getAnswer(\n    address base,\n    address quote,\n    uint256 roundId\n  )\n    external\n    view\n    returns (\n      int256 answer\n    );\n\n  function getTimestamp(\n    address base,\n    address quote,\n    uint256 roundId\n  )\n    external\n    view\n    returns (\n      uint256 timestamp\n    );\n\n  // Registry getters\n\n  function getFeed(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      AggregatorV2V3Interface aggregator\n    );\n\n  function getPhaseFeed(\n    address base,\n    address quote,\n    uint16 phaseId\n  )\n    external\n    view\n    returns (\n      AggregatorV2V3Interface aggregator\n    );\n\n  function isFeedEnabled(\n    address aggregator\n  )\n    external\n    view\n    returns (\n      bool\n    );\n\n  function getPhase(\n    address base,\n    address quote,\n    uint16 phaseId\n  )\n    external\n    view\n    returns (\n      Phase memory phase\n    );\n\n  // Round helpers\n\n  function getRoundFeed(\n    address base,\n    address quote,\n    uint80 roundId\n  )\n    external\n    view\n    returns (\n      AggregatorV2V3Interface aggregator\n    );\n\n  function getPhaseRange(\n    address base,\n    address quote,\n    uint16 phaseId\n  )\n    external\n    view\n    returns (\n      uint80 startingRoundId,\n      uint80 endingRoundId\n    );\n\n  function getPreviousRoundId(\n    address base,\n    address quote,\n    uint80 roundId\n  ) external\n    view\n    returns (\n      uint80 previousRoundId\n    );\n\n  function getNextRoundId(\n    address base,\n    address quote,\n    uint80 roundId\n  ) external\n    view\n    returns (\n      uint80 nextRoundId\n    );\n\n  // Feed management\n\n  function proposeFeed(\n    address base,\n    address quote,\n    address aggregator\n  ) external;\n\n  function confirmFeed(\n    address base,\n    address quote,\n    address aggregator\n  ) external;\n\n  // Proposed aggregator\n\n  function getProposedFeed(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      AggregatorV2V3Interface proposedAggregator\n    );\n\n  function proposedGetRoundData(\n    address base,\n    address quote,\n    uint80 roundId\n  )\n    external\n    view\n    returns (\n      uint80 id,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function proposedLatestRoundData(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint80 id,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  // Phases\n  function getCurrentPhaseId(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint16 currentPhaseId\n    );\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AggregatorInterface.sol\";\nimport \"./AggregatorV3Interface.sol\";\n\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\n{\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorInterface {\n  function latestAnswer()\n    external\n    view\n    returns (\n      int256\n    );\n  \n  function latestTimestamp()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  function latestRound()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  function getAnswer(\n    uint256 roundId\n  )\n    external\n    view\n    returns (\n      int256\n    );\n\n  function getTimestamp(\n    uint256 roundId\n  )\n    external\n    view\n    returns (\n      uint256\n    );\n\n  event AnswerUpdated(\n    int256 indexed current,\n    uint256 indexed roundId,\n    uint256 updatedAt\n  );\n\n  event NewRound(\n    uint256 indexed roundId,\n    address indexed startedBy,\n    uint256 startedAt\n  );\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description()\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n"
    },
    "contracts/oracles/ChainlinkOracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport '@chainlink/contracts/src/v0.8/Denominations.sol';\nimport '../interfaces/oracles/IChainlinkOracle.sol';\nimport '../libraries/TokenSorting.sol';\nimport '../utils/Governable.sol';\n\ncontract ChainlinkOracle is Governable, IChainlinkOracle {\n  /// @inheritdoc IChainlinkOracle\n  mapping(address => mapping(address => PricingPlan)) public planForPair;\n  /// @inheritdoc IChainlinkOracle\n  FeedRegistryInterface public immutable registry;\n  /// @inheritdoc IChainlinkOracle\n  // solhint-disable-next-line var-name-mixedcase\n  address public immutable WETH;\n  /// @inheritdoc IChainlinkOracle\n  uint32 public maxDelay;\n\n  // solhint-disable private-vars-leading-underscore\n  // Addresses in Ethereum Mainnet\n  address private constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n  address private constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n  address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n  address private constant RENBTC = 0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D;\n  address private constant WBTC = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\n  int8 private constant USD_DECIMALS = 8;\n  int8 private constant ETH_DECIMALS = 18;\n  // solhint-enable private-vars-leading-underscore\n\n  mapping(address => bool) internal _shouldBeConsideredUSD;\n  mapping(address => address) internal _tokenMappings;\n\n  constructor(\n    // solhint-disable-next-line var-name-mixedcase\n    address _WETH,\n    FeedRegistryInterface _registry,\n    uint32 _maxDelay,\n    address _governor\n  ) Governable(_governor) {\n    if (_WETH == address(0) || address(_registry) == address(0)) revert ZeroAddress();\n    if (_maxDelay == 0) revert ZeroMaxDelay();\n    registry = _registry;\n    maxDelay = _maxDelay;\n    WETH = _WETH;\n  }\n\n  /// @inheritdoc IPriceOracle\n  function canSupportPair(address _tokenA, address _tokenB) external view returns (bool) {\n    (address __tokenA, address __tokenB) = TokenSorting.sortTokens(_tokenA, _tokenB);\n    PricingPlan _plan = _determinePricingPlan(__tokenA, __tokenB);\n    return _plan != PricingPlan.NONE;\n  }\n\n  /// @inheritdoc IPriceOracle\n  function quote(\n    address _tokenIn,\n    uint128 _amountIn,\n    address _tokenOut\n  ) external view returns (uint256 _amountOut) {\n    (address _tokenA, address _tokenB) = TokenSorting.sortTokens(_tokenIn, _tokenOut);\n    PricingPlan _plan = planForPair[_tokenA][_tokenB];\n    if (_plan == PricingPlan.NONE) revert PairNotSupported();\n\n    int8 _inDecimals = _getDecimals(_tokenIn);\n    int8 _outDecimals = _getDecimals(_tokenOut);\n\n    if (_plan <= PricingPlan.TOKEN_ETH_PAIR) {\n      return _getDirectPrice(_tokenIn, _tokenOut, _inDecimals, _outDecimals, _amountIn, _plan);\n    } else if (_plan <= PricingPlan.TOKEN_TO_ETH_TO_TOKEN_PAIR) {\n      return _getPriceSameBase(_tokenIn, _tokenOut, _inDecimals, _outDecimals, _amountIn, _plan);\n    } else {\n      return _getPriceDifferentBases(_tokenIn, _tokenOut, _inDecimals, _outDecimals, _amountIn, _plan);\n    }\n  }\n\n  /// @inheritdoc IPriceOracle\n  function reconfigureSupportForPair(address _tokenA, address _tokenB) external {\n    _addSupportForPair(_tokenA, _tokenB);\n  }\n\n  /// @inheritdoc IPriceOracle\n  function addSupportForPairIfNeeded(address _tokenA, address _tokenB) external {\n    (address __tokenA, address __tokenB) = TokenSorting.sortTokens(_tokenA, _tokenB);\n    if (planForPair[__tokenA][__tokenB] == PricingPlan.NONE) {\n      _addSupportForPair(_tokenA, _tokenB);\n    }\n  }\n\n  function _addSupportForPair(address _tokenA, address _tokenB) internal virtual {\n    (address __tokenA, address __tokenB) = TokenSorting.sortTokens(_tokenA, _tokenB);\n    PricingPlan _plan = _determinePricingPlan(__tokenA, __tokenB);\n    if (_plan == PricingPlan.NONE) revert PairNotSupported();\n    planForPair[__tokenA][__tokenB] = _plan;\n    emit AddedSupportForPairInChainlinkOracle(__tokenA, __tokenB);\n  }\n\n  /// @inheritdoc IChainlinkOracle\n  function addUSDStablecoins(address[] calldata _addresses) external onlyGovernor {\n    for (uint256 i; i < _addresses.length; i++) {\n      _shouldBeConsideredUSD[_addresses[i]] = true;\n    }\n    emit TokensConsideredUSD(_addresses);\n  }\n\n  /// @inheritdoc IChainlinkOracle\n  function addMappings(address[] calldata _addresses, address[] calldata _mappings) external onlyGovernor {\n    if (_addresses.length != _mappings.length) revert InvalidMappingsInput();\n    for (uint256 i; i < _addresses.length; i++) {\n      _tokenMappings[_addresses[i]] = _mappings[i];\n    }\n    emit MappingsAdded(_addresses, _mappings);\n  }\n\n  /// @inheritdoc IChainlinkOracle\n  function setMaxDelay(uint32 _maxDelay) external onlyGovernor {\n    maxDelay = _maxDelay;\n    emit MaxDelaySet(_maxDelay);\n  }\n\n  /// @inheritdoc IChainlinkOracle\n  function mappedToken(address _token) public view returns (address) {\n    if (block.chainid == 1 && (_token == RENBTC || _token == WBTC)) {\n      return Denominations.BTC;\n    } else {\n      address _mapping = _tokenMappings[_token];\n      return _mapping != address(0) ? _mapping : _token;\n    }\n  }\n\n  /** Handles prices when the pair is either ETH/USD, token/ETH or token/USD */\n  function _getDirectPrice(\n    address _tokenIn,\n    address _tokenOut,\n    int8 _inDecimals,\n    int8 _outDecimals,\n    uint256 _amountIn,\n    PricingPlan _plan\n  ) internal view returns (uint256) {\n    uint256 _price;\n    int8 _resultDecimals = _plan == PricingPlan.TOKEN_ETH_PAIR ? ETH_DECIMALS : USD_DECIMALS;\n    bool _needsInverting = _isUSD(_tokenIn) || (_plan == PricingPlan.TOKEN_ETH_PAIR && _tokenIn == WETH);\n\n    if (_plan == PricingPlan.ETH_USD_PAIR) {\n      _price = _getETHUSD();\n    } else if (_plan == PricingPlan.TOKEN_USD_PAIR) {\n      _price = _getPriceAgainstUSD(_isUSD(_tokenOut) ? _tokenIn : _tokenOut);\n    } else if (_plan == PricingPlan.TOKEN_ETH_PAIR) {\n      _price = _getPriceAgainstETH(_tokenOut == WETH ? _tokenIn : _tokenOut);\n    }\n    if (!_needsInverting) {\n      return _adjustDecimals(_price * _amountIn, _outDecimals - _resultDecimals - _inDecimals);\n    } else {\n      return _adjustDecimals(_adjustDecimals(_amountIn, _resultDecimals + _outDecimals) / _price, -_inDecimals);\n    }\n  }\n\n  /** Handles prices when both tokens share the same base (either ETH or USD) */\n  function _getPriceSameBase(\n    address _tokenIn,\n    address _tokenOut,\n    int8 _inDecimals,\n    int8 _outDecimals,\n    uint256 _amountIn,\n    PricingPlan _plan\n  ) internal view returns (uint256) {\n    address _base = _plan == PricingPlan.TOKEN_TO_USD_TO_TOKEN_PAIR ? Denominations.USD : Denominations.ETH;\n    uint256 _tokenInToBase = _callRegistry(mappedToken(_tokenIn), _base);\n    uint256 _tokenOutToBase = _callRegistry(mappedToken(_tokenOut), _base);\n    return _adjustDecimals((_amountIn * _tokenInToBase) / _tokenOutToBase, _outDecimals - _inDecimals);\n  }\n\n  /** Handles prices when one of the tokens uses ETH as the base, and the other USD */\n  function _getPriceDifferentBases(\n    address _tokenIn,\n    address _tokenOut,\n    int8 _inDecimals,\n    int8 _outDecimals,\n    uint256 _amountIn,\n    PricingPlan _plan\n  ) internal view returns (uint256) {\n    bool _isTokenInUSD = (_plan == PricingPlan.TOKEN_A_TO_USD_TO_ETH_TO_TOKEN_B && _tokenIn < _tokenOut) ||\n      (_plan == PricingPlan.TOKEN_A_TO_ETH_TO_USD_TO_TOKEN_B && _tokenIn > _tokenOut);\n    uint256 _ethToUSDPrice = _getETHUSD();\n    if (_isTokenInUSD) {\n      uint256 _tokenInToUSD = _getPriceAgainstUSD(_tokenIn);\n      uint256 _tokenOutToETH = _getPriceAgainstETH(_tokenOut);\n      uint256 _adjustedInUSDValue = _adjustDecimals(_amountIn * _tokenInToUSD, _outDecimals - _inDecimals + ETH_DECIMALS);\n      return _adjustedInUSDValue / _ethToUSDPrice / _tokenOutToETH;\n    } else {\n      uint256 _tokenInToETH = _getPriceAgainstETH(_tokenIn);\n      uint256 _tokenOutToUSD = _getPriceAgainstUSD(_tokenOut);\n      return _adjustDecimals((_amountIn * _tokenInToETH * _ethToUSDPrice) / _tokenOutToUSD, _outDecimals - _inDecimals - ETH_DECIMALS);\n    }\n  }\n\n  function _getPriceAgainstUSD(address _token) internal view returns (uint256) {\n    return _isUSD(_token) ? 1e8 : _callRegistry(mappedToken(_token), Denominations.USD);\n  }\n\n  function _getPriceAgainstETH(address _token) internal view returns (uint256) {\n    return _token == WETH ? 1e18 : _callRegistry(mappedToken(_token), Denominations.ETH);\n  }\n\n  function _determinePricingPlan(address _tokenA, address _tokenB) internal view virtual returns (PricingPlan) {\n    bool _isTokenAUSD = _isUSD(_tokenA);\n    bool _isTokenBUSD = _isUSD(_tokenB);\n    bool _isTokenAETH = _tokenA == WETH;\n    bool _isTokenBETH = _tokenB == WETH;\n    if ((_isTokenAETH && _isTokenBUSD) || (_isTokenAUSD && _isTokenBETH)) {\n      // Note: there are stablecoins/ETH pairs on Chainlink, but they are updated less often than the USD/ETH pair.\n      // That's why we prefer to use the USD/ETH pair instead\n      return PricingPlan.ETH_USD_PAIR;\n    } else if (_isTokenBUSD && !_isTokenAUSD) {\n      return _tryWithBases(_tokenA, PricingPlan.TOKEN_USD_PAIR, PricingPlan.TOKEN_A_TO_ETH_TO_USD_TO_TOKEN_B);\n    } else if (_isTokenAUSD && !_isTokenBUSD) {\n      return _tryWithBases(_tokenB, PricingPlan.TOKEN_USD_PAIR, PricingPlan.TOKEN_A_TO_USD_TO_ETH_TO_TOKEN_B);\n    } else if (_isTokenBETH) {\n      return _tryWithBases(_tokenA, PricingPlan.TOKEN_A_TO_USD_TO_ETH_TO_TOKEN_B, PricingPlan.TOKEN_ETH_PAIR);\n    } else if (_isTokenAETH) {\n      return _tryWithBases(_tokenB, PricingPlan.TOKEN_A_TO_ETH_TO_USD_TO_TOKEN_B, PricingPlan.TOKEN_ETH_PAIR);\n    } else if (_exists(_tokenA, Denominations.USD)) {\n      return _tryWithBases(_tokenB, PricingPlan.TOKEN_TO_USD_TO_TOKEN_PAIR, PricingPlan.TOKEN_A_TO_USD_TO_ETH_TO_TOKEN_B);\n    } else if (_exists(_tokenA, Denominations.ETH)) {\n      return _tryWithBases(_tokenB, PricingPlan.TOKEN_A_TO_ETH_TO_USD_TO_TOKEN_B, PricingPlan.TOKEN_TO_ETH_TO_TOKEN_PAIR);\n    }\n    return PricingPlan.NONE;\n  }\n\n  function _tryWithBases(\n    address _token,\n    PricingPlan _ifUSD,\n    PricingPlan _ifETH\n  ) internal view returns (PricingPlan) {\n    // Note: we are prioritizing plans that have fewer external calls\n    (address _firstBase, PricingPlan _firstResult, address _secondBaseBase, PricingPlan _secondResult) = _ifUSD < _ifETH\n      ? (Denominations.USD, _ifUSD, Denominations.ETH, _ifETH)\n      : (Denominations.ETH, _ifETH, Denominations.USD, _ifUSD);\n    if (_exists(_token, _firstBase)) {\n      return _firstResult;\n    } else if (_exists(_token, _secondBaseBase)) {\n      return _secondResult;\n    } else {\n      return PricingPlan.NONE;\n    }\n  }\n\n  function _exists(address _base, address _quote) internal view returns (bool) {\n    try registry.latestRoundData(mappedToken(_base), _quote) returns (uint80, int256 _price, uint256, uint256, uint80) {\n      return _price > 0;\n    } catch {\n      return false;\n    }\n  }\n\n  function _adjustDecimals(uint256 _amount, int256 _factor) internal pure returns (uint256) {\n    if (_factor < 0) {\n      return _amount / (10**uint256(-_factor));\n    } else {\n      return _amount * (10**uint256(_factor));\n    }\n  }\n\n  function _getDecimals(address _token) internal view returns (int8) {\n    return int8(IERC20Metadata(_token).decimals());\n  }\n\n  function _callRegistry(address _base, address _quote) internal view returns (uint256) {\n    (, int256 _price, , uint256 _updatedAt, ) = registry.latestRoundData(_base, _quote);\n    if (_price <= 0) revert InvalidPrice();\n    if (maxDelay < block.timestamp && _updatedAt < block.timestamp - maxDelay) revert LastUpdateIsTooOld();\n    return uint256(_price);\n  }\n\n  function _getETHUSD() internal view returns (uint256) {\n    return _callRegistry(Denominations.ETH, Denominations.USD);\n  }\n\n  function _isUSD(address _token) internal view returns (bool) {\n    // We are doing this, to avoid expensive storage read\n    bool _isHardcodedUSDInMainnet = block.chainid == 1 && (_token == DAI || _token == USDC || _token == USDT);\n    return _isHardcodedUSDInMainnet || _shouldBeConsideredUSD[_token];\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/Denominations.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary Denominations {\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n  address public constant BTC = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\n\n  // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\n  address public constant USD = address(840);\n  address public constant GBP = address(826);\n  address public constant EUR = address(978);\n  address public constant JPY = address(392);\n  address public constant KRW = address(410);\n  address public constant CNY = address(156);\n  address public constant AUD = address(36);\n  address public constant CAD = address(124);\n  address public constant CHF = address(756);\n  address public constant ARS = address(32);\n  address public constant PHP = address(608);\n  address public constant NZD = address(554);\n  address public constant SGD = address(702);\n  address public constant NGN = address(566);\n  address public constant ZAR = address(710);\n  address public constant RUB = address(643);\n  address public constant INR = address(356);\n  address public constant BRL = address(986);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "contracts/libraries/PermissionMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\nimport '../interfaces/IDCAPermissionManager.sol';\n\n/// @title Permission Math library\n/// @notice Provides functions to easily convert from permissions to an int representation and viceversa\nlibrary PermissionMath {\n  /// @notice Takes a list of permissions and returns the int representation of the set that contains them all\n  /// @param _permissions The list of permissions\n  /// @return _representation The uint representation\n  function toUInt8(IDCAPermissionManager.Permission[] memory _permissions) internal pure returns (uint8 _representation) {\n    for (uint256 i; i < _permissions.length; i++) {\n      _representation |= uint8(1 << uint8(_permissions[i]));\n    }\n  }\n\n  /// @notice Takes an int representation of a set of permissions, and returns whether it contains the given permission\n  /// @param _representation The int representation\n  /// @param _permission The permission to check for\n  /// @return _hasPermission Whether the representation contains the given permission\n  function hasPermission(uint8 _representation, IDCAPermissionManager.Permission _permission) internal pure returns (bool _hasPermission) {\n    uint256 _bitMask = 1 << uint8(_permission);\n    _hasPermission = (_representation & _bitMask) != 0;\n  }\n}\n"
    },
    "contracts/mocks/libraries/PermissionMath.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.7 <0.9.0;\n\nimport '../../libraries/PermissionMath.sol';\n\ncontract PermissionMathMock {\n  function toUInt8(IDCAPermissionManager.Permission[] memory _permissions) external pure returns (uint8 _representation) {\n    return PermissionMath.toUInt8(_permissions);\n  }\n\n  function hasPermission(uint8 _representation, IDCAPermissionManager.Permission _permission) external pure returns (bool _hasPermission) {\n    return PermissionMath.hasPermission(_representation, _permission);\n  }\n}\n"
    },
    "contracts/DCAPermissionsManager/DCAPermissionsManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\nimport '@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol';\nimport '../interfaces/IDCAHub.sol';\nimport '../interfaces/IDCATokenDescriptor.sol';\nimport '../interfaces/IDCAPermissionManager.sol';\nimport '../libraries/PermissionMath.sol';\nimport '../utils/Governable.sol';\n\n// Note: ideally, this would be part of the DCAHub. However, since we've reached the max bytecode size, we needed to make it its own contract\ncontract DCAPermissionsManager is ERC721, EIP712, Governable, IDCAPermissionManager {\n  struct TokenPermission {\n    // The actual permissions\n    uint8 permissions;\n    // The block number when it was last updated\n    uint248 lastUpdated;\n  }\n\n  using PermissionMath for Permission[];\n  using PermissionMath for uint8;\n\n  /// @inheritdoc IDCAPermissionManager\n  bytes32 public constant PERMIT_TYPEHASH = keccak256('Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)');\n  /// @inheritdoc IDCAPermissionManager\n  bytes32 public constant PERMISSION_PERMIT_TYPEHASH =\n    keccak256(\n      'PermissionPermit(PermissionSet[] permissions,uint256 tokenId,uint256 nonce,uint256 deadline)PermissionSet(address operator,uint8[] permissions)'\n    );\n  /// @inheritdoc IDCAPermissionManager\n  bytes32 public constant PERMISSION_SET_TYPEHASH = keccak256('PermissionSet(address operator,uint8[] permissions)');\n  /// @inheritdoc IDCAPermissionManager\n  IDCATokenDescriptor public nftDescriptor;\n  /// @inheritdoc IDCAPermissionManager\n  address public hub;\n  /// @inheritdoc IDCAPermissionManager\n  mapping(address => uint256) public nonces;\n  mapping(uint256 => uint256) public lastOwnershipChange;\n  mapping(uint256 => mapping(address => TokenPermission)) public tokenPermissions;\n  uint256 internal _burnCounter;\n\n  constructor(address _governor, IDCATokenDescriptor _descriptor)\n    ERC721('Mean Finance - DCA Position', 'MF-DCA-P')\n    EIP712('Mean Finance - DCA Position', '1')\n    Governable(_governor)\n  {\n    if (address(_descriptor) == address(0)) revert ZeroAddress();\n    nftDescriptor = _descriptor;\n  }\n\n  /// @inheritdoc IDCAPermissionManager\n  function setHub(address _hub) external {\n    if (_hub == address(0)) revert ZeroAddress();\n    if (hub != address(0)) revert HubAlreadySet();\n    hub = _hub;\n  }\n\n  /// @inheritdoc IDCAPermissionManager\n  function mint(\n    uint256 _id,\n    address _owner,\n    PermissionSet[] calldata _permissions\n  ) external {\n    if (msg.sender != hub) revert OnlyHubCanExecute();\n    _mint(_owner, _id);\n    _setPermissions(_id, _permissions);\n  }\n\n  /// @inheritdoc IDCAPermissionManager\n  function hasPermission(\n    uint256 _id,\n    address _address,\n    Permission _permission\n  ) external view returns (bool) {\n    if (ownerOf(_id) == _address) {\n      return true;\n    }\n    TokenPermission memory _tokenPermission = tokenPermissions[_id][_address];\n    // If there was an ownership change after the permission was last updated, then the address doesn't have the permission\n    return _tokenPermission.permissions.hasPermission(_permission) && lastOwnershipChange[_id] < _tokenPermission.lastUpdated;\n  }\n\n  /// @inheritdoc IDCAPermissionManager\n  function hasPermissions(\n    uint256 _id,\n    address _address,\n    Permission[] calldata _permissions\n  ) external view returns (bool[] memory _hasPermissions) {\n    _hasPermissions = new bool[](_permissions.length);\n    if (ownerOf(_id) == _address) {\n      // If the address is the owner, then they have all permissions\n      for (uint256 i; i < _permissions.length; i++) {\n        _hasPermissions[i] = true;\n      }\n    } else {\n      // If it's not the owner, then check one by one\n      TokenPermission memory _tokenPermission = tokenPermissions[_id][_address];\n      if (lastOwnershipChange[_id] < _tokenPermission.lastUpdated) {\n        for (uint256 i; i < _permissions.length; i++) {\n          if (_tokenPermission.permissions.hasPermission(_permissions[i])) {\n            _hasPermissions[i] = true;\n          }\n        }\n      }\n    }\n  }\n\n  /// @inheritdoc IDCAPermissionManager\n  function burn(uint256 _id) external {\n    if (msg.sender != hub) revert OnlyHubCanExecute();\n    _burn(_id);\n    ++_burnCounter;\n  }\n\n  /// @inheritdoc IDCAPermissionManager\n  function modify(uint256 _id, PermissionSet[] calldata _permissions) external {\n    if (msg.sender != ownerOf(_id)) revert NotOwner();\n    _modify(_id, _permissions);\n  }\n\n  /// @inheritdoc IDCAPermissionManager\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32) {\n    return _domainSeparatorV4();\n  }\n\n  /// @inheritdoc IERC721BasicEnumerable\n  function totalSupply() external view returns (uint256) {\n    return IDCAHubPositionHandler(hub).totalCreatedPositions() - _burnCounter;\n  }\n\n  /// @inheritdoc IDCAPermissionManager\n  function permit(\n    address _spender,\n    uint256 _tokenId,\n    uint256 _deadline,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) external {\n    if (block.timestamp > _deadline) revert ExpiredDeadline();\n\n    address _owner = ownerOf(_tokenId);\n    bytes32 _structHash = keccak256(abi.encode(PERMIT_TYPEHASH, _spender, _tokenId, nonces[_owner]++, _deadline));\n    bytes32 _hash = _hashTypedDataV4(_structHash);\n\n    address _signer = ECDSA.recover(_hash, _v, _r, _s);\n    if (_signer != _owner) revert InvalidSignature();\n\n    _approve(_spender, _tokenId);\n  }\n\n  /// @inheritdoc IDCAPermissionManager\n  function permissionPermit(\n    PermissionSet[] calldata _permissions,\n    uint256 _tokenId,\n    uint256 _deadline,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) external {\n    if (block.timestamp > _deadline) revert ExpiredDeadline();\n\n    address _owner = ownerOf(_tokenId);\n    bytes32 _structHash = keccak256(\n      abi.encode(PERMISSION_PERMIT_TYPEHASH, keccak256(_encode(_permissions)), _tokenId, nonces[_owner]++, _deadline)\n    );\n    bytes32 _hash = _hashTypedDataV4(_structHash);\n\n    address _signer = ECDSA.recover(_hash, _v, _r, _s);\n    if (_signer != _owner) revert InvalidSignature();\n\n    _modify(_tokenId, _permissions);\n  }\n\n  /// @inheritdoc IDCAPermissionManager\n  function setNFTDescriptor(IDCATokenDescriptor _descriptor) external onlyGovernor {\n    if (address(_descriptor) == address(0)) revert ZeroAddress();\n    nftDescriptor = _descriptor;\n    emit NFTDescriptorSet(_descriptor);\n  }\n\n  /// @inheritdoc ERC721\n  function tokenURI(uint256 _tokenId) public view override returns (string memory) {\n    return nftDescriptor.tokenURI(hub, _tokenId);\n  }\n\n  function _encode(PermissionSet[] calldata _permissions) internal pure returns (bytes memory _result) {\n    for (uint256 i; i < _permissions.length; i++) {\n      _result = bytes.concat(_result, keccak256(_encode(_permissions[i])));\n    }\n  }\n\n  function _encode(PermissionSet calldata _permission) internal pure returns (bytes memory _result) {\n    _result = abi.encode(PERMISSION_SET_TYPEHASH, _permission.operator, keccak256(_encode(_permission.permissions)));\n  }\n\n  function _encode(Permission[] calldata _permissions) internal pure returns (bytes memory _result) {\n    _result = new bytes(_permissions.length * 32);\n    for (uint256 i; i < _permissions.length; i++) {\n      _result[(i + 1) * 32 - 1] = bytes1(uint8(_permissions[i]));\n    }\n  }\n\n  function _modify(uint256 _id, PermissionSet[] calldata _permissions) internal {\n    _setPermissions(_id, _permissions);\n    emit Modified(_id, _permissions);\n  }\n\n  function _setPermissions(uint256 _id, PermissionSet[] calldata _permissions) internal {\n    uint248 _blockNumber = uint248(_getBlockNumber());\n    for (uint256 i; i < _permissions.length; i++) {\n      if (_permissions[i].permissions.length == 0) {\n        delete tokenPermissions[_id][_permissions[i].operator];\n      } else {\n        tokenPermissions[_id][_permissions[i].operator] = TokenPermission({\n          permissions: _permissions[i].permissions.toUInt8(),\n          lastUpdated: _blockNumber\n        });\n      }\n    }\n  }\n\n  function _beforeTokenTransfer(\n    address _from,\n    address _to,\n    uint256 _id\n  ) internal override {\n    if (_to == address(0)) {\n      // When token is being burned, we can delete this entry on the mapping\n      delete lastOwnershipChange[_id];\n    } else if (_from != address(0)) {\n      // If the token is being minted, then no need to write this\n      lastOwnershipChange[_id] = _getBlockNumber();\n    }\n  }\n\n  // Note: virtual so that it can be overriden in tests\n  function _getBlockNumber() internal view virtual returns (uint256) {\n    return block.number;\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/mocks/DCAPermissionsManager/DCAPermissionsManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.8.7 <0.9.0;\n\nimport '../../DCAPermissionsManager/DCAPermissionsManager.sol';\n\ncontract DCAPermissionsManagerMock is DCAPermissionsManager {\n  uint256 private _blockNumber;\n\n  constructor(address _governor, IDCATokenDescriptor _descriptor) DCAPermissionsManager(_governor, _descriptor) {}\n\n  function setBlockNumber(uint256 __blockNumber) external {\n    _blockNumber = __blockNumber;\n  }\n\n  function burnCounter() external view returns (uint256) {\n    return _burnCounter;\n  }\n\n  function _getBlockNumber() internal view override returns (uint256) {\n    if (_blockNumber > 0) {\n      return _blockNumber;\n    } else {\n      return super._getBlockNumber();\n    }\n  }\n}\n"
    },
    "contracts/libraries/NFTDescriptor.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.0;\npragma abicoder v2;\n\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport 'base64-sol/base64.sol';\nimport './NFTSVG.sol';\n\n// Based on Uniswap's NFTDescriptor\nlibrary NFTDescriptor {\n  using Strings for uint256;\n  using Strings for uint32;\n\n  struct ConstructTokenURIParams {\n    uint256 tokenId;\n    address fromToken;\n    address toToken;\n    uint8 fromDecimals;\n    uint8 toDecimals;\n    string fromSymbol;\n    string toSymbol;\n    string swapInterval;\n    uint32 swapsExecuted;\n    uint32 swapsLeft;\n    uint256 swapped;\n    uint256 remaining;\n    uint160 rate;\n  }\n\n  function constructTokenURI(ConstructTokenURIParams memory _params) internal pure returns (string memory) {\n    string memory _name = _generateName(_params);\n\n    string memory _description = _generateDescription(\n      _params.fromSymbol,\n      _params.toSymbol,\n      addressToString(_params.fromToken),\n      addressToString(_params.toToken),\n      _params.swapInterval,\n      _params.tokenId\n    );\n\n    string memory _image = Base64.encode(bytes(_generateSVGImage(_params)));\n\n    return\n      string(\n        abi.encodePacked(\n          'data:application/json;base64,',\n          Base64.encode(\n            bytes(\n              abi.encodePacked('{\"name\":\"', _name, '\", \"description\":\"', _description, '\", \"image\": \"data:image/svg+xml;base64,', _image, '\"}')\n            )\n          )\n        )\n      );\n  }\n\n  function _generateDescription(\n    string memory _fromSymbol,\n    string memory _toSymbol,\n    string memory _fromAddress,\n    string memory _toAddress,\n    string memory _interval,\n    uint256 _tokenId\n  ) private pure returns (string memory) {\n    string memory _part1 = string(\n      abi.encodePacked(\n        'This NFT represents a DCA position in Mean Finance, where ',\n        _fromSymbol,\n        ' will be swapped for ',\n        _toSymbol,\n        '. The owner of this NFT can modify or redeem the position.\\\\n\\\\n',\n        _fromSymbol\n      )\n    );\n    string memory _part2 = string(\n      abi.encodePacked(\n        ' Address: ',\n        _fromAddress,\n        '\\\\n',\n        _toSymbol,\n        ' Address: ',\n        _toAddress,\n        '\\\\nSwap interval: ',\n        _interval,\n        '\\\\nToken ID: ',\n        _tokenId.toString(),\n        '\\\\n\\\\n',\n        unicode'⚠️ DISCLAIMER: Due diligence is imperative when assessing this NFT. Make sure token addresses match the expected tokens, as token symbols may be imitated.'\n      )\n    );\n    return string(abi.encodePacked(_part1, _part2));\n  }\n\n  function _generateName(ConstructTokenURIParams memory _params) private pure returns (string memory) {\n    return string(abi.encodePacked('Mean Finance DCA - ', _params.swapInterval, ' - ', _params.fromSymbol, unicode' ➔ ', _params.toSymbol));\n  }\n\n  struct DecimalStringParams {\n    // significant figures of decimal\n    uint256 sigfigs;\n    // length of decimal string\n    uint8 bufferLength;\n    // ending index for significant figures (funtion works backwards when copying sigfigs)\n    uint8 sigfigIndex;\n    // index of decimal place (0 if no decimal)\n    uint8 decimalIndex;\n    // start index for trailing/leading 0's for very small/large numbers\n    uint8 zerosStartIndex;\n    // end index for trailing/leading 0's for very small/large numbers\n    uint8 zerosEndIndex;\n    // true if decimal number is less than one\n    bool isLessThanOne;\n  }\n\n  function _generateDecimalString(DecimalStringParams memory params) private pure returns (string memory) {\n    bytes memory buffer = new bytes(params.bufferLength);\n    if (params.isLessThanOne) {\n      buffer[0] = '0';\n      buffer[1] = '.';\n    }\n\n    // add leading/trailing 0's\n    for (uint256 zerosCursor = params.zerosStartIndex; zerosCursor < params.zerosEndIndex + 1; zerosCursor++) {\n      buffer[zerosCursor] = bytes1(uint8(48));\n    }\n    // add sigfigs\n    while (params.sigfigs > 0) {\n      if (params.decimalIndex > 0 && params.sigfigIndex == params.decimalIndex) {\n        buffer[params.sigfigIndex--] = '.';\n      }\n      uint8 charIndex = uint8(48 + (params.sigfigs % 10));\n      buffer[params.sigfigIndex] = bytes1(charIndex);\n      params.sigfigs /= 10;\n      if (params.sigfigs > 0) {\n        params.sigfigIndex--;\n      }\n    }\n    return string(buffer);\n  }\n\n  function _sigfigsRounded(uint256 value, uint8 digits) private pure returns (uint256, bool) {\n    bool extraDigit;\n    if (digits > 5) {\n      value = value / (10**(digits - 5));\n    }\n    bool roundUp = value % 10 > 4;\n    value = value / 10;\n    if (roundUp) {\n      value = value + 1;\n    }\n    // 99999 -> 100000 gives an extra sigfig\n    if (value == 100000) {\n      value /= 10;\n      extraDigit = true;\n    }\n    return (value, extraDigit);\n  }\n\n  function fixedPointToDecimalString(uint256 value, uint8 decimals) internal pure returns (string memory) {\n    if (value == 0) {\n      return '0.0000';\n    }\n\n    bool priceBelow1 = value < 10**decimals;\n\n    // get digit count\n    uint256 temp = value;\n    uint8 digits;\n    while (temp != 0) {\n      digits++;\n      temp /= 10;\n    }\n    // don't count extra digit kept for rounding\n    digits = digits - 1;\n\n    // address rounding\n    (uint256 sigfigs, bool extraDigit) = _sigfigsRounded(value, digits);\n    if (extraDigit) {\n      digits++;\n    }\n\n    DecimalStringParams memory params;\n    if (priceBelow1) {\n      // 7 bytes ( \"0.\" and 5 sigfigs) + leading 0's bytes\n      params.bufferLength = digits >= 5 ? decimals - digits + 6 : decimals + 2;\n      params.zerosStartIndex = 2;\n      params.zerosEndIndex = decimals - digits + 1;\n      params.sigfigIndex = params.bufferLength - 1;\n    } else if (digits >= decimals + 4) {\n      // no decimal in price string\n      params.bufferLength = digits - decimals + 1;\n      params.zerosStartIndex = 5;\n      params.zerosEndIndex = params.bufferLength - 1;\n      params.sigfigIndex = 4;\n    } else {\n      // 5 sigfigs surround decimal\n      params.bufferLength = 6;\n      params.sigfigIndex = 5;\n      params.decimalIndex = digits - decimals + 1;\n    }\n    params.sigfigs = sigfigs;\n    params.isLessThanOne = priceBelow1;\n\n    return _generateDecimalString(params);\n  }\n\n  function addressToString(address _addr) internal pure returns (string memory) {\n    bytes memory s = new bytes(40);\n    for (uint256 i = 0; i < 20; i++) {\n      bytes1 b = bytes1(uint8(uint256(uint160(_addr)) / (2**(8 * (19 - i)))));\n      bytes1 hi = bytes1(uint8(b) / 16);\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\n      s[2 * i] = _char(hi);\n      s[2 * i + 1] = _char(lo);\n    }\n    return string(abi.encodePacked('0x', string(s)));\n  }\n\n  function _char(bytes1 b) private pure returns (bytes1 c) {\n    if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\n    else return bytes1(uint8(b) + 0x57);\n  }\n\n  function _generateSVGImage(ConstructTokenURIParams memory _params) private pure returns (string memory svg) {\n    string memory _fromSymbol = _params.fromSymbol;\n    string memory _toSymbol = _params.toSymbol;\n    NFTSVG.SVGParams memory _svgParams = NFTSVG.SVGParams({\n      tokenId: _params.tokenId,\n      fromToken: addressToString(_params.fromToken),\n      toToken: addressToString(_params.toToken),\n      fromSymbol: _fromSymbol,\n      toSymbol: _toSymbol,\n      interval: _params.swapInterval,\n      swapsExecuted: _params.swapsExecuted,\n      swapsLeft: _params.swapsLeft,\n      swapped: string(abi.encodePacked(fixedPointToDecimalString(_params.swapped, _params.toDecimals), ' ', _toSymbol)),\n      averagePrice: string(\n        abi.encodePacked(\n          fixedPointToDecimalString(_params.swapsExecuted > 0 ? _params.swapped / _params.swapsExecuted : 0, _params.toDecimals),\n          ' ',\n          _toSymbol\n        )\n      ),\n      remaining: string(abi.encodePacked(fixedPointToDecimalString(_params.remaining, _params.fromDecimals), ' ', _fromSymbol)),\n      rate: string(abi.encodePacked(fixedPointToDecimalString(_params.rate, _params.fromDecimals), ' ', _fromSymbol))\n    });\n\n    return NFTSVG.generateSVG(_svgParams);\n  }\n}\n"
    },
    "base64-sol/base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides a function for encoding some bytes in base64\nlibrary Base64 {\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n        \n        // load the table into memory\n        string memory table = TABLE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n            \n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n            \n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n            \n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n            \n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               dataPtr := add(dataPtr, 3)\n               \n               // read 3 bytes\n               let input := mload(dataPtr)\n               \n               // write 4 characters\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\n               resultPtr := add(resultPtr, 1)\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\n               resultPtr := add(resultPtr, 1)\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\n               resultPtr := add(resultPtr, 1)\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\n               resultPtr := add(resultPtr, 1)\n            }\n            \n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n        \n        return result;\n    }\n}\n"
    },
    "contracts/libraries/NFTSVG.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/utils/Strings.sol';\n\n/// @title NFTSVG\n/// @notice Provides a function for generating an SVG associated with a DCA NFT. Based on Uniswap's NFTDescriptor\nlibrary NFTSVG {\n  using Strings for uint256;\n  using Strings for uint32;\n\n  struct SVGParams {\n    string fromToken;\n    string toToken;\n    string fromSymbol;\n    string toSymbol;\n    string interval;\n    uint32 swapsExecuted;\n    uint32 swapsLeft;\n    uint256 tokenId;\n    string swapped;\n    string averagePrice;\n    string remaining;\n    string rate;\n  }\n\n  function generateSVG(SVGParams memory params) internal pure returns (string memory svg) {\n    uint32 _percentage = (params.swapsExecuted + params.swapsLeft) > 0\n      ? (params.swapsExecuted * 100) / (params.swapsExecuted + params.swapsLeft)\n      : 100;\n    return\n      string(\n        abi.encodePacked(\n          '<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 580.71 1118.71\" >',\n          _generateStyleDefs(_percentage),\n          _generateSVGDefs(),\n          _generateSVGBackground(),\n          _generateSVGCardMantle(params.fromSymbol, params.toSymbol, params.interval),\n          _generateSVGPositionData(params.tokenId, params.swapped, params.averagePrice, params.remaining, params.rate),\n          _generateSVGBorderText(params.fromToken, params.toToken, params.fromSymbol, params.toSymbol),\n          _generateSVGLinesAndMainLogo(_percentage),\n          _generageSVGProgressArea(params.swapsExecuted, params.swapsLeft),\n          '</svg>'\n        )\n      );\n  }\n\n  function _generateStyleDefs(uint32 _percentage) private pure returns (string memory svg) {\n    svg = string(\n      abi.encodePacked(\n        '<style type=\"text/css\">.st0{fill:url(#SVGID_1)}.st1{fill:none;stroke:#fff;stroke-miterlimit:10}.st2{opacity:.5}.st3{fill:none;stroke:#b5baba;stroke-miterlimit:10}.st36{fill:#fff}.st37{fill:#48a7de}.st38{font-family:\"Verdana\"}.st39{font-size:60px}.st40{letter-spacing:-4}.st44{font-size:25px}.st46{fill:#c6c6c6}.st47{font-size:18px}.st48{font-size:19.7266px}.st49{font-family:\"Verdana\";font-weight:bold}.st50{font-size:38px}.st52{stroke:#848484;mix-blend-mode:multiply}.st55{opacity:.2;fill:#fff}.st57{fill:#48a7de;stroke:#fff;stroke-width:2.8347;stroke-miterlimit:10}.st58{font-size:18px}.cls-79{stroke:#d1dbe0;transform:rotate(-90deg);transform-origin:290.35px 488.04px;animation:dash 2s linear alternate forwards}@keyframes dash{from{stroke-dashoffset:750.84}to{stroke-dashoffset:',\n        (((100 - _percentage) * 75084) / 10000).toString(),\n        ';}}</style>'\n      )\n    );\n  }\n\n  function _generateSVGDefs() private pure returns (string memory svg) {\n    svg = '<defs><path id=\"SVGID_0\" class=\"st2\" d=\"M580.71 1042.17c0 42.09-34.44 76.54-76.54 76.54H76.54c-42.09 0-76.54-34.44-76.54-76.54V76.54C0 34.44 34.44 0 76.54 0h427.64c42.09 0 76.54 34.44 76.54 76.54v965.63z\"/><path id=\"text-path-a\" d=\"M81.54 1095.995a57.405 57.405 0 0 1-57.405-57.405V81.54A57.405 57.405 0 0 1 81.54 24.135h417.64a57.405 57.405 0 0 1 57.405 57.405v955.64a57.405 57.405 0 0 1-57.405 57.405z\"/><path id=\"text-path-executed\" d=\"M290.35 348.77a139.5 139.5 0 1 1 0 279 139.5 139.5 0 1 1 0-279\"/><path id=\"text-path-left\" d=\"M290.35 348.77a-139.5-139.5 0 1 0 0 279 139.5 139.5 0 1 0 0-279\"/><radialGradient id=\"SVGID_3\" cx=\"334.831\" cy=\"592.878\" r=\"428.274\" fx=\"535.494\" fy=\"782.485\" gradientUnits=\"userSpaceOnUse\"><stop offset=\"0\"/><stop offset=\".11\" stop-color=\"#0d1f29\"/><stop offset=\".28\" stop-color=\"#1f4860\"/><stop offset=\".45\" stop-color=\"#2e6a8d\"/><stop offset=\".61\" stop-color=\"#3985b0\"/><stop offset=\".76\" stop-color=\"#4198c9\"/><stop offset=\".89\" stop-color=\"#46a3d9\"/><stop offset=\"1\" stop-color=\"#48a7de\"/>&gt;</radialGradient><linearGradient id=\"SVGID_1\" gradientUnits=\"userSpaceOnUse\" x1=\"290.353\" y1=\"0\" x2=\"290.353\" y2=\"1118.706\"><stop offset=\"0\" stop-color=\"#48a7de\"/><stop offset=\".105\" stop-color=\"#3e81a6\"/><stop offset=\".292\" stop-color=\"#2e4e5d\"/><stop offset=\".47\" stop-color=\"#1f2c30\"/><stop offset=\".635\" stop-color=\"#121612\"/><stop offset=\".783\" stop-color=\"#060600\"/><stop offset=\".91\" stop-color=\"#010100\"/><stop offset=\"1\"/></linearGradient><clipPath id=\"SVGID_2\"><use xlink:href=\"#SVGID_0\" overflow=\"visible\"/></clipPath></defs>';\n  }\n\n  function _generateSVGBackground() private pure returns (string memory svg) {\n    svg = '<path d=\"M580.71 1042.17c0 42.09-34.44 76.54-76.54 76.54H76.54c-42.09 0-76.54-34.44-76.54-76.54V76.54C0 34.44 34.44 0 76.54 0h427.64c42.09 0 76.54 34.44 76.54 76.54v965.63z\" fill=\"url(#SVGID_1)\"/><path d=\"M76.54 1081.86c-21.88 0-39.68-17.8-39.68-39.68V76.54c0-21.88 17.8-39.69 39.68-39.69h427.64c21.88 0 39.68 17.8 39.68 39.69v965.64c0 21.88-17.8 39.68-39.68 39.68H76.54z\" fill=\"none\" stroke=\"#fff\" stroke-miterlimit=\"10\"/><g id=\"XMLID_29_\" clip-path=\"url(#SVGID_2)\" opacity=\".5\"><path id=\"XMLID_00000106106944977730228320000011315049117735843764_\" class=\"st3\" d=\"M-456.81 863.18S-230.72 1042 20.73 930.95s273.19-602.02 470.65-689.23 307.97 123.01 756.32-75.01\" stroke-width=\".14\"/><path class=\"st3\" d=\"M-458.59 859.15s220.19 166.13 470.94 55.39 280.67-577.29 480.99-665.76 302.72 97.74 747.09-98.53\" stroke-width=\".172\"/><path class=\"st3\" d=\"M-460.37 855.13s214.29 153.44 464.34 43.01 288.14-552.56 491.33-642.3 297.46 72.46 737.86-122.05\" stroke-width=\".204\"/><path class=\"st3\" d=\"M-462.15 851.1s208.38 140.76 457.74 30.62S291.21 353.91 497.27 262.9s292.2 47.19 728.63-145.56\" stroke-width=\".235\"/><path class=\"st3\" d=\"M-463.92 847.08s202.48 128.07 451.15 18.24 303.09-503.08 512.01-595.35 286.95 21.91 719.4-169.08\" stroke-width=\".267\"/><path class=\"st3\" d=\"M-465.7 843.05s196.58 115.38 444.55 5.86S289.41 370.57 501.2 277.03s281.69-3.36 710.16-192.6\" stroke-width=\".299\"/><path class=\"st3\" d=\"M-467.48 839.02s190.67 102.69 437.95-6.52 318.04-453.6 532.69-548.4 276.43-28.64 700.93-216.12\" stroke-width=\".33\"/><path class=\"st3\" d=\"M-469.26 835s184.77 90 431.35-18.9S287.6 387.23 505.12 291.16s271.18-53.91 691.7-239.64\" stroke-width=\".362\"/><path class=\"st3\" d=\"M-471.03 830.97s178.87 77.32 424.75-31.28S286.7 395.56 507.09 298.23s265.92-79.19 682.47-263.16\" stroke-width=\".394\"/><path class=\"st3\" d=\"M-472.81 826.95s172.97 64.63 418.16-43.66 340.45-379.4 563.7-478 260.66-104.46 673.24-286.68\" stroke-width=\".425\"/><path class=\"st3\" d=\"M-474.59 822.92s167.06 51.94 411.56-56.04S284.9 412.22 511.02 312.36s255.41-129.74 664.01-310.2\" stroke-width=\".457\"/><path class=\"st3\" d=\"M-476.37 818.9s161.16 39.25 404.96-68.42S284 420.55 512.98 319.42 763.13 164.41 1167.76-14.3\" stroke-width=\".489\"/><path class=\"st3\" d=\"M-478.15 814.87s155.26 26.57 398.36-80.8 362.88-305.18 594.73-407.58 244.9-180.29 645.55-357.24\" stroke-width=\".52\"/><path class=\"st3\" d=\"M-479.92 810.85s149.35 13.88 391.77-93.19S282.2 437.21 516.92 333.55s239.64-205.56 636.31-380.76\" stroke-width=\".552\"/><path class=\"st3\" d=\"M-481.7 806.82s143.45 1.19 385.17-105.57 377.82-255.71 615.41-360.64 234.38-230.84 627.08-404.27\" stroke-width=\".584\"/><path class=\"st3\" d=\"M-483.48 802.8s137.55-11.5 378.57-117.95 385.3-230.97 625.75-337.17S749.96 91.57 1138.69-80.11\" stroke-width=\".616\"/><path class=\"st3\" d=\"M-485.26 798.77s131.64-24.19 371.97-130.33C127.04 562.3 279.49 462.21 522.8 354.74S746.67 73.36 1131.42-96.57\" stroke-width=\".647\"/><path class=\"st3\" d=\"M-487.04 794.74s125.74-36.87 365.37-142.71 400.24-181.5 646.43-290.23 218.61-306.66 599.39-474.83\" stroke-width=\".679\"/><path class=\"st3\" d=\"M-488.81 790.72s119.84-49.56 358.78-155.09 407.72-156.76 656.76-266.76 213.35-331.93 590.16-498.35\" stroke-width=\".711\"/><path class=\"st3\" d=\"M-490.59 786.69s113.93-62.25 352.18-167.47C99.83 514 276.78 487.2 528.69 375.94s208.1-357.21 580.92-521.87\" stroke-width=\".742\"/><path class=\"st3\" d=\"M-492.37 782.67s108.03-74.94 345.58-179.85S275.88 495.53 530.66 383 733.5.52 1102.35-162.39\" stroke-width=\".774\"/><path class=\"st3\" d=\"M-494.15 778.64s102.13-87.62 338.98-192.23 430.14-82.55 687.78-196.34S730.2-17.69 1095.08-178.84\" stroke-width=\".806\"/><path class=\"st3\" d=\"M-495.92 774.62s96.23-100.31 332.39-204.61 437.61-57.81 698.12-172.87S726.91-35.9 1087.82-195.3\" stroke-width=\".837\"/><path class=\"st3\" d=\"M-497.7 770.59s90.32-113 325.79-217 445.08-33.08 708.46-149.4 187.07-458.31 544-615.95\" stroke-width=\".869\"/><path class=\"st3\" d=\"M-499.48 766.57s84.42-125.69 319.19-229.38 452.56-8.34 718.8-125.93 181.81-483.58 534.77-639.47\" stroke-width=\".901\"/><path class=\"st3\" d=\"M-501.26 762.54s78.52-138.38 312.59-241.76 460.03 16.4 729.14-102.46 176.56-508.86 525.54-662.99\" stroke-width=\".932\"/><path class=\"st3\" d=\"M-503.04 758.52s72.61-151.06 306-254.14 467.5 41.13 739.48-78.99 171.3-534.13 516.3-686.51\" stroke-width=\".964\"/><path class=\"st3\" d=\"M-504.81 754.49s66.71-163.75 299.4-266.52 474.98 65.87 749.82-55.52 166.04-559.41 507.07-710.02\" stroke-width=\".996\"/><path class=\"st3\" d=\"M-506.59 750.47s60.81-176.44 292.8-278.9 482.45 90.61 760.16-32.05 160.79-584.68 497.84-733.54\" stroke-width=\"1.028\"/><path class=\"st3\" d=\"M-508.37 746.44s54.9-189.13 286.2-291.28 489.92 115.34 770.5-8.57 155.53-609.95 488.61-757.06\" stroke-width=\"1.059\"/><path class=\"st3\" d=\"M-510.15 742.41s49-201.82 279.6-303.66c230.6-101.85 497.4 140.08 780.84 14.9s150.27-635.23 479.38-780.58\" stroke-width=\"1.091\"/><path class=\"st3\" d=\"M-511.92 738.39s43.1-214.5 273.01-316.04c229.9-101.55 504.86 164.81 791.17 38.36s145.02-660.5 470.15-804.1\" stroke-width=\"1.123\"/></g><path class=\"st36\" d=\"M506.55 691.2h-7.09v-1.62h.9c-.73-.41-1.11-1.3-1.11-2.1 0-.93.42-1.75 1.25-2.13-.93-.55-1.25-1.38-1.25-2.3 0-1.28.82-2.5 2.69-2.5h4.6v1.63h-4.32c-.83 0-1.46.42-1.46 1.37 0 .89.7 1.47 1.57 1.47h4.21v1.66h-4.32c-.82 0-1.46.41-1.46 1.37 0 .9.67 1.47 1.57 1.47h4.21v1.68zM504.53 672.8c1.24.38 2.24 1.5 2.24 3.2 0 1.92-1.4 3.63-3.8 3.63-2.24 0-3.73-1.66-3.73-3.45 0-2.18 1.44-3.47 3.68-3.47.28 0 .51.03.54.04v5.18c1.08-.04 1.85-.89 1.85-1.94 0-1.02-.54-1.54-1.24-1.78l.46-1.41zm-2.3 1.62c-.83.03-1.57.58-1.57 1.75 0 1.06.82 1.67 1.57 1.73v-3.48zM502.49 669.98l-.28-1.82c-.06-.41-.26-.52-.51-.52-.6 0-1.08.41-1.08 1.34 0 .89.57 1.38 1.28 1.46l-.35 1.54c-1.22-.13-2.32-1.24-2.32-2.99 0-2.18 1.24-3.01 2.65-3.01h3.52c.64 0 1.06-.07 1.14-.09v1.57c-.04.01-.33.07-.9.07.54.34 1.12 1.03 1.12 2.18 0 1.49-1.02 2.4-2.14 2.4-1.26.01-1.95-.92-2.13-2.13zm1.12-2.35h-.32l.28 1.85c.09.52.38.95.96.95.48 0 .92-.36.92-1.03 0-.95-.46-1.77-1.84-1.77zM506.55 662.83v1.69h-7.09v-1.65h.95c-.82-.47-1.15-1.31-1.15-2.1 0-1.73 1.25-2.56 2.81-2.56h4.48v1.69h-4.19c-.87 0-1.57.39-1.57 1.46 0 .96.74 1.47 1.67 1.47h4.09zM496.08 652.99h1.44c-.03.1-.07.29-.07.61 0 .44.2 1.05 1.08 1.05h.93v-4.72h7.09v1.66h-5.62v3.06h5.62v1.7h-5.62v1.24h-1.47v-1.24h-.98c-1.59 0-2.55-1.02-2.55-2.48.01-.42.1-.77.15-.88zm-.23-2.23c0-.61.5-1.11 1.11-1.11.6 0 1.09.5 1.09 1.11 0 .61-.5 1.09-1.09 1.09-.61 0-1.11-.48-1.11-1.09zM506.55 646.63v1.69h-7.09v-1.65h.95c-.82-.47-1.15-1.31-1.15-2.1 0-1.73 1.25-2.56 2.81-2.56h4.48v1.69h-4.19c-.87 0-1.57.39-1.57 1.46 0 .96.74 1.47 1.67 1.47h4.09zM502.49 638.84l-.28-1.82c-.06-.41-.26-.52-.51-.52-.6 0-1.08.41-1.08 1.34 0 .89.57 1.38 1.28 1.46l-.35 1.54c-1.22-.13-2.32-1.24-2.32-2.99 0-2.18 1.24-3.01 2.65-3.01h3.52c.64 0 1.06-.07 1.14-.09v1.57c-.04.01-.33.07-.9.07.54.33 1.12 1.03 1.12 2.18 0 1.49-1.02 2.4-2.14 2.4-1.26.01-1.95-.92-2.13-2.13zm1.12-2.35h-.32l.28 1.85c.09.52.38.95.96.95.48 0 .92-.36.92-1.03 0-.95-.46-1.77-1.84-1.77zM506.55 631.69v1.69h-7.09v-1.65h.95c-.82-.47-1.15-1.31-1.15-2.1 0-1.73 1.25-2.56 2.81-2.56h4.48v1.69h-4.19c-.87 0-1.57.39-1.57 1.46 0 .96.74 1.47 1.67 1.47h4.09zM503 624.47c1.43 0 2.23-.92 2.23-1.98 0-1.11-.77-1.62-1.31-1.78l.54-1.49c1.11.33 2.32 1.4 2.32 3.26 0 2.08-1.62 3.67-3.77 3.67-2.18 0-3.76-1.59-3.76-3.63 0-1.91 1.19-2.96 2.33-3.25l.55 1.51c-.63.16-1.32.64-1.32 1.72-.01 1.05.76 1.97 2.19 1.97zM504.53 612.11c1.24.38 2.24 1.5 2.24 3.2 0 1.92-1.4 3.63-3.8 3.63-2.24 0-3.73-1.66-3.73-3.45 0-2.18 1.44-3.47 3.68-3.47.28 0 .51.03.54.04v5.18c1.08-.04 1.85-.89 1.85-1.94 0-1.02-.54-1.54-1.24-1.78l.46-1.41zm-2.3 1.61c-.83.03-1.57.58-1.57 1.75 0 1.06.82 1.67 1.57 1.73v-3.48zM501.02 610.91c0 .02-.01.03-.03.03h-1.57c-.01 0-.02.01-.02.02v.36c0 .02-.01.03-.03.03h-.07c-.02 0-.03-.01-.03-.03v-.92c0-.02.01-.03.03-.03h.07c.02 0 .03.01.03.03v.36c0 .01.01.02.02.02H501c.02 0 .03.01.03.03v.1zM499.32 610.11c-.02 0-.03-.01-.03-.03v-.1c0-.02.01-.03.03-.04l1.16-.41v-.01l-1.16-.41c-.02-.01-.03-.02-.03-.04v-.1c0-.02.01-.03.03-.03H501c.02 0 .03.01.03.03v.09c0 .02-.01.03-.03.03h-1.33v.01l1.02.36c.02.01.03.02.03.03v.06c0 .02-.01.03-.03.03l-1.02.36v.01H501c.02 0 .03.01.03.03v.09c0 .02-.01.03-.03.03h-1.68z\"/><path d=\"M504.7 695.31c-.02.58-2.31 1.27-3.55 1.65-2.5.75-4.86 1.47-4.86 3.42 0 1.75 1.9 2.49 3.85 3.11.22.07.66.21 1.91.58.16.05.31.09.47.13 1.1.31 2.06.59 2.06 1.27 0 .66-1.04 1-2.1 1.29-.44.12-2.06.6-2.25.66-1.99.63-3.93 1.38-3.93 3.14 0 1.96 2.36 2.67 4.87 3.42 1.23.37 3.53 1.06 3.55 1.63l-.02.66h1.85l.01-.61c0-1.99-2.36-2.7-4.86-3.45-.32-.1-.66-.18-.99-.27-1.24-.31-2.42-.61-2.42-1.38 0-.73 1.3-1.08 2.46-1.39.06-.01 1.74-.51 2.12-.63 1.79-.58 3.7-1.34 3.7-3.07 0-1.74-1.89-2.49-3.83-3.11-.34-.11-2.06-.62-2.21-.66-1.18-.32-2.24-.66-2.24-1.33 0-.77 1.17-1.07 2.42-1.38.33-.08.67-.17.99-.27 2.5-.75 4.86-1.47 4.86-3.46l-.01-.61h-1.85v.66z\" fill=\"#48a7de\"/>';\n  }\n\n  function _generateSVGBorderText(\n    string memory _fromToken,\n    string memory _toToken,\n    string memory _fromSymbol,\n    string memory _toSymbol\n  ) private pure returns (string memory svg) {\n    string memory _fromText = string(abi.encodePacked(_fromToken, ' - ', _fromSymbol));\n    string memory _toText = string(abi.encodePacked(_toToken, ' - ', _toSymbol));\n\n    svg = string(\n      abi.encodePacked(\n        _generateTextWithPath('-100', _fromText),\n        _generateTextWithPath('0', _fromText),\n        _generateTextWithPath('50', _toText),\n        _generateTextWithPath('-50', _toText)\n      )\n    );\n  }\n\n  function _generateTextWithPath(string memory offset, string memory text) private pure returns (string memory path) {\n    path = string(\n      abi.encodePacked(\n        '<text text-rendering=\"optimizeSpeed\"><textPath startOffset=\"',\n        offset,\n        '%\" xlink:href=\"#text-path-a\" class=\"st46 st38 st47\">',\n        text,\n        '<animate additive=\"sum\" attributeName=\"startOffset\" from=\"0%\" to=\"100%\" dur=\"60s\" repeatCount=\"indefinite\" /></textPath></text>'\n      )\n    );\n  }\n\n  function _generateSVGCardMantle(\n    string memory _fromSymbol,\n    string memory _toSymbol,\n    string memory _interval\n  ) private pure returns (string memory svg) {\n    svg = string(\n      abi.encodePacked(\n        '<text><tspan x=\"68.3549\" y=\"146.2414\" class=\"st36 st38 st39 st40\">',\n        _fromSymbol,\n        unicode'<tspan style=\"font-size: 40px;\" dy=\"-5\"> ➔ </tspan><tspan y=\"146.2414\">',\n        _toSymbol,\n        '</tspan></tspan></text><text x=\"68.3549\" y=\"225.9683\" class=\"st36 st49 st50\">',\n        _interval,\n        '</text>'\n      )\n    );\n  }\n\n  function _generageSVGProgressArea(uint32 _swapsExecuted, uint32 _swapsLeft) private pure returns (string memory svg) {\n    svg = string(\n      abi.encodePacked(\n        '<text text-rendering=\"optimizeSpeed\"><textPath xlink:href=\"#text-path-executed\"><tspan class=\"st38 st58\" fill=\"#d1dbe0\" style=\"text-shadow:#214c64 0px 0px 5px\">Executed*: ',\n        _swapsExecuted.toString(),\n        _swapsExecuted != 1 ? ' swaps' : ' swap',\n        '</tspan></textPath></text><text text-rendering=\"optimizeSpeed\"><textPath xlink:href=\"#text-path-left\" startOffset=\"30%\" ><tspan class=\"st38 st58\" alignment-baseline=\"hanging\" fill=\"#153041\" stroke=\"#000\" stroke-width=\"0.5\">Left: ',\n        _swapsLeft.toString(),\n        _swapsLeft != 1 ? ' swaps' : ' swap',\n        '</tspan></textPath></text>'\n      )\n    );\n  }\n\n  function _generateSVGPositionData(\n    uint256 _tokenId,\n    string memory _swapped,\n    string memory _averagePrice,\n    string memory _remaining,\n    string memory _rate\n  ) private pure returns (string memory svg) {\n    svg = string(\n      abi.encodePacked(\n        '<text transform=\"matrix(1 0 0 1 68.3549 775.8853)\"><tspan x=\"0\" y=\"0\" class=\"st36 st38 st44\">Id: ',\n        _tokenId.toString(),\n        '</tspan><tspan x=\"0\" y=\"52.37\" class=\"st36 st38 st44\">Swapped*: ',\n        _swapped,\n        '</tspan><tspan x=\"0\" y=\"104.73\" class=\"st36 st38 st44\">Avg Price: ',\n        _averagePrice,\n        '</tspan><tspan x=\"0\" y=\"157.1\" class=\"st36 st38 st44\">Remaining: ',\n        _remaining,\n        '</tspan><tspan x=\"0\" y=\"209.47\" class=\"st36 st38 st44\">Rate: ',\n        _rate,\n        '</tspan></text><text><tspan x=\"68.3554\" y=\"1050.5089\" class=\"st36 st38 st48\">* since start or last edit / withdraw</tspan></text>'\n      )\n    );\n  }\n\n  function _generateSVGLinesAndMainLogo(uint32 _percentage) private pure returns (string memory svg) {\n    svg = string(\n      abi.encodePacked(\n        '<path class=\"st1\" d=\"M68.35 175.29h440.12M68.35 249.38h440.12M68.35 737.58h440.12M68.35 792.11h440.12M68.35 844.47h440.12M68.35 896.82h440.12M68.35 949.17h440.12M68.35 1001.53h440.12\"/><circle cx=\"290.35\" cy=\"488.04\" r=\"164.57\" fill=\"url(#SVGID_3)\"/><circle transform=\"rotate(-45.001 290.349 488.046)\" class=\"st1\" cx=\"290.35\" cy=\"488.04\" r=\"177.22\"/><circle class=\"st52\" cx=\"290.35\" cy=\"488.04\" r=\"119.5\" stroke-width=\"21\" fill=\"none\" stroke-linecap=\"round\"/><path class=\"st55\" d=\"M359.92 508.63c-3.97-.13-8.71-15.84-11.26-24.3-5.16-17.12-10.04-33.3-23.44-33.3-11.95 0-17.08 13.02-21.31 26.36-.48 1.5-1.41 4.55-3.94 13.05-.32 1.07-.62 2.13-.92 3.18-2.15 7.55-4.01 14.08-8.73 14.08-4.54 0-6.85-7.09-8.83-14.35-.81-2.99-4.11-14.12-4.51-15.4-4.29-13.62-9.47-26.93-21.49-26.93-13.4 0-18.28 16.18-23.44 33.31-2.55 8.44-7.28 24.16-11.19 24.29l-4.52-.11v12.69l4.21.1c13.6 0 18.48-16.18 23.64-33.31.66-2.2 1.25-4.54 1.82-6.8 2.15-8.52 4.18-16.56 9.47-16.56 5.03 0 7.4 8.93 9.49 16.81.1.38 3.51 11.92 4.35 14.52 3.95 12.26 9.15 25.34 20.98 25.34 11.95 0 17.06-12.95 21.27-26.22.74-2.33 4.27-14.12 4.55-15.15 2.16-8.07 4.49-15.3 9.08-15.3 5.29 0 7.32 8.04 9.47 16.56.57 2.26 1.16 4.6 1.82 6.8 5.17 17.13 10.05 33.31 23.68 33.3l4.17-.1V508.5l-4.42.13z\"/><circle class=\"cls-79\" cx=\"290.35\" cy=\"488.04\" r=\"119.5\" stroke-width=\"21\" stroke-dasharray=\"750.84\" stroke-dashoffset=\"562\" fill=\"none\" stroke-linecap=\"round\"/><circle class=\"st57\" r=\"13.79\"><animateMotion path=\"M290.35,368.77 a 119.5,119.5 0 1,1 0,239 a 119.5,119.5 0 1,1 0,-239\" calcMode=\"linear\" fill=\"freeze\" dur=\"2s\" keyTimes=\"0;1\" keyPoints=\"0;',\n        _percentage == 100 ? '1' : '0.',\n        _percentage < 10 ? '0' : '',\n        _percentage == 100 ? '' : _percentage.toString(),\n        '\"/></circle>'\n      )\n    );\n  }\n}\n"
    },
    "contracts/mocks/libraries/NFTDescriptor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.7 <0.9.0;\n\nimport '../../libraries/NFTDescriptor.sol';\n\ncontract NFTDescriptorMock {\n  function fixedPointToDecimalString(uint256 value, uint8 decimals) external pure returns (string memory) {\n    return NFTDescriptor.fixedPointToDecimalString(value, decimals);\n  }\n\n  function addressToString(address _addr) external pure returns (string memory) {\n    return NFTDescriptor.addressToString(_addr);\n  }\n}\n"
    },
    "contracts/mocks/DCAHubSwapCallee.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/utils/Address.sol';\n\nimport '../interfaces/IDCAHubSwapCallee.sol';\nimport '../interfaces/IDCAHub.sol';\n\ncontract DCAHubSwapCalleeMock is IDCAHubSwapCallee {\n  struct SwapCall {\n    address hub;\n    address sender;\n    IDCAHub.TokenInSwap[] tokens;\n    uint256[] borrowed;\n    bytes data;\n  }\n\n  mapping(address => uint256) private _initialBalance;\n  mapping(address => uint256) private _amountToReturn;\n  SwapCall private _lastCall;\n  bool private _returnAsExpected = true;\n  bool private _avoidRewardCheck = false;\n\n  // solhint-disable-next-line func-name-mixedcase\n  function DCAHubSwapCall(\n    address _sender,\n    IDCAHub.TokenInSwap[] calldata _tokens,\n    uint256[] calldata _borrowed,\n    bytes calldata _data\n  ) external {\n    if (!_avoidRewardCheck) {\n      for (uint256 i; i < _tokens.length; i++) {\n        require(\n          IERC20Metadata(_tokens[i].token).balanceOf(address(this)) == _initialBalance[_tokens[i].token] + _borrowed[i] + _tokens[i].reward,\n          'DCAHubSwapCallee: token not sent optimistically'\n        );\n      }\n    }\n    _lastCall.hub = msg.sender;\n    _lastCall.sender = _sender;\n    _lastCall.data = _data;\n\n    for (uint256 i; i < _tokens.length; i++) {\n      _lastCall.tokens.push(_tokens[i]);\n      _lastCall.borrowed.push(_borrowed[i]);\n    }\n\n    for (uint256 i; i < _tokens.length; i++) {\n      unchecked {\n        _initialBalance[_tokens[i].token] += _returnAsExpected\n          ? _tokens[i].reward - _tokens[i].toProvide\n          : _borrowed[i] + _tokens[i].reward - _amountToReturn[_tokens[i].token];\n      }\n    }\n\n    for (uint256 i; i < _tokens.length; i++) {\n      uint256 _amount = _returnAsExpected ? _borrowed[i] + _tokens[i].toProvide : _amountToReturn[_tokens[i].token];\n      IERC20Metadata(_tokens[i].token).transfer(msg.sender, _amount);\n    }\n  }\n\n  function avoidRewardCheck() external {\n    _avoidRewardCheck = true;\n  }\n\n  function setInitialBalances(address[] calldata _tokens, uint256[] calldata _amounts) external {\n    for (uint256 i; i < _tokens.length; i++) {\n      _initialBalance[_tokens[i]] = _amounts[i];\n    }\n  }\n\n  function returnSpecificAmounts(address[] calldata _tokens, uint256[] calldata _amounts) external {\n    for (uint256 i; i < _tokens.length; i++) {\n      _amountToReturn[_tokens[i]] = _amounts[i];\n    }\n    _returnAsExpected = false;\n  }\n\n  function lastCall() external view returns (SwapCall memory) {\n    return _lastCall;\n  }\n}\n\ncontract ReentrantDCAHubSwapCalleeMock is IDCAHubSwapCallee {\n  using Address for address;\n\n  bytes internal _attack;\n\n  function setAttack(bytes memory __attack) external {\n    _attack = __attack;\n  }\n\n  // solhint-disable-next-line func-name-mixedcase\n  function DCAHubSwapCall(\n    address,\n    IDCAHub.TokenInSwap[] calldata,\n    uint256[] calldata,\n    bytes calldata\n  ) external {\n    (msg.sender).functionCall(_attack);\n  }\n}\n"
    },
    "contracts/mocks/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\ncontract ERC20Mock is ERC20 {\n  uint8 private _decimals;\n\n  constructor(\n    string memory _name,\n    string memory _symbol,\n    uint8 __decimals,\n    address _initialAccount,\n    uint256 _initialBalance\n  ) payable ERC20(_name, _symbol) {\n    _decimals = __decimals;\n    if (_initialBalance > 0) {\n      _mint(_initialAccount, _initialBalance);\n    }\n  }\n\n  function mint(address _account, uint256 _amount) external {\n    _mint(_account, _amount);\n  }\n\n  function burn(address _account, uint256 _amount) external {\n    _burn(_account, _amount);\n  }\n\n  function approveInternal(\n    address _owner,\n    address _spender,\n    uint256 _value\n  ) external {\n    _approve(_owner, _spender, _value);\n  }\n\n  function decimals() public view virtual override returns (uint8) {\n    return _decimals;\n  }\n}\n"
    },
    "contracts/mocks/oracles/ChainlinkOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.8.7 <0.9.0;\n\nimport '../../oracles/ChainlinkOracle.sol';\n\ncontract ChainlinkOracleMock is ChainlinkOracle {\n  struct MockedPricingPlan {\n    PricingPlan plan;\n    bool isSet;\n  }\n\n  mapping(address => mapping(address => bool)) public addSupportForPairCalled;\n  mapping(address => mapping(address => MockedPricingPlan)) private _pricingPlan;\n\n  constructor(\n    // solhint-disable-next-line var-name-mixedcase\n    address _WETH,\n    FeedRegistryInterface _registry,\n    uint32 _maxDelay,\n    address _governor\n  ) ChainlinkOracle(_WETH, _registry, _maxDelay, _governor) {}\n\n  function internalAddSupportForPair(address _tokenA, address _tokenB) external {\n    _addSupportForPair(_tokenA, _tokenB);\n  }\n\n  function _addSupportForPair(address _tokenA, address _tokenB) internal override {\n    addSupportForPairCalled[_tokenA][_tokenB] = true;\n    super._addSupportForPair(_tokenA, _tokenB);\n  }\n\n  function reset(address _tokenA, address _tokenB) external {\n    delete addSupportForPairCalled[_tokenA][_tokenB];\n  }\n\n  function setPricingPlan(\n    address _tokenA,\n    address _tokenB,\n    PricingPlan _plan\n  ) external {\n    (address __tokenA, address __tokenB) = TokenSorting.sortTokens(_tokenA, _tokenB);\n    _pricingPlan[__tokenA][__tokenB] = MockedPricingPlan({plan: _plan, isSet: true});\n  }\n\n  function intercalCallRegistry(address _quote, address _base) external view returns (uint256) {\n    return _callRegistry(_quote, _base);\n  }\n\n  function _determinePricingPlan(address _tokenA, address _tokenB) internal view override returns (PricingPlan) {\n    (address __tokenA, address __tokenB) = TokenSorting.sortTokens(_tokenA, _tokenB);\n    MockedPricingPlan memory _plan = _pricingPlan[__tokenA][__tokenB];\n    if (_plan.isSet) {\n      return _plan.plan;\n    } else {\n      return super._determinePricingPlan(__tokenA, __tokenB);\n    }\n  }\n\n  function isUSD(address _token) external view returns (bool) {\n    return _isUSD(_token);\n  }\n}\n"
    },
    "contracts/mocks/oracles/OracleAggregator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.8.7 <0.9.0;\n\nimport '../../oracles/OracleAggregator.sol';\n\ncontract OracleAggregatorMock is OracleAggregator {\n  mapping(address => mapping(address => bool)) public addSupportForPairCalled;\n\n  constructor(\n    IPriceOracle _oracle1,\n    IPriceOracle _oracle2,\n    address _governor\n  ) OracleAggregator(_oracle1, _oracle2, _governor) {}\n\n  function internalAddSupportForPair(address _tokenA, address _tokenB) external {\n    _addSupportForPair(_tokenA, _tokenB);\n  }\n\n  function _addSupportForPair(address _tokenA, address _tokenB) internal override {\n    addSupportForPairCalled[_tokenA][_tokenB] = true;\n    super._addSupportForPair(_tokenA, _tokenB);\n  }\n}\n"
    },
    "contracts/mocks/libraries/Intervals.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.7 <0.9.0;\n\nimport '../../libraries/Intervals.sol';\n\ncontract IntervalsMock {\n  function intervalToMask(uint32 _swapInterval) external pure returns (bytes1) {\n    return Intervals.intervalToMask(_swapInterval);\n  }\n\n  function maskToInterval(bytes1 _mask) external pure returns (uint32) {\n    return Intervals.maskToInterval(_mask);\n  }\n\n  function intervalsInByte(bytes1 _byte) external pure returns (uint32[] memory) {\n    return Intervals.intervalsInByte(_byte);\n  }\n}\n"
    },
    "contracts/DCAHub/DCAHubPositionHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\nimport '../libraries/Intervals.sol';\nimport './DCAHubConfigHandler.sol';\n\nabstract contract DCAHubPositionHandler is ReentrancyGuard, DCAHubConfigHandler, IDCAHubPositionHandler {\n  struct DCA {\n    uint32 swapWhereLastUpdated; // Includes both modify and withdraw\n    uint32 finalSwap;\n    bytes1 swapIntervalMask;\n    address from;\n    uint24 rateLower; // We are splitting the rate into two different uints, so that we can use only 2 storage slots\n    uint96 rateHigher;\n    address to;\n  }\n\n  using SafeERC20 for IERC20Metadata;\n\n  /// @inheritdoc IDCAHubPositionHandler\n  IDCAPermissionManager public permissionManager;\n  mapping(uint256 => DCA) internal _userPositions;\n  mapping(uint256 => uint256) internal _swappedBeforeModified;\n  /// @inheritdoc IDCAHubPositionHandler\n  uint256 public totalCreatedPositions;\n\n  constructor(IDCAPermissionManager _permissionManager) {\n    _assertNonZeroAddress(address(_permissionManager));\n    permissionManager = _permissionManager;\n  }\n\n  /// @inheritdoc IDCAHubPositionHandler\n  function userPosition(uint256 _positionId) external view returns (UserPosition memory _userPosition) {\n    DCA memory _position = _userPositions[_positionId];\n    uint32 _performedSwaps = _getPerformedSwaps(_position.from, _position.to, _position.swapIntervalMask);\n    uint32 _newestSwapToConsider = _min(_performedSwaps, _position.finalSwap);\n    _userPosition.from = IERC20Metadata(_position.from);\n    _userPosition.to = IERC20Metadata(_position.to);\n    _userPosition.swapsExecuted = _subtractIfPossible(_newestSwapToConsider, _position.swapWhereLastUpdated);\n    _userPosition.swapsLeft = _subtractIfPossible(_position.finalSwap, _performedSwaps);\n    _userPosition.remaining = _calculateUnswapped(_position, _performedSwaps);\n    _userPosition.rate = _mergeRate(_position);\n    if (_position.swapIntervalMask > 0) {\n      _userPosition.swapInterval = Intervals.maskToInterval(_position.swapIntervalMask);\n      _userPosition.swapped = _calculateSwapped(_positionId, _position, _performedSwaps);\n    }\n  }\n\n  /// @inheritdoc IDCAHubPositionHandler\n  function deposit(\n    address _from,\n    address _to,\n    uint256 _amount,\n    uint32 _amountOfSwaps,\n    uint32 _swapInterval,\n    address _owner,\n    IDCAPermissionManager.PermissionSet[] calldata _permissions\n  ) public nonReentrant whenNotPaused returns (uint256) {\n    if (_from == address(0) || _to == address(0) || _owner == address(0)) revert IDCAHub.ZeroAddress();\n    if (_from == _to) revert InvalidToken();\n    if (_amount == 0) revert ZeroAmount();\n    if (_amountOfSwaps == 0) revert ZeroSwaps();\n    uint120 _rate = _calculateRate(_amount, _amountOfSwaps);\n    uint256 _positionId = ++totalCreatedPositions;\n    DCA memory _userPosition = _buildPosition(_from, _to, _amountOfSwaps, Intervals.intervalToMask(_swapInterval), _rate);\n    if (allowedSwapIntervals & _userPosition.swapIntervalMask == 0) revert IntervalNotAllowed();\n    permissionManager.mint(_positionId, _owner, _permissions);\n    _updateActiveIntervalsAndOracle(_from, _to, _userPosition.swapIntervalMask);\n    _addToDelta(_from, _to, _userPosition.swapIntervalMask, _userPosition.finalSwap, _rate);\n    _userPositions[_positionId] = _userPosition;\n    _storeMagnitudeIfNecessary(_from);\n    _storeMagnitudeIfNecessary(_to);\n    IERC20Metadata(_from).safeTransferFrom(msg.sender, address(this), _amount);\n    emit Deposited(\n      msg.sender,\n      _owner,\n      _positionId,\n      _from,\n      _to,\n      _swapInterval,\n      _rate,\n      _userPosition.swapWhereLastUpdated + 1,\n      _userPosition.finalSwap,\n      _permissions\n    );\n    return _positionId;\n  }\n\n  /// @inheritdoc IDCAHubPositionHandler\n  function deposit(\n    address _from,\n    address _to,\n    uint256 _amount,\n    uint32 _amountOfSwaps,\n    uint32 _swapInterval,\n    address _owner,\n    IDCAPermissionManager.PermissionSet[] calldata _permissions,\n    bytes calldata _miscellaneous\n  ) external returns (uint256 _positionId) {\n    _positionId = deposit(_from, _to, _amount, _amountOfSwaps, _swapInterval, _owner, _permissions);\n    if (_miscellaneous.length > 0) {\n      emit Miscellaneous(_positionId, _miscellaneous);\n    }\n  }\n\n  /// @inheritdoc IDCAHubPositionHandler\n  function withdrawSwapped(uint256 _positionId, address _recipient) external nonReentrant returns (uint256) {\n    _assertNonZeroAddress(_recipient);\n\n    (uint256 _swapped, address _to) = _executeWithdraw(_positionId);\n    _transfer(_to, _recipient, _swapped);\n    emit Withdrew(msg.sender, _recipient, _positionId, _to, _swapped);\n    return _swapped;\n  }\n\n  /// @inheritdoc IDCAHubPositionHandler\n  function withdrawSwappedMany(PositionSet[] calldata _positions, address _recipient) external nonReentrant returns (uint256[] memory _swapped) {\n    _assertNonZeroAddress(_recipient);\n    _swapped = new uint256[](_positions.length);\n    for (uint256 i; i < _positions.length; i++) {\n      address _token = _positions[i].token;\n      for (uint256 j; j < _positions[i].positionIds.length; j++) {\n        (uint256 _swappedByPosition, address _to) = _executeWithdraw(_positions[i].positionIds[j]);\n        if (_to != _token) revert PositionDoesNotMatchToken();\n        _swapped[i] += _swappedByPosition;\n      }\n      _transfer(_token, _recipient, _swapped[i]);\n    }\n    emit WithdrewMany(msg.sender, _recipient, _positions, _swapped);\n  }\n\n  /// @inheritdoc IDCAHubPositionHandler\n  function terminate(\n    uint256 _positionId,\n    address _recipientUnswapped,\n    address _recipientSwapped\n  ) external nonReentrant returns (uint256 _unswapped, uint256 _swapped) {\n    if (_recipientUnswapped == address(0) || _recipientSwapped == address(0)) revert IDCAHub.ZeroAddress();\n\n    DCA memory _userPosition = _userPositions[_positionId];\n    _assertPositionExistsAndCallerHasPermission(_positionId, _userPosition, IDCAPermissionManager.Permission.TERMINATE);\n    uint32 _performedSwaps = _getPerformedSwaps(_userPosition.from, _userPosition.to, _userPosition.swapIntervalMask);\n\n    _swapped = _calculateSwapped(_positionId, _userPosition, _performedSwaps);\n    _unswapped = _calculateUnswapped(_userPosition, _performedSwaps);\n\n    _removeFromDelta(_userPosition, _performedSwaps);\n    delete _userPositions[_positionId];\n    delete _swappedBeforeModified[_positionId];\n    permissionManager.burn(_positionId);\n\n    if (_swapped > 0) {\n      _transfer(_userPosition.to, _recipientSwapped, _swapped);\n    }\n\n    if (_unswapped > 0) {\n      _transfer(_userPosition.from, _recipientUnswapped, _unswapped);\n    }\n\n    emit Terminated(msg.sender, _recipientUnswapped, _recipientSwapped, _positionId, _unswapped, _swapped);\n  }\n\n  /// @inheritdoc IDCAHubPositionHandler\n  function increasePosition(\n    uint256 _positionId,\n    uint256 _amount,\n    uint32 _newAmountOfSwaps\n  ) external nonReentrant whenNotPaused {\n    _modify(_positionId, _amount, _newAmountOfSwaps, address(0));\n  }\n\n  /// @inheritdoc IDCAHubPositionHandler\n  function reducePosition(\n    uint256 _positionId,\n    uint256 _amount,\n    uint32 _newAmountOfSwaps,\n    address _recipient\n  ) external nonReentrant {\n    _assertNonZeroAddress(_recipient);\n    _modify(_positionId, _amount, _newAmountOfSwaps, _recipient);\n  }\n\n  function _modify(\n    uint256 _positionId,\n    uint256 _amount,\n    uint32 _newAmountOfSwaps,\n    address _recipient\n  ) internal {\n    DCA memory _userPosition = _userPositions[_positionId];\n    bool _increase = _recipient == address(0);\n    _assertPositionExistsAndCallerHasPermission(\n      _positionId,\n      _userPosition,\n      _increase ? IDCAPermissionManager.Permission.INCREASE : IDCAPermissionManager.Permission.REDUCE\n    );\n\n    uint32 _performedSwaps = _getPerformedSwaps(_userPosition.from, _userPosition.to, _userPosition.swapIntervalMask);\n    uint256 _unswapped = _calculateUnswapped(_userPosition, _performedSwaps);\n    uint256 _total = _increase ? _unswapped + _amount : _unswapped - _amount;\n    if (_total != 0 && _newAmountOfSwaps == 0) revert ZeroSwaps();\n    if (_total == 0 && _newAmountOfSwaps > 0) _newAmountOfSwaps = 0;\n\n    uint120 _newRate = _newAmountOfSwaps == 0 ? 0 : _calculateRate(_total, _newAmountOfSwaps);\n    (_userPositions[_positionId].rateLower, _userPositions[_positionId].rateHigher) = _splitRate(_newRate);\n\n    uint32 _finalSwap = _performedSwaps + _newAmountOfSwaps;\n    _userPositions[_positionId].swapWhereLastUpdated = _performedSwaps;\n    _userPositions[_positionId].finalSwap = _finalSwap;\n    _swappedBeforeModified[_positionId] = _calculateSwapped(_positionId, _userPosition, _performedSwaps);\n\n    _removeFromDelta(_userPosition, _performedSwaps);\n    _addToDelta(_userPosition.from, _userPosition.to, _userPosition.swapIntervalMask, _finalSwap, _newRate);\n\n    if (_amount > 0) {\n      if (_increase) {\n        IERC20Metadata(_userPosition.from).safeTransferFrom(msg.sender, address(this), _amount);\n      } else {\n        _transfer(_userPosition.from, _recipient, _amount);\n      }\n    }\n\n    emit Modified(msg.sender, _positionId, _newRate, _performedSwaps + 1, _finalSwap);\n  }\n\n  function _assertPositionExistsAndCallerHasPermission(\n    uint256 _positionId,\n    DCA memory _userPosition,\n    IDCAPermissionManager.Permission _permission\n  ) internal view {\n    if (_userPosition.swapIntervalMask == 0) revert InvalidPosition();\n    if (!permissionManager.hasPermission(_positionId, msg.sender, _permission)) revert UnauthorizedCaller();\n  }\n\n  function _storeMagnitudeIfNecessary(address _token) internal {\n    if (magnitude[_token] == 0) {\n      magnitude[_token] = uint120(10**IERC20Metadata(_token).decimals());\n    }\n  }\n\n  function _addToDelta(\n    address _from,\n    address _to,\n    bytes1 _swapIntervalMask,\n    uint32 _finalSwap,\n    uint120 _rate\n  ) internal {\n    _modifyDelta(_from, _to, _swapIntervalMask, _finalSwap, _rate, true);\n  }\n\n  function _removeFromDelta(DCA memory _userPosition, uint32 _performedSwaps) internal {\n    if (_userPosition.finalSwap > _performedSwaps) {\n      _modifyDelta(\n        _userPosition.from,\n        _userPosition.to,\n        _userPosition.swapIntervalMask,\n        _userPosition.finalSwap,\n        _mergeRate(_userPosition),\n        false\n      );\n    }\n  }\n\n  function _modifyDelta(\n    address _from,\n    address _to,\n    bytes1 _swapIntervalMask,\n    uint32 _finalSwap,\n    uint120 _rate,\n    bool _add\n  ) internal {\n    if (_from < _to) {\n      if (_add) {\n        _swapData[_from][_to][_swapIntervalMask].nextAmountToSwapAToB += _rate;\n        _swapAmountDelta[_from][_to][_swapIntervalMask][_finalSwap + 1].swapDeltaAToB += _rate;\n      } else {\n        _swapData[_from][_to][_swapIntervalMask].nextAmountToSwapAToB -= _rate;\n        _swapAmountDelta[_from][_to][_swapIntervalMask][_finalSwap + 1].swapDeltaAToB -= _rate;\n      }\n    } else {\n      if (_add) {\n        _swapData[_to][_from][_swapIntervalMask].nextAmountToSwapBToA += _rate;\n        _swapAmountDelta[_to][_from][_swapIntervalMask][_finalSwap + 1].swapDeltaBToA += _rate;\n      } else {\n        _swapData[_to][_from][_swapIntervalMask].nextAmountToSwapBToA -= _rate;\n        _swapAmountDelta[_to][_from][_swapIntervalMask][_finalSwap + 1].swapDeltaBToA -= _rate;\n      }\n    }\n  }\n\n  function _updateActiveIntervalsAndOracle(\n    address _from,\n    address _to,\n    bytes1 _mask\n  ) internal {\n    (address _tokenA, address _tokenB) = TokenSorting.sortTokens(_from, _to);\n    bytes1 _activeIntervals = activeSwapIntervals[_tokenA][_tokenB];\n    if (_activeIntervals & _mask == 0) {\n      if (_activeIntervals == 0) {\n        oracle.addSupportForPairIfNeeded(_tokenA, _tokenB);\n      }\n      activeSwapIntervals[_tokenA][_tokenB] = _activeIntervals | _mask;\n    }\n  }\n\n  /** Returns the amount of tokens swapped in TO */\n  function _calculateSwapped(\n    uint256 _positionId,\n    DCA memory _userPosition,\n    uint32 _performedSwaps\n  ) internal view returns (uint256 _swapped) {\n    uint32 _newestSwapToConsider = _min(_performedSwaps, _userPosition.finalSwap);\n\n    if (_userPosition.swapWhereLastUpdated > _newestSwapToConsider) {\n      // If last update happened after the position's final swap, then a withdraw was executed, and we just return 0\n      return 0;\n    } else if (_userPosition.swapWhereLastUpdated == _newestSwapToConsider) {\n      // If the last update matches the positions's final swap, then we can avoid all calculation below\n      return _swappedBeforeModified[_positionId];\n    }\n\n    uint256 _accumRatio = _userPosition.from < _userPosition.to\n      ? _accumRatio[_userPosition.from][_userPosition.to][_userPosition.swapIntervalMask][_newestSwapToConsider].accumRatioAToB -\n        _accumRatio[_userPosition.from][_userPosition.to][_userPosition.swapIntervalMask][_userPosition.swapWhereLastUpdated].accumRatioAToB\n      : _accumRatio[_userPosition.to][_userPosition.from][_userPosition.swapIntervalMask][_newestSwapToConsider].accumRatioBToA -\n        _accumRatio[_userPosition.to][_userPosition.from][_userPosition.swapIntervalMask][_userPosition.swapWhereLastUpdated].accumRatioBToA;\n    uint256 _magnitude = magnitude[_userPosition.from];\n    uint120 _rate = _mergeRate(_userPosition);\n    (bool _ok, uint256 _mult) = SafeMath.tryMul(_accumRatio, _rate);\n    uint256 _swappedInCurrentPosition = _ok ? _mult / _magnitude : (_accumRatio / _magnitude) * _rate;\n    _swapped = _swappedInCurrentPosition + _swappedBeforeModified[_positionId];\n  }\n\n  /** Returns how many FROM remains unswapped  */\n  function _calculateUnswapped(DCA memory _userPosition, uint32 _performedSwaps) internal pure returns (uint256 _unswapped) {\n    _unswapped = uint256(_subtractIfPossible(_userPosition.finalSwap, _performedSwaps)) * _mergeRate(_userPosition);\n  }\n\n  function _executeWithdraw(uint256 _positionId) internal returns (uint256 _swapped, address _to) {\n    DCA memory _userPosition = _userPositions[_positionId];\n    _assertPositionExistsAndCallerHasPermission(_positionId, _userPosition, IDCAPermissionManager.Permission.WITHDRAW);\n    uint32 _performedSwaps = _getPerformedSwaps(_userPosition.from, _userPosition.to, _userPosition.swapIntervalMask);\n    _swapped = _calculateSwapped(_positionId, _userPosition, _performedSwaps);\n    _to = _userPosition.to;\n    _userPositions[_positionId].swapWhereLastUpdated = _performedSwaps;\n    delete _swappedBeforeModified[_positionId];\n  }\n\n  function _getPerformedSwaps(\n    address _from,\n    address _to,\n    bytes1 _swapIntervalMask\n  ) internal view returns (uint32) {\n    (address _tokenA, address _tokenB) = TokenSorting.sortTokens(_from, _to);\n    return _swapData[_tokenA][_tokenB][_swapIntervalMask].performedSwaps;\n  }\n\n  function _buildPosition(\n    address _from,\n    address _to,\n    uint32 _amountOfSwaps,\n    bytes1 _mask,\n    uint120 _rate\n  ) internal view returns (DCA memory _userPosition) {\n    uint32 _performedSwaps = _getPerformedSwaps(_from, _to, _mask);\n    (uint24 _lower, uint96 _higher) = _splitRate(_rate);\n    _userPosition = DCA({\n      swapWhereLastUpdated: _performedSwaps,\n      finalSwap: _performedSwaps + _amountOfSwaps,\n      swapIntervalMask: _mask,\n      rateLower: _lower,\n      rateHigher: _higher,\n      from: _from,\n      to: _to\n    });\n  }\n\n  function _calculateRate(uint256 _amount, uint32 _amountOfSwaps) internal pure returns (uint120) {\n    uint256 _rate = _amount / _amountOfSwaps;\n    if (_rate > type(uint120).max) revert AmountTooBig();\n    return uint120(_rate);\n  }\n\n  function _mergeRate(DCA memory _userPosition) internal pure returns (uint120) {\n    return (uint120(_userPosition.rateHigher) << 24) + _userPosition.rateLower;\n  }\n\n  function _splitRate(uint120 _rate) internal pure returns (uint24 _lower, uint96 _higher) {\n    _lower = uint24(_rate);\n    _higher = uint96(_rate >> 24);\n  }\n\n  function _min(uint32 _a, uint32 _b) internal pure returns (uint32) {\n    return _a > _b ? _b : _a;\n  }\n\n  function _subtractIfPossible(uint32 _a, uint32 _b) internal pure returns (uint32) {\n    return _a > _b ? _a - _b : 0;\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/mocks/DCAHub/DCAHubPositionHandler.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.8.7 <0.9.0;\n\nimport '../../DCAHub/DCAHubPositionHandler.sol';\nimport './DCAHubConfigHandler.sol';\n\ncontract DCAHubPositionHandlerMock is DCAHubPositionHandler, DCAHubConfigHandlerMock {\n  constructor(\n    address _immediateGovernor,\n    IPriceOracle _oracle,\n    IDCAPermissionManager _permissionManager\n  ) DCAHubConfigHandlerMock(_immediateGovernor, address(1), _oracle) DCAHubPositionHandler(_permissionManager) {}\n\n  function setLastUpdated(uint256 _positionId, uint32 _lastUpdated) external {\n    _userPositions[_positionId].swapWhereLastUpdated = _lastUpdated;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 9999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}