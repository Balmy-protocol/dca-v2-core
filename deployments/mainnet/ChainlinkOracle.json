{
  "address": "0x285383Bf3ef9C8A30b3Ed40f3C9e1AB63c970cAE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "contract FeedRegistryInterface",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_maxDelay",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidMappingsInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LastUpdateIsTooOld",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PairNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroMaxDelay",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "AddedSupportForPairInChainlinkOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "mappings",
          "type": "address[]"
        }
      ],
      "name": "MappingsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newMaxDelay",
          "type": "uint32"
        }
      ],
      "name": "MaxDelaySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PendingGovernorAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pendingGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "TokensConsideredUSD",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptPendingGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_mappings",
          "type": "address[]"
        }
      ],
      "name": "addMappings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "addSupportForPairIfNeeded",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "addUSDStablecoins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "canSupportPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isGovernor",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isPendingGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isPendingGovernor",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "mappedToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDelay",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "planForPair",
      "outputs": [
        {
          "internalType": "enum IChainlinkOracle.PricingPlan",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_amountIn",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "reconfigureSupportForPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract FeedRegistryInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_maxDelay",
          "type": "uint32"
        }
      ],
      "name": "setMaxDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__pendingGovernor",
          "type": "address"
        }
      ],
      "name": "setPendingGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x20d4cff85b2a8da8960a4497d3e7d6c869a534db2932166425fa58a25cec32e9",
  "receipt": {
    "to": null,
    "from": "0xe48a5173AdE669651120cb5E99e6fE140d4d73da",
    "contractAddress": "0x285383Bf3ef9C8A30b3Ed40f3C9e1AB63c970cAE",
    "transactionIndex": 17,
    "gasUsed": "1564801",
    "logsBloom": "0x
    "blockHash": "0xdf146bb32b5ed218e9629e3c65ba62e0e229933bac006f38aea0929ddfc788ee",
    "transactionHash": "0x20d4cff85b2a8da8960a4497d3e7d6c869a534db2932166425fa58a25cec32e9",
    "logs": [],
    "blockNumber": 14309777,
    "cumulativeGasUsed": "2397683",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
    "0x47Fb2585D2C56Fe188D0E6ec628a38b74fCeeeDf",
    86400,
    "0x1a00e1E311009E56e3b0B9Ed6F86f5Ce128a1C01"
  ],
  "solcInputHash": "e0d93dcef7f407e2b95e11e9132f6a29",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"contract FeedRegistryInterface\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_maxDelay\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidMappingsInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LastUpdateIsTooOld\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PairNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroMaxDelay\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"AddedSupportForPairInChainlinkOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"mappings\",\"type\":\"address[]\"}],\"name\":\"MappingsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newMaxDelay\",\"type\":\"uint32\"}],\"name\":\"MaxDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PendingGovernorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"TokensConsideredUSD\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_mappings\",\"type\":\"address[]\"}],\"name\":\"addMappings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"addSupportForPairIfNeeded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addUSDStablecoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"canSupportPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isGovernor\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isPendingGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isPendingGovernor\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"mappedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"planForPair\",\"outputs\":[{\"internalType\":\"enum IChainlinkOracle.PricingPlan\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amountIn\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"reconfigureSupportForPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract FeedRegistryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_maxDelay\",\"type\":\"uint32\"}],\"name\":\"setMaxDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addMappings(address[],address[])\":{\"params\":{\"_addresses\":\"The addresses of the tokens\",\"_mappings\":\"The addresses of their mappings\"}},\"addSupportForPairIfNeeded(address,address)\":{\"details\":\"Will revert if pair cannot be supported. _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\",\"params\":{\"_tokenA\":\"One of the pair's tokens\",\"_tokenB\":\"The other of the pair's tokens\"}},\"addUSDStablecoins(address[])\":{\"params\":{\"_addresses\":\"The addresses of the tokens\"}},\"canSupportPair(address,address)\":{\"details\":\"_tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\",\"params\":{\"_tokenA\":\"One of the pair's tokens\",\"_tokenB\":\"The other of the pair's tokens\"},\"returns\":{\"_0\":\"Whether the given pair of tokens can be supported by the oracle\"}},\"mappedToken(address)\":{\"returns\":{\"_0\":\"If it exists, the mapping is returned. Otherwise, the original token is returned\"}},\"quote(address,uint128,address)\":{\"params\":{\"_amountIn\":\"The amount that will be provided\",\"_tokenIn\":\"The token that will be provided\",\"_tokenOut\":\"The token we would like to quote\"},\"returns\":{\"_amountOut\":\"How much _tokenOut will be returned in exchange for _amountIn amount of _tokenIn\"}},\"reconfigureSupportForPair(address,address)\":{\"details\":\"Will revert if pair cannot be supported. _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\",\"params\":{\"_tokenA\":\"One of the pair's tokens\",\"_tokenB\":\"The other of the pair's tokens\"}},\"setMaxDelay(uint32)\":{\"params\":{\"_maxDelay\":\"The new max delay\"}}},\"stateVariables\":{\"WETH\":{\"return\":\"The address of the token\",\"returns\":{\"_0\":\"The address of the token\"}},\"maxDelay\":{\"return\":\"How old the last price update can be in seconds\",\"returns\":{\"_0\":\"How old the last price update can be in seconds\"}},\"planForPair\":{\"details\":\"It is expected that _tokenA < _tokenB\",\"return\":\"The pricing plan that will be used\",\"returns\":{\"_0\":\"The pricing plan that will be used\"}},\"registry\":{\"return\":\"The Chainlink registry\",\"returns\":{\"_0\":\"The Chainlink registry\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidMappingsInput()\":[{\"notice\":\"Thrown when the input for adding mappings in invalid\"}],\"InvalidPrice()\":[{\"notice\":\"Thrown when the price is non-positive\"}],\"LastUpdateIsTooOld()\":[{\"notice\":\"Thrown when the last price update was too long ago\"}],\"PairNotSupported()\":[{\"notice\":\"Thrown when trying to configure a pair that is not supported\"}],\"ZeroAddress()\":[{\"notice\":\"Thrown when one of the parameters is a zero address\"}],\"ZeroMaxDelay()\":[{\"notice\":\"Thrown when the given max delay is zero\"}]},\"events\":{\"AddedSupportForPairInChainlinkOracle(address,address)\":{\"notice\":\"Emitted when the oracle add supports for a new pair\"},\"MappingsAdded(address[],address[])\":{\"notice\":\"Emitted when new mappings are added\"},\"MaxDelaySet(uint32)\":{\"notice\":\"Emitted when a new max delay is set\"},\"TokensConsideredUSD(address[])\":{\"notice\":\"Emitted when new tokens are considered USD\"}},\"kind\":\"user\",\"methods\":{\"WETH()\":{\"notice\":\"Returns the address of the WETH ERC-20 token\"},\"addMappings(address[],address[])\":{\"notice\":\"Adds new token mappings\"},\"addSupportForPairIfNeeded(address,address)\":{\"notice\":\"Adds support for a given pair if the oracle didn't support it already. If called for a pair that is already supported, then nothing will happen. This function will let the oracle take some actions to configure the pair, in preparation for future quotes.\"},\"addUSDStablecoins(address[])\":{\"notice\":\"Adds new tokens that should be considered USD stablecoins\"},\"canSupportPair(address,address)\":{\"notice\":\"Returns whether this oracle can support this pair of tokens\"},\"mappedToken(address)\":{\"notice\":\"Returns the mapping of the given token, if it exists. If it doesn't, then the original token is returned\"},\"maxDelay()\":{\"notice\":\"Returns how old the last price update can be before the oracle reverts by considering it too old\"},\"planForPair(address,address)\":{\"notice\":\"Returns the pricing plan that will be used when quoting the given pair\"},\"quote(address,uint128,address)\":{\"notice\":\"Returns a quote, based on the given tokens and amount\"},\"reconfigureSupportForPair(address,address)\":{\"notice\":\"Reconfigures support for a given pair. This function will let the oracle take some actions to configure the pair, in preparation for future quotes. Can be called many times in order to let the oracle re-configure for a new context.\"},\"registry()\":{\"notice\":\"Returns the Chainlink feed registry\"},\"setMaxDelay(uint32)\":{\"notice\":\"Sets a new max delay\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/ChainlinkOracle.sol\":\"ChainlinkOracle\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Denominations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Denominations {\\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  address public constant BTC = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\\n\\n  // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\\n  address public constant USD = address(840);\\n  address public constant GBP = address(826);\\n  address public constant EUR = address(978);\\n  address public constant JPY = address(392);\\n  address public constant KRW = address(410);\\n  address public constant CNY = address(156);\\n  address public constant AUD = address(36);\\n  address public constant CAD = address(124);\\n  address public constant CHF = address(756);\\n  address public constant ARS = address(32);\\n  address public constant PHP = address(608);\\n  address public constant NZD = address(554);\\n  address public constant SGD = address(702);\\n  address public constant NGN = address(566);\\n  address public constant ZAR = address(710);\\n  address public constant RUB = address(643);\\n  address public constant INR = address(356);\\n  address public constant BRL = address(986);\\n}\\n\",\"keccak256\":\"0xee406990d671c95993762c3ee15c77987ee35c3682357c419ff73747a728fc4d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer()\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n  \\n  function latestTimestamp()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function latestRound()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function getAnswer(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n\\n  function getTimestamp(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  event AnswerUpdated(\\n    int256 indexed current,\\n    uint256 indexed roundId,\\n    uint256 updatedAt\\n  );\\n\\n  event NewRound(\\n    uint256 indexed roundId,\\n    address indexed startedBy,\\n    uint256 startedAt\\n  );\\n}\\n\",\"keccak256\":\"0x1a5dc81544a6479f64437a8aca22c869769dd54ee3522c7ef5ebae0d329a28f0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\\n{\\n}\\n\",\"keccak256\":\"0xe8f8d98b515366730824d24269c7267eee7f0288cf737db8659acbb0c751eb53\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./AggregatorV2V3Interface.sol\\\";\\n\\ninterface FeedRegistryInterface {\\n  struct Phase {\\n    uint16 phaseId;\\n    uint80 startingAggregatorRoundId;\\n    uint80 endingAggregatorRoundId;\\n  }\\n\\n  event FeedProposed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed proposedAggregator,\\n    address currentAggregator,\\n    address sender\\n  );\\n  event FeedConfirmed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed latestAggregator,\\n    address previousAggregator,\\n    uint16 nextPhaseId,\\n    address sender\\n  );\\n\\n  // V3 AggregatorV3Interface\\n\\n  function decimals(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function latestRoundData(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function getRoundData(\\n    address base,\\n    address quote,\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // V2 AggregatorInterface\\n\\n  function latestAnswer(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      int256 answer\\n    );\\n\\n  function latestTimestamp(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 timestamp\\n    );\\n\\n  function latestRound(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 roundId\\n    );\\n\\n  function getAnswer(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      int256 answer\\n    );\\n\\n  function getTimestamp(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 timestamp\\n    );\\n\\n  // Registry getters\\n\\n  function getFeed(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      AggregatorV2V3Interface aggregator\\n    );\\n\\n  function getPhaseFeed(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  )\\n    external\\n    view\\n    returns (\\n      AggregatorV2V3Interface aggregator\\n    );\\n\\n  function isFeedEnabled(\\n    address aggregator\\n  )\\n    external\\n    view\\n    returns (\\n      bool\\n    );\\n\\n  function getPhase(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  )\\n    external\\n    view\\n    returns (\\n      Phase memory phase\\n    );\\n\\n  // Round helpers\\n\\n  function getRoundFeed(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      AggregatorV2V3Interface aggregator\\n    );\\n\\n  function getPhaseRange(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 startingRoundId,\\n      uint80 endingRoundId\\n    );\\n\\n  function getPreviousRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external\\n    view\\n    returns (\\n      uint80 previousRoundId\\n    );\\n\\n  function getNextRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external\\n    view\\n    returns (\\n      uint80 nextRoundId\\n    );\\n\\n  // Feed management\\n\\n  function proposeFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  function confirmFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  // Proposed aggregator\\n\\n  function getProposedFeed(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      AggregatorV2V3Interface proposedAggregator\\n    );\\n\\n  function proposedGetRoundData(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function proposedLatestRoundData(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // Phases\\n  function getCurrentPhaseId(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint16 currentPhaseId\\n    );\\n}\\n\",\"keccak256\":\"0x016d081db2915d0455d148fe805f409200d214bb3c7dfad6e4de139e65d7f893\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/interfaces/oracles/IChainlinkOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol';\\nimport './IPriceOracle.sol';\\n\\n/// @title An implementation of IPriceOracle that uses Chainlink feeds\\n/// @notice This oracle will attempt to use all available feeds to determine prices between pairs\\ninterface IChainlinkOracle is IPriceOracle {\\n  /// @notice The plan that will be used to calculate quotes for a given pair\\n  enum PricingPlan {\\n    // There is no plan calculated\\n    NONE,\\n    // Will use the ETH/USD feed\\n    ETH_USD_PAIR,\\n    // Will use a token/USD feed\\n    TOKEN_USD_PAIR,\\n    // Will use a token/ETH feed\\n    TOKEN_ETH_PAIR,\\n    // Will use tokenIn/USD and tokenOut/USD feeds\\n    TOKEN_TO_USD_TO_TOKEN_PAIR,\\n    // Will use tokenIn/ETH and tokenOut/ETH feeds\\n    TOKEN_TO_ETH_TO_TOKEN_PAIR,\\n    // Will use tokenA/USD, tokenB/ETH and ETH/USD feeds\\n    TOKEN_A_TO_USD_TO_ETH_TO_TOKEN_B,\\n    // Will use tokenA/ETH, tokenB/USD and ETH/USD feeds\\n    TOKEN_A_TO_ETH_TO_USD_TO_TOKEN_B\\n  }\\n\\n  /// @notice Emitted when the oracle add supports for a new pair\\n  /// @param tokenA One of the pair's tokens\\n  /// @param tokenB The other of the pair's tokens\\n  event AddedSupportForPairInChainlinkOracle(address tokenA, address tokenB);\\n\\n  /// @notice Emitted when new tokens are considered USD\\n  /// @param tokens The new tokens\\n  event TokensConsideredUSD(address[] tokens);\\n\\n  /// @notice Emitted when new mappings are added\\n  /// @param tokens The tokens\\n  /// @param mappings Their new mappings\\n  event MappingsAdded(address[] tokens, address[] mappings);\\n\\n  /// @notice Emitted when a new max delay is set\\n  /// @param newMaxDelay The new max delay\\n  event MaxDelaySet(uint32 newMaxDelay);\\n\\n  /// @notice Thrown when the price is non-positive\\n  error InvalidPrice();\\n\\n  /// @notice Thrown when the last price update was too long ago\\n  error LastUpdateIsTooOld();\\n\\n  /// @notice Thrown when one of the parameters is a zero address\\n  error ZeroAddress();\\n\\n  /// @notice Thrown when the given max delay is zero\\n  error ZeroMaxDelay();\\n\\n  /// @notice Thrown when trying to configure a pair that is not supported\\n  error PairNotSupported();\\n\\n  /// @notice Thrown when the input for adding mappings in invalid\\n  error InvalidMappingsInput();\\n\\n  /// @notice Returns the Chainlink feed registry\\n  /// @return The Chainlink registry\\n  function registry() external view returns (FeedRegistryInterface);\\n\\n  /// @notice Returns how old the last price update can be before the oracle reverts by considering it too old\\n  /// @return How old the last price update can be in seconds\\n  function maxDelay() external view returns (uint32);\\n\\n  /// @notice Returns the address of the WETH ERC-20 token\\n  /// @return The address of the token\\n  // solhint-disable-next-line func-name-mixedcase\\n  function WETH() external view returns (address);\\n\\n  /// @notice Returns the pricing plan that will be used when quoting the given pair\\n  /// @dev It is expected that _tokenA < _tokenB\\n  /// @return The pricing plan that will be used\\n  function planForPair(address _tokenA, address _tokenB) external view returns (PricingPlan);\\n\\n  /// @notice Returns the mapping of the given token, if it exists. If it doesn't, then the original token is returned\\n  /// @return If it exists, the mapping is returned. Otherwise, the original token is returned\\n  function mappedToken(address _token) external view returns (address);\\n\\n  /// @notice Adds new tokens that should be considered USD stablecoins\\n  /// @param _addresses The addresses of the tokens\\n  function addUSDStablecoins(address[] calldata _addresses) external;\\n\\n  /// @notice Adds new token mappings\\n  /// @param _addresses The addresses of the tokens\\n  /// @param _mappings The addresses of their mappings\\n  function addMappings(address[] calldata _addresses, address[] calldata _mappings) external;\\n\\n  /// @notice Sets a new max delay\\n  /// @param _maxDelay The new max delay\\n  function setMaxDelay(uint32 _maxDelay) external;\\n}\\n\",\"keccak256\":\"0xb438f562ba8f86df48e30008d5faa68146f1de6bc20d1d47dd6d213c2f23cfc4\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/oracles/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for an oracle that provides price quotes\\n/// @notice These methods allow users to add support for pairs, and then ask for quotes\\ninterface IPriceOracle {\\n  /// @notice Returns whether this oracle can support this pair of tokens\\n  /// @dev _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\\n  /// @param _tokenA One of the pair's tokens\\n  /// @param _tokenB The other of the pair's tokens\\n  /// @return Whether the given pair of tokens can be supported by the oracle\\n  function canSupportPair(address _tokenA, address _tokenB) external view returns (bool);\\n\\n  /// @notice Returns a quote, based on the given tokens and amount\\n  /// @param _tokenIn The token that will be provided\\n  /// @param _amountIn The amount that will be provided\\n  /// @param _tokenOut The token we would like to quote\\n  /// @return _amountOut How much _tokenOut will be returned in exchange for _amountIn amount of _tokenIn\\n  function quote(\\n    address _tokenIn,\\n    uint128 _amountIn,\\n    address _tokenOut\\n  ) external view returns (uint256 _amountOut);\\n\\n  /// @notice Reconfigures support for a given pair. This function will let the oracle take some actions to configure the pair, in\\n  /// preparation for future quotes. Can be called many times in order to let the oracle re-configure for a new context.\\n  /// @dev Will revert if pair cannot be supported. _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\\n  /// @param _tokenA One of the pair's tokens\\n  /// @param _tokenB The other of the pair's tokens\\n  function reconfigureSupportForPair(address _tokenA, address _tokenB) external;\\n\\n  /// @notice Adds support for a given pair if the oracle didn't support it already. If called for a pair that is already supported,\\n  /// then nothing will happen. This function will let the oracle take some actions to configure the pair, in preparation for future quotes.\\n  /// @dev Will revert if pair cannot be supported. _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\\n  /// @param _tokenA One of the pair's tokens\\n  /// @param _tokenB The other of the pair's tokens\\n  function addSupportForPairIfNeeded(address _tokenA, address _tokenB) external;\\n}\\n\",\"keccak256\":\"0xf1ebb97588db58c0e2112550f81a25b19ee185be3fd3a2375b5394674bd22606\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/TokenSorting.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >0.6;\\n\\n/// @title TokenSorting library\\n/// @notice Provides functions to sort tokens easily\\nlibrary TokenSorting {\\n  /// @notice Takes two tokens, and returns them sorted\\n  /// @param _tokenA One of the tokens\\n  /// @param _tokenB The other token\\n  /// @return __tokenA The first of the tokens\\n  /// @return __tokenB The second of the tokens\\n  function sortTokens(address _tokenA, address _tokenB) internal pure returns (address __tokenA, address __tokenB) {\\n    (__tokenA, __tokenB) = _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA);\\n  }\\n}\\n\",\"keccak256\":\"0xe087aec6da5b5ccf145a432a5155e338cd847910599562909d04b0116a233473\",\"license\":\"GPL-2.0-or-later\"},\"contracts/oracles/ChainlinkOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.7 <0.9.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '@chainlink/contracts/src/v0.8/Denominations.sol';\\nimport '../interfaces/oracles/IChainlinkOracle.sol';\\nimport '../libraries/TokenSorting.sol';\\nimport '../utils/Governable.sol';\\n\\ncontract ChainlinkOracle is Governable, IChainlinkOracle {\\n  /// @inheritdoc IChainlinkOracle\\n  mapping(address => mapping(address => PricingPlan)) public planForPair;\\n  /// @inheritdoc IChainlinkOracle\\n  FeedRegistryInterface public immutable registry;\\n  /// @inheritdoc IChainlinkOracle\\n  // solhint-disable-next-line var-name-mixedcase\\n  address public immutable WETH;\\n  /// @inheritdoc IChainlinkOracle\\n  uint32 public maxDelay;\\n\\n  // solhint-disable private-vars-leading-underscore\\n  // Addresses in Ethereum Mainnet\\n  address private constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n  address private constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n  address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n  address private constant RENBTC = 0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D;\\n  address private constant WBTC = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n  int8 private constant USD_DECIMALS = 8;\\n  int8 private constant ETH_DECIMALS = 18;\\n  // solhint-enable private-vars-leading-underscore\\n\\n  mapping(address => bool) internal _shouldBeConsideredUSD;\\n  mapping(address => address) internal _tokenMappings;\\n\\n  constructor(\\n    // solhint-disable-next-line var-name-mixedcase\\n    address _WETH,\\n    FeedRegistryInterface _registry,\\n    uint32 _maxDelay,\\n    address _governor\\n  ) Governable(_governor) {\\n    if (_WETH == address(0) || address(_registry) == address(0)) revert ZeroAddress();\\n    if (_maxDelay == 0) revert ZeroMaxDelay();\\n    registry = _registry;\\n    maxDelay = _maxDelay;\\n    WETH = _WETH;\\n  }\\n\\n  /// @inheritdoc IPriceOracle\\n  function canSupportPair(address _tokenA, address _tokenB) external view returns (bool) {\\n    (address __tokenA, address __tokenB) = TokenSorting.sortTokens(_tokenA, _tokenB);\\n    PricingPlan _plan = _determinePricingPlan(__tokenA, __tokenB);\\n    return _plan != PricingPlan.NONE;\\n  }\\n\\n  /// @inheritdoc IPriceOracle\\n  function quote(\\n    address _tokenIn,\\n    uint128 _amountIn,\\n    address _tokenOut\\n  ) external view returns (uint256 _amountOut) {\\n    (address _tokenA, address _tokenB) = TokenSorting.sortTokens(_tokenIn, _tokenOut);\\n    PricingPlan _plan = planForPair[_tokenA][_tokenB];\\n    if (_plan == PricingPlan.NONE) revert PairNotSupported();\\n\\n    int8 _inDecimals = _getDecimals(_tokenIn);\\n    int8 _outDecimals = _getDecimals(_tokenOut);\\n\\n    if (_plan <= PricingPlan.TOKEN_ETH_PAIR) {\\n      return _getDirectPrice(_tokenIn, _tokenOut, _inDecimals, _outDecimals, _amountIn, _plan);\\n    } else if (_plan <= PricingPlan.TOKEN_TO_ETH_TO_TOKEN_PAIR) {\\n      return _getPriceSameBase(_tokenIn, _tokenOut, _inDecimals, _outDecimals, _amountIn, _plan);\\n    } else {\\n      return _getPriceDifferentBases(_tokenIn, _tokenOut, _inDecimals, _outDecimals, _amountIn, _plan);\\n    }\\n  }\\n\\n  /// @inheritdoc IPriceOracle\\n  function reconfigureSupportForPair(address _tokenA, address _tokenB) external {\\n    _addSupportForPair(_tokenA, _tokenB);\\n  }\\n\\n  /// @inheritdoc IPriceOracle\\n  function addSupportForPairIfNeeded(address _tokenA, address _tokenB) external {\\n    (address __tokenA, address __tokenB) = TokenSorting.sortTokens(_tokenA, _tokenB);\\n    if (planForPair[__tokenA][__tokenB] == PricingPlan.NONE) {\\n      _addSupportForPair(_tokenA, _tokenB);\\n    }\\n  }\\n\\n  function _addSupportForPair(address _tokenA, address _tokenB) internal virtual {\\n    (address __tokenA, address __tokenB) = TokenSorting.sortTokens(_tokenA, _tokenB);\\n    PricingPlan _plan = _determinePricingPlan(__tokenA, __tokenB);\\n    if (_plan == PricingPlan.NONE) revert PairNotSupported();\\n    planForPair[__tokenA][__tokenB] = _plan;\\n    emit AddedSupportForPairInChainlinkOracle(__tokenA, __tokenB);\\n  }\\n\\n  /// @inheritdoc IChainlinkOracle\\n  function addUSDStablecoins(address[] calldata _addresses) external onlyGovernor {\\n    for (uint256 i; i < _addresses.length; i++) {\\n      _shouldBeConsideredUSD[_addresses[i]] = true;\\n    }\\n    emit TokensConsideredUSD(_addresses);\\n  }\\n\\n  /// @inheritdoc IChainlinkOracle\\n  function addMappings(address[] calldata _addresses, address[] calldata _mappings) external onlyGovernor {\\n    if (_addresses.length != _mappings.length) revert InvalidMappingsInput();\\n    for (uint256 i; i < _addresses.length; i++) {\\n      _tokenMappings[_addresses[i]] = _mappings[i];\\n    }\\n    emit MappingsAdded(_addresses, _mappings);\\n  }\\n\\n  /// @inheritdoc IChainlinkOracle\\n  function setMaxDelay(uint32 _maxDelay) external onlyGovernor {\\n    maxDelay = _maxDelay;\\n    emit MaxDelaySet(_maxDelay);\\n  }\\n\\n  /// @inheritdoc IChainlinkOracle\\n  function mappedToken(address _token) public view returns (address) {\\n    if (block.chainid == 1 && (_token == RENBTC || _token == WBTC)) {\\n      return Denominations.BTC;\\n    } else {\\n      address _mapping = _tokenMappings[_token];\\n      return _mapping != address(0) ? _mapping : _token;\\n    }\\n  }\\n\\n  /** Handles prices when the pair is either ETH/USD, token/ETH or token/USD */\\n  function _getDirectPrice(\\n    address _tokenIn,\\n    address _tokenOut,\\n    int8 _inDecimals,\\n    int8 _outDecimals,\\n    uint256 _amountIn,\\n    PricingPlan _plan\\n  ) internal view returns (uint256) {\\n    uint256 _price;\\n    int8 _resultDecimals = _plan == PricingPlan.TOKEN_ETH_PAIR ? ETH_DECIMALS : USD_DECIMALS;\\n    bool _needsInverting = _isUSD(_tokenIn) || (_plan == PricingPlan.TOKEN_ETH_PAIR && _tokenIn == WETH);\\n\\n    if (_plan == PricingPlan.ETH_USD_PAIR) {\\n      _price = _getETHUSD();\\n    } else if (_plan == PricingPlan.TOKEN_USD_PAIR) {\\n      _price = _getPriceAgainstUSD(_isUSD(_tokenOut) ? _tokenIn : _tokenOut);\\n    } else if (_plan == PricingPlan.TOKEN_ETH_PAIR) {\\n      _price = _getPriceAgainstETH(_tokenOut == WETH ? _tokenIn : _tokenOut);\\n    }\\n    if (!_needsInverting) {\\n      return _adjustDecimals(_price * _amountIn, _outDecimals - _resultDecimals - _inDecimals);\\n    } else {\\n      return _adjustDecimals(_adjustDecimals(_amountIn, _resultDecimals + _outDecimals) / _price, -_inDecimals);\\n    }\\n  }\\n\\n  /** Handles prices when both tokens share the same base (either ETH or USD) */\\n  function _getPriceSameBase(\\n    address _tokenIn,\\n    address _tokenOut,\\n    int8 _inDecimals,\\n    int8 _outDecimals,\\n    uint256 _amountIn,\\n    PricingPlan _plan\\n  ) internal view returns (uint256) {\\n    address _base = _plan == PricingPlan.TOKEN_TO_USD_TO_TOKEN_PAIR ? Denominations.USD : Denominations.ETH;\\n    uint256 _tokenInToBase = _callRegistry(mappedToken(_tokenIn), _base);\\n    uint256 _tokenOutToBase = _callRegistry(mappedToken(_tokenOut), _base);\\n    return _adjustDecimals((_amountIn * _tokenInToBase) / _tokenOutToBase, _outDecimals - _inDecimals);\\n  }\\n\\n  /** Handles prices when one of the tokens uses ETH as the base, and the other USD */\\n  function _getPriceDifferentBases(\\n    address _tokenIn,\\n    address _tokenOut,\\n    int8 _inDecimals,\\n    int8 _outDecimals,\\n    uint256 _amountIn,\\n    PricingPlan _plan\\n  ) internal view returns (uint256) {\\n    bool _isTokenInUSD = (_plan == PricingPlan.TOKEN_A_TO_USD_TO_ETH_TO_TOKEN_B && _tokenIn < _tokenOut) ||\\n      (_plan == PricingPlan.TOKEN_A_TO_ETH_TO_USD_TO_TOKEN_B && _tokenIn > _tokenOut);\\n    uint256 _ethToUSDPrice = _getETHUSD();\\n    if (_isTokenInUSD) {\\n      uint256 _tokenInToUSD = _getPriceAgainstUSD(_tokenIn);\\n      uint256 _tokenOutToETH = _getPriceAgainstETH(_tokenOut);\\n      uint256 _adjustedInUSDValue = _adjustDecimals(_amountIn * _tokenInToUSD, _outDecimals - _inDecimals + ETH_DECIMALS);\\n      return _adjustedInUSDValue / _ethToUSDPrice / _tokenOutToETH;\\n    } else {\\n      uint256 _tokenInToETH = _getPriceAgainstETH(_tokenIn);\\n      uint256 _tokenOutToUSD = _getPriceAgainstUSD(_tokenOut);\\n      return _adjustDecimals((_amountIn * _tokenInToETH * _ethToUSDPrice) / _tokenOutToUSD, _outDecimals - _inDecimals - ETH_DECIMALS);\\n    }\\n  }\\n\\n  function _getPriceAgainstUSD(address _token) internal view returns (uint256) {\\n    return _isUSD(_token) ? 1e8 : _callRegistry(mappedToken(_token), Denominations.USD);\\n  }\\n\\n  function _getPriceAgainstETH(address _token) internal view returns (uint256) {\\n    return _token == WETH ? 1e18 : _callRegistry(mappedToken(_token), Denominations.ETH);\\n  }\\n\\n  function _determinePricingPlan(address _tokenA, address _tokenB) internal view virtual returns (PricingPlan) {\\n    bool _isTokenAUSD = _isUSD(_tokenA);\\n    bool _isTokenBUSD = _isUSD(_tokenB);\\n    bool _isTokenAETH = _tokenA == WETH;\\n    bool _isTokenBETH = _tokenB == WETH;\\n    if ((_isTokenAETH && _isTokenBUSD) || (_isTokenAUSD && _isTokenBETH)) {\\n      // Note: there are stablecoins/ETH pairs on Chainlink, but they are updated less often than the USD/ETH pair.\\n      // That's why we prefer to use the USD/ETH pair instead\\n      return PricingPlan.ETH_USD_PAIR;\\n    } else if (_isTokenBUSD && !_isTokenAUSD) {\\n      return _tryWithBases(_tokenA, PricingPlan.TOKEN_USD_PAIR, PricingPlan.TOKEN_A_TO_ETH_TO_USD_TO_TOKEN_B);\\n    } else if (_isTokenAUSD && !_isTokenBUSD) {\\n      return _tryWithBases(_tokenB, PricingPlan.TOKEN_USD_PAIR, PricingPlan.TOKEN_A_TO_USD_TO_ETH_TO_TOKEN_B);\\n    } else if (_isTokenBETH) {\\n      return _tryWithBases(_tokenA, PricingPlan.TOKEN_A_TO_USD_TO_ETH_TO_TOKEN_B, PricingPlan.TOKEN_ETH_PAIR);\\n    } else if (_isTokenAETH) {\\n      return _tryWithBases(_tokenB, PricingPlan.TOKEN_A_TO_ETH_TO_USD_TO_TOKEN_B, PricingPlan.TOKEN_ETH_PAIR);\\n    } else if (_exists(_tokenA, Denominations.USD)) {\\n      return _tryWithBases(_tokenB, PricingPlan.TOKEN_TO_USD_TO_TOKEN_PAIR, PricingPlan.TOKEN_A_TO_USD_TO_ETH_TO_TOKEN_B);\\n    } else if (_exists(_tokenA, Denominations.ETH)) {\\n      return _tryWithBases(_tokenB, PricingPlan.TOKEN_A_TO_ETH_TO_USD_TO_TOKEN_B, PricingPlan.TOKEN_TO_ETH_TO_TOKEN_PAIR);\\n    }\\n    return PricingPlan.NONE;\\n  }\\n\\n  function _tryWithBases(\\n    address _token,\\n    PricingPlan _ifUSD,\\n    PricingPlan _ifETH\\n  ) internal view returns (PricingPlan) {\\n    // Note: we are prioritizing plans that have fewer external calls\\n    (address _firstBase, PricingPlan _firstResult, address _secondBaseBase, PricingPlan _secondResult) = _ifUSD < _ifETH\\n      ? (Denominations.USD, _ifUSD, Denominations.ETH, _ifETH)\\n      : (Denominations.ETH, _ifETH, Denominations.USD, _ifUSD);\\n    if (_exists(_token, _firstBase)) {\\n      return _firstResult;\\n    } else if (_exists(_token, _secondBaseBase)) {\\n      return _secondResult;\\n    } else {\\n      return PricingPlan.NONE;\\n    }\\n  }\\n\\n  function _exists(address _base, address _quote) internal view returns (bool) {\\n    try registry.latestRoundData(mappedToken(_base), _quote) returns (uint80, int256 _price, uint256, uint256, uint80) {\\n      return _price > 0;\\n    } catch {\\n      return false;\\n    }\\n  }\\n\\n  function _adjustDecimals(uint256 _amount, int256 _factor) internal pure returns (uint256) {\\n    if (_factor < 0) {\\n      return _amount / (10**uint256(-_factor));\\n    } else {\\n      return _amount * (10**uint256(_factor));\\n    }\\n  }\\n\\n  function _getDecimals(address _token) internal view returns (int8) {\\n    return int8(IERC20Metadata(_token).decimals());\\n  }\\n\\n  function _callRegistry(address _base, address _quote) internal view returns (uint256) {\\n    (, int256 _price, , uint256 _updatedAt, ) = registry.latestRoundData(_base, _quote);\\n    if (_price <= 0) revert InvalidPrice();\\n    if (maxDelay < block.timestamp && _updatedAt < block.timestamp - maxDelay) revert LastUpdateIsTooOld();\\n    return uint256(_price);\\n  }\\n\\n  function _getETHUSD() internal view returns (uint256) {\\n    return _callRegistry(Denominations.ETH, Denominations.USD);\\n  }\\n\\n  function _isUSD(address _token) internal view returns (bool) {\\n    // We are doing this, to avoid expensive storage read\\n    bool _isHardcodedUSDInMainnet = block.chainid == 1 && (_token == DAI || _token == USDC || _token == USDT);\\n    return _isHardcodedUSDInMainnet || _shouldBeConsideredUSD[_token];\\n  }\\n}\\n\",\"keccak256\":\"0xfb694e94c60c3fdc70e74b7273c92a786ac1088fa0f578fe7cfe2a86d1a58a37\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\n\\ninterface IGovernable {\\n  event PendingGovernorSet(address pendingGovernor);\\n  event PendingGovernorAccepted();\\n\\n  function setPendingGovernor(address _pendingGovernor) external;\\n\\n  function acceptPendingGovernor() external;\\n\\n  function governor() external view returns (address);\\n\\n  function pendingGovernor() external view returns (address);\\n\\n  function isGovernor(address _account) external view returns (bool _isGovernor);\\n\\n  function isPendingGovernor(address _account) external view returns (bool _isPendingGovernor);\\n}\\n\\nabstract contract Governable is IGovernable {\\n  address private _governor;\\n  address private _pendingGovernor;\\n\\n  constructor(address __governor) {\\n    require(__governor != address(0), 'Governable: zero address');\\n    _governor = __governor;\\n  }\\n\\n  function governor() external view override returns (address) {\\n    return _governor;\\n  }\\n\\n  function pendingGovernor() external view override returns (address) {\\n    return _pendingGovernor;\\n  }\\n\\n  function setPendingGovernor(address __pendingGovernor) external virtual override onlyGovernor {\\n    _setPendingGovernor(__pendingGovernor);\\n  }\\n\\n  function _setPendingGovernor(address __pendingGovernor) internal {\\n    require(__pendingGovernor != address(0), 'Governable: zero address');\\n    _pendingGovernor = __pendingGovernor;\\n    emit PendingGovernorSet(__pendingGovernor);\\n  }\\n\\n  function acceptPendingGovernor() external virtual override onlyPendingGovernor {\\n    _acceptPendingGovernor();\\n  }\\n\\n  function _acceptPendingGovernor() internal {\\n    require(_pendingGovernor != address(0), 'Governable: no pending governor');\\n    _governor = _pendingGovernor;\\n    _pendingGovernor = address(0);\\n    emit PendingGovernorAccepted();\\n  }\\n\\n  function isGovernor(address _account) public view override returns (bool _isGovernor) {\\n    return _account == _governor;\\n  }\\n\\n  function isPendingGovernor(address _account) public view override returns (bool _isPendingGovernor) {\\n    return _account == _pendingGovernor;\\n  }\\n\\n  modifier onlyGovernor() {\\n    require(isGovernor(msg.sender), 'Governable: only governor');\\n    _;\\n  }\\n\\n  modifier onlyPendingGovernor() {\\n    require(isPendingGovernor(msg.sender), 'Governable: only pending governor');\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x3e174ea3fad0b05bfa210572348adbb36d10da19fb95765a42bbfc274c6eb9da\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001c7f38038062001c7f833981016040819052620000349162000152565b806001600160a01b038116620000905760405162461bcd60e51b815260206004820152601860248201527f476f7665726e61626c653a207a65726f20616464726573730000000000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0392831617905584161580620000c257506001600160a01b038316155b15620000e15760405163d92e233d60e01b815260040160405180910390fd5b63ffffffff82166200010657604051632c4f52fb60e21b815260040160405180910390fd5b506001600160a01b039182166080526003805463ffffffff191663ffffffff929092169190911790551660a052620001c2565b6001600160a01b03811681146200014f57600080fd5b50565b600080600080608085870312156200016957600080fd5b8451620001768162000139565b6020860151909450620001898162000139565b604086015190935063ffffffff81168114620001a457600080fd5b6060860151909250620001b78162000139565b939692955090935050565b60805160a051611a6d620002126000396000818161023101528181610a9701528181610c6d01528181610d2101526112b80152600081816101d6015281816111a001526113960152611a6d6000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80637f55db3a116100a2578063e3056a3411610071578063e3056a3414610275578063e43581b814610286578063e82138cd146102a8578063ed49d2f8146102e3578063f235757f1461030857600080fd5b80637f55db3a146101f8578063a513355f1461020b578063ad5c46481461022c578063df08aed51461025357600080fd5b80634df3cad6116100e95780634df3cad6146101755780636edc66321461018857806372c12c871461019b578063734273fd146101ae5780637b103999146101d157600080fd5b80630c340a241461011b57806313f6986d146101455780631d4ef30a1461014f5780633103016214610162575b600080fd5b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b61014d61031b565b005b61014d61015d3660046114c6565b61038e565b61014d610170366004611532565b6104bc565b61012861018336600461156f565b610535565b61014d61019636600461158a565b6105dd565b61014d6101a93660046115cc565b6106b7565b6101c16101bc3660046115cc565b6106c5565b604051901515815260200161013c565b6101287f000000000000000000000000000000000000000000000000000000000000000081565b61014d6102063660046115cc565b610708565b61021e6102193660046115ff565b61076c565b60405190815260200161013c565b6101287f000000000000000000000000000000000000000000000000000000000000000081565b6101c161026136600461156f565b6001546001600160a01b0391821691161490565b6001546001600160a01b0316610128565b6101c161029436600461156f565b6000546001600160a01b0391821691161490565b6102d66102b63660046115cc565b600260209081526000928352604080842090915290825290205460ff1681565b60405161013c9190611666565b6003546102f39063ffffffff1681565b60405163ffffffff909116815260200161013c565b61014d61031636600461156f565b61087d565b6001546001600160a01b031633146103845760405162461bcd60e51b815260206004820152602160248201527f476f7665726e61626c653a206f6e6c792070656e64696e6720676f7665726e6f6044820152603960f91b60648201526084015b60405180910390fd5b61038c6108b3565b565b6000546001600160a01b031633146103b85760405162461bcd60e51b815260040161037b9061168e565b8281146103d8576040516306e3b91560e11b815260040160405180910390fd5b60005b83811015610478578282828181106103f5576103f56116c5565b905060200201602081019061040a919061156f565b60056000878785818110610420576104206116c5565b9050602002016020810190610435919061156f565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b0319169290911691909117905580610470816116f1565b9150506103db565b507f25967af46669513d9b32b10bce9dc8b094f9638e01d68bd4253fb634873b3d17848484846040516104ae9493929190611753565b60405180910390a150505050565b6000546001600160a01b031633146104e65760405162461bcd60e51b815260040161037b9061168e565b6003805463ffffffff191663ffffffff83169081179091556040519081527f55ab0355f542386898a10e20731ebdfe9303c36ea9cbc480909adb8beaf4a7c0906020015b60405180910390a150565b600046600114801561058957506001600160a01b03821673eb4c2781e4eba804ce9a9803c67d0893436bb27d148061058957506001600160a01b038216732260fac5e5542a773aa44fbcfedf7c193bc2c599145b156105a9575073bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb919050565b6001600160a01b0380831660009081526005602052604090205416806105cf57826105d1565b805b9392505050565b919050565b6000546001600160a01b031633146106075760405162461bcd60e51b815260040161037b9061168e565b60005b818110156106795760016004600085858581811061062a5761062a6116c5565b905060200201602081019061063f919061156f565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610671816116f1565b91505061060a565b507f0e1316bdb62d8b87b8c288a81e4bc638fbf187056521cd5f525a3c70dd812abf82826040516106ab929190611785565b60405180910390a15050565b6106c1828261095b565b5050565b60008060006106d48585610a3e565b9150915060006106e48383610a6f565b905060008160078111156106fa576106fa611650565b141593505050505b92915050565b6000806107158484610a3e565b909250905060006001600160a01b0380841660009081526002602090815260408083209386168352929052205460ff16600781111561075657610756611650565b141561076657610766848461095b565b50505050565b600080600061077b8685610a3e565b6001600160a01b03808316600090815260026020908152604080832093851683529290529081205492945090925060ff909116908160078111156107c1576107c1611650565b14156107e0576040516365db466f60e01b815260040160405180910390fd5b60006107eb88610bb1565b905060006107f887610bb1565b9050600383600781111561080e5761080e611650565b116108365761082a898884848c6001600160801b031688610c15565b955050505050506105d1565b600583600781111561084a5761084a611650565b116108665761082a898884848c6001600160801b031688610dcf565b61082a898884848c6001600160801b031688610e67565b6000546001600160a01b031633146108a75760405162461bcd60e51b815260040161037b9061168e565b6108b081610f9e565b50565b6001546001600160a01b031661090b5760405162461bcd60e51b815260206004820152601f60248201527f476f7665726e61626c653a206e6f2070656e64696e6720676f7665726e6f7200604482015260640161037b565b60018054600080546001600160a01b03199081166001600160a01b0384161782559091169091556040517fdc57ca23c46d823853915ed5a090ca0ee9db5eb6a46f5c58e1c9158de861fd769190a1565b6000806109688484610a3e565b9150915060006109788383610a6f565b9050600081600781111561098e5761098e611650565b14156109ad576040516365db466f60e01b815260040160405180910390fd5b6001600160a01b038084166000908152600260209081526040808320938616835292905220805482919060ff191660018360078111156109ef576109ef611650565b0217905550604080516001600160a01b038086168252841660208201527fa0f87b02ca47ea06fb7d8fd30abf826222301c4e0cc359211c4254d49b4736ad910160405180910390a15050505050565b600080826001600160a01b0316846001600160a01b031610610a61578284610a64565b83835b909590945092505050565b600080610a7b84611042565b90506000610a8884611042565b90506001600160a01b038581167f0000000000000000000000000000000000000000000000000000000000000000821690811491861614818015610ac95750825b80610ad95750838015610ad95750805b15610aeb576001945050505050610702565b828015610af6575083155b15610b1357610b0887600260076110e7565b945050505050610702565b838015610b1e575082155b15610b3057610b0886600260066110e7565b8015610b4357610b0887600660036110e7565b8115610b5657610b0886600760036110e7565b610b628761034861119c565b15610b7457610b0886600460066110e7565b610b928773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61119c565b15610ba457610b0886600760056110e7565b5060009695505050505050565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070291906117a1565b600080806003846007811115610c2d57610c2d611650565b14610c39576008610c3c565b60125b90506000610c498a611042565b80610ca157506003856007811115610c6357610c63611650565b148015610ca157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168a6001600160a01b0316145b90506001856007811115610cb757610cb7611650565b1415610ccc57610cc561125a565b9250610d67565b6002856007811115610ce057610ce0611650565b1415610d0257610cc5610cf28a611042565b610cfc5789611281565b8a611281565b6003856007811115610d1657610d16611650565b1415610d6757610d647f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168a6001600160a01b031614610d5e57896112b4565b8a6112b4565b92505b80610da057610d96610d7987856117c4565b89610d84858b6117e3565b610d8e91906117e3565b60000b611324565b9350505050610dc5565b610d9683610db288610d8e8b87611824565b610dbc9190611867565b610d8e8a611889565b9695505050505050565b6000806004836007811115610de657610de6611650565b14610e055773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee610e09565b6103485b90506000610e1f610e198a610535565b83611368565b90506000610e35610e2f8a610535565b84611368565b9050610e5981610e4584896117c4565b610e4f9190611867565b610d8e8a8a6117e3565b9a9950505050505050505050565b6000806006836007811115610e7e57610e7e611650565b148015610e9c5750866001600160a01b0316886001600160a01b0316105b80610ed457506007836007811115610eb657610eb6611650565b148015610ed45750866001600160a01b0316886001600160a01b0316115b90506000610ee061125a565b90508115610f4a576000610ef38a611281565b90506000610f008a6112b4565b90506000610f27610f11848a6117c4565b6012610f1d8d8d6117e3565b610d8e9190611824565b905081610f348583611867565b610f3e9190611867565b95505050505050610dc5565b6000610f558a6112b4565b90506000610f628a611281565b9050610f938184610f73858b6117c4565b610f7d91906117c4565b610f879190611867565b6012610d848c8c6117e3565b945050505050610dc5565b6001600160a01b038116610ff45760405162461bcd60e51b815260206004820152601860248201527f476f7665726e61626c653a207a65726f20616464726573730000000000000000604482015260640161037b565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f56bddfa0cee9697cebddf9acd7f23dc6583663b05e007b877056d05017994def9060200161052a565b6000804660011480156110be57506001600160a01b038316736b175474e89094c44da98b954eedeac495271d0f148061109757506001600160a01b03831673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48145b806110be57506001600160a01b03831673dac17f958d2ee523a2206206994597c13d831ec7145b905080806105d1575050506001600160a01b031660009081526004602052604090205460ff1690565b600080600080600085600781111561110157611101611650565b87600781111561111357611113611650565b106111375773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8661034889611152565b6103488773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee885b9350935093509350611164888561119c565b1561117557829450505050506105d1565b61117f888361119c565b1561118f5793506105d192505050565b60009450505050506105d1565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bcfd032d6111d685610535565b6040516001600160e01b031960e084901b1681526001600160a01b039182166004820152908516602482015260440160a060405180830381865afa92505050801561123e575060408051601f3d908101601f1916820190925261123b918101906118c3565b60015b61124a57506000610702565b6000841395505050505050610702565b600061127c73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee610348611368565b905090565b600061128c82611042565b6112a9576112a461129c83610535565b610348611368565b610702565b6305f5e10092915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614611315576112a46112fb83610535565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee611368565b670de0b6b3a764000092915050565b6000808212156113535761133782611913565b61134290600a611a14565b61134c9084611867565b9050610702565b61135e82600a611a14565b61134c90846117c4565b60405163bcfd032d60e01b81526001600160a01b0383811660048301528281166024830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063bcfd032d9060440160a060405180830381865afa1580156113df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140391906118c3565b509350509250506000821361142a5760405162bfc92160e01b815260040160405180910390fd5b6003544263ffffffff90911610801561145457506003546114519063ffffffff1642611a20565b81105b15611472576040516346ea729360e01b815260040160405180910390fd5b509392505050565b60008083601f84011261148c57600080fd5b50813567ffffffffffffffff8111156114a457600080fd5b6020830191508360208260051b85010111156114bf57600080fd5b9250929050565b600080600080604085870312156114dc57600080fd5b843567ffffffffffffffff808211156114f457600080fd5b6115008883890161147a565b9096509450602087013591508082111561151957600080fd5b506115268782880161147a565b95989497509550505050565b60006020828403121561154457600080fd5b813563ffffffff811681146105d157600080fd5b80356001600160a01b03811681146105d857600080fd5b60006020828403121561158157600080fd5b6105d182611558565b6000806020838503121561159d57600080fd5b823567ffffffffffffffff8111156115b457600080fd5b6115c08582860161147a565b90969095509350505050565b600080604083850312156115df57600080fd5b6115e883611558565b91506115f660208401611558565b90509250929050565b60008060006060848603121561161457600080fd5b61161d84611558565b925060208401356001600160801b038116811461163957600080fd5b915061164760408501611558565b90509250925092565b634e487b7160e01b600052602160045260246000fd5b602081016008831061168857634e487b7160e01b600052602160045260246000fd5b91905290565b60208082526019908201527f476f7665726e61626c653a206f6e6c7920676f7665726e6f7200000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611705576117056116db565b5060010190565b8183526000602080850194508260005b85811015611748576001600160a01b0361173583611558565b168752958201959082019060010161171c565b509495945050505050565b60408152600061176760408301868861170c565b828103602084015261177a81858761170c565b979650505050505050565b60208152600061179960208301848661170c565b949350505050565b6000602082840312156117b357600080fd5b815160ff811681146105d157600080fd5b60008160001904831182151516156117de576117de6116db565b500290565b600081810b83820b8281128015607f19830184121615611805576118056116db565b81607f01831381161561181a5761181a6116db565b5090039392505050565b60008160000b8360000b6000821282607f03821381151615611848576118486116db565b82607f1903821281161561185e5761185e6116db565b50019392505050565b60008261188457634e487b7160e01b600052601260045260246000fd5b500490565b600081810b607f198114156118a0576118a06116db565b60000392915050565b805169ffffffffffffffffffff811681146105d857600080fd5b600080600080600060a086880312156118db57600080fd5b6118e4866118a9565b9450602086015193506040860151925060608601519150611907608087016118a9565b90509295509295909350565b6000600160ff1b821415611929576119296116db565b5060000390565b600181815b8085111561196b578160001904821115611951576119516116db565b8085161561195e57918102915b93841c9390800290611935565b509250929050565b60008261198257506001610702565b8161198f57506000610702565b81600181146119a557600281146119af576119cb565b6001915050610702565b60ff8411156119c0576119c06116db565b50506001821b610702565b5060208310610133831016604e8410600b84101617156119ee575081810a610702565b6119f88383611930565b8060001904821115611a0c57611a0c6116db565b029392505050565b60006105d18383611973565b600082821015611a3257611a326116db565b50039056fea26469706673582212202e4110c2871dc6930e2ac28b88bd7c5669e497072d967190c40542159d3c05b964736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80637f55db3a116100a2578063e3056a3411610071578063e3056a3414610275578063e43581b814610286578063e82138cd146102a8578063ed49d2f8146102e3578063f235757f1461030857600080fd5b80637f55db3a146101f8578063a513355f1461020b578063ad5c46481461022c578063df08aed51461025357600080fd5b80634df3cad6116100e95780634df3cad6146101755780636edc66321461018857806372c12c871461019b578063734273fd146101ae5780637b103999146101d157600080fd5b80630c340a241461011b57806313f6986d146101455780631d4ef30a1461014f5780633103016214610162575b600080fd5b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b61014d61031b565b005b61014d61015d3660046114c6565b61038e565b61014d610170366004611532565b6104bc565b61012861018336600461156f565b610535565b61014d61019636600461158a565b6105dd565b61014d6101a93660046115cc565b6106b7565b6101c16101bc3660046115cc565b6106c5565b604051901515815260200161013c565b6101287f000000000000000000000000000000000000000000000000000000000000000081565b61014d6102063660046115cc565b610708565b61021e6102193660046115ff565b61076c565b60405190815260200161013c565b6101287f000000000000000000000000000000000000000000000000000000000000000081565b6101c161026136600461156f565b6001546001600160a01b0391821691161490565b6001546001600160a01b0316610128565b6101c161029436600461156f565b6000546001600160a01b0391821691161490565b6102d66102b63660046115cc565b600260209081526000928352604080842090915290825290205460ff1681565b60405161013c9190611666565b6003546102f39063ffffffff1681565b60405163ffffffff909116815260200161013c565b61014d61031636600461156f565b61087d565b6001546001600160a01b031633146103845760405162461bcd60e51b815260206004820152602160248201527f476f7665726e61626c653a206f6e6c792070656e64696e6720676f7665726e6f6044820152603960f91b60648201526084015b60405180910390fd5b61038c6108b3565b565b6000546001600160a01b031633146103b85760405162461bcd60e51b815260040161037b9061168e565b8281146103d8576040516306e3b91560e11b815260040160405180910390fd5b60005b83811015610478578282828181106103f5576103f56116c5565b905060200201602081019061040a919061156f565b60056000878785818110610420576104206116c5565b9050602002016020810190610435919061156f565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b0319169290911691909117905580610470816116f1565b9150506103db565b507f25967af46669513d9b32b10bce9dc8b094f9638e01d68bd4253fb634873b3d17848484846040516104ae9493929190611753565b60405180910390a150505050565b6000546001600160a01b031633146104e65760405162461bcd60e51b815260040161037b9061168e565b6003805463ffffffff191663ffffffff83169081179091556040519081527f55ab0355f542386898a10e20731ebdfe9303c36ea9cbc480909adb8beaf4a7c0906020015b60405180910390a150565b600046600114801561058957506001600160a01b03821673eb4c2781e4eba804ce9a9803c67d0893436bb27d148061058957506001600160a01b038216732260fac5e5542a773aa44fbcfedf7c193bc2c599145b156105a9575073bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb919050565b6001600160a01b0380831660009081526005602052604090205416806105cf57826105d1565b805b9392505050565b919050565b6000546001600160a01b031633146106075760405162461bcd60e51b815260040161037b9061168e565b60005b818110156106795760016004600085858581811061062a5761062a6116c5565b905060200201602081019061063f919061156f565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610671816116f1565b91505061060a565b507f0e1316bdb62d8b87b8c288a81e4bc638fbf187056521cd5f525a3c70dd812abf82826040516106ab929190611785565b60405180910390a15050565b6106c1828261095b565b5050565b60008060006106d48585610a3e565b9150915060006106e48383610a6f565b905060008160078111156106fa576106fa611650565b141593505050505b92915050565b6000806107158484610a3e565b909250905060006001600160a01b0380841660009081526002602090815260408083209386168352929052205460ff16600781111561075657610756611650565b141561076657610766848461095b565b50505050565b600080600061077b8685610a3e565b6001600160a01b03808316600090815260026020908152604080832093851683529290529081205492945090925060ff909116908160078111156107c1576107c1611650565b14156107e0576040516365db466f60e01b815260040160405180910390fd5b60006107eb88610bb1565b905060006107f887610bb1565b9050600383600781111561080e5761080e611650565b116108365761082a898884848c6001600160801b031688610c15565b955050505050506105d1565b600583600781111561084a5761084a611650565b116108665761082a898884848c6001600160801b031688610dcf565b61082a898884848c6001600160801b031688610e67565b6000546001600160a01b031633146108a75760405162461bcd60e51b815260040161037b9061168e565b6108b081610f9e565b50565b6001546001600160a01b031661090b5760405162461bcd60e51b815260206004820152601f60248201527f476f7665726e61626c653a206e6f2070656e64696e6720676f7665726e6f7200604482015260640161037b565b60018054600080546001600160a01b03199081166001600160a01b0384161782559091169091556040517fdc57ca23c46d823853915ed5a090ca0ee9db5eb6a46f5c58e1c9158de861fd769190a1565b6000806109688484610a3e565b9150915060006109788383610a6f565b9050600081600781111561098e5761098e611650565b14156109ad576040516365db466f60e01b815260040160405180910390fd5b6001600160a01b038084166000908152600260209081526040808320938616835292905220805482919060ff191660018360078111156109ef576109ef611650565b0217905550604080516001600160a01b038086168252841660208201527fa0f87b02ca47ea06fb7d8fd30abf826222301c4e0cc359211c4254d49b4736ad910160405180910390a15050505050565b600080826001600160a01b0316846001600160a01b031610610a61578284610a64565b83835b909590945092505050565b600080610a7b84611042565b90506000610a8884611042565b90506001600160a01b038581167f0000000000000000000000000000000000000000000000000000000000000000821690811491861614818015610ac95750825b80610ad95750838015610ad95750805b15610aeb576001945050505050610702565b828015610af6575083155b15610b1357610b0887600260076110e7565b945050505050610702565b838015610b1e575082155b15610b3057610b0886600260066110e7565b8015610b4357610b0887600660036110e7565b8115610b5657610b0886600760036110e7565b610b628761034861119c565b15610b7457610b0886600460066110e7565b610b928773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61119c565b15610ba457610b0886600760056110e7565b5060009695505050505050565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070291906117a1565b600080806003846007811115610c2d57610c2d611650565b14610c39576008610c3c565b60125b90506000610c498a611042565b80610ca157506003856007811115610c6357610c63611650565b148015610ca157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168a6001600160a01b0316145b90506001856007811115610cb757610cb7611650565b1415610ccc57610cc561125a565b9250610d67565b6002856007811115610ce057610ce0611650565b1415610d0257610cc5610cf28a611042565b610cfc5789611281565b8a611281565b6003856007811115610d1657610d16611650565b1415610d6757610d647f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168a6001600160a01b031614610d5e57896112b4565b8a6112b4565b92505b80610da057610d96610d7987856117c4565b89610d84858b6117e3565b610d8e91906117e3565b60000b611324565b9350505050610dc5565b610d9683610db288610d8e8b87611824565b610dbc9190611867565b610d8e8a611889565b9695505050505050565b6000806004836007811115610de657610de6611650565b14610e055773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee610e09565b6103485b90506000610e1f610e198a610535565b83611368565b90506000610e35610e2f8a610535565b84611368565b9050610e5981610e4584896117c4565b610e4f9190611867565b610d8e8a8a6117e3565b9a9950505050505050505050565b6000806006836007811115610e7e57610e7e611650565b148015610e9c5750866001600160a01b0316886001600160a01b0316105b80610ed457506007836007811115610eb657610eb6611650565b148015610ed45750866001600160a01b0316886001600160a01b0316115b90506000610ee061125a565b90508115610f4a576000610ef38a611281565b90506000610f008a6112b4565b90506000610f27610f11848a6117c4565b6012610f1d8d8d6117e3565b610d8e9190611824565b905081610f348583611867565b610f3e9190611867565b95505050505050610dc5565b6000610f558a6112b4565b90506000610f628a611281565b9050610f938184610f73858b6117c4565b610f7d91906117c4565b610f879190611867565b6012610d848c8c6117e3565b945050505050610dc5565b6001600160a01b038116610ff45760405162461bcd60e51b815260206004820152601860248201527f476f7665726e61626c653a207a65726f20616464726573730000000000000000604482015260640161037b565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f56bddfa0cee9697cebddf9acd7f23dc6583663b05e007b877056d05017994def9060200161052a565b6000804660011480156110be57506001600160a01b038316736b175474e89094c44da98b954eedeac495271d0f148061109757506001600160a01b03831673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48145b806110be57506001600160a01b03831673dac17f958d2ee523a2206206994597c13d831ec7145b905080806105d1575050506001600160a01b031660009081526004602052604090205460ff1690565b600080600080600085600781111561110157611101611650565b87600781111561111357611113611650565b106111375773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8661034889611152565b6103488773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee885b9350935093509350611164888561119c565b1561117557829450505050506105d1565b61117f888361119c565b1561118f5793506105d192505050565b60009450505050506105d1565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bcfd032d6111d685610535565b6040516001600160e01b031960e084901b1681526001600160a01b039182166004820152908516602482015260440160a060405180830381865afa92505050801561123e575060408051601f3d908101601f1916820190925261123b918101906118c3565b60015b61124a57506000610702565b6000841395505050505050610702565b600061127c73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee610348611368565b905090565b600061128c82611042565b6112a9576112a461129c83610535565b610348611368565b610702565b6305f5e10092915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614611315576112a46112fb83610535565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee611368565b670de0b6b3a764000092915050565b6000808212156113535761133782611913565b61134290600a611a14565b61134c9084611867565b9050610702565b61135e82600a611a14565b61134c90846117c4565b60405163bcfd032d60e01b81526001600160a01b0383811660048301528281166024830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063bcfd032d9060440160a060405180830381865afa1580156113df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140391906118c3565b509350509250506000821361142a5760405162bfc92160e01b815260040160405180910390fd5b6003544263ffffffff90911610801561145457506003546114519063ffffffff1642611a20565b81105b15611472576040516346ea729360e01b815260040160405180910390fd5b509392505050565b60008083601f84011261148c57600080fd5b50813567ffffffffffffffff8111156114a457600080fd5b6020830191508360208260051b85010111156114bf57600080fd5b9250929050565b600080600080604085870312156114dc57600080fd5b843567ffffffffffffffff808211156114f457600080fd5b6115008883890161147a565b9096509450602087013591508082111561151957600080fd5b506115268782880161147a565b95989497509550505050565b60006020828403121561154457600080fd5b813563ffffffff811681146105d157600080fd5b80356001600160a01b03811681146105d857600080fd5b60006020828403121561158157600080fd5b6105d182611558565b6000806020838503121561159d57600080fd5b823567ffffffffffffffff8111156115b457600080fd5b6115c08582860161147a565b90969095509350505050565b600080604083850312156115df57600080fd5b6115e883611558565b91506115f660208401611558565b90509250929050565b60008060006060848603121561161457600080fd5b61161d84611558565b925060208401356001600160801b038116811461163957600080fd5b915061164760408501611558565b90509250925092565b634e487b7160e01b600052602160045260246000fd5b602081016008831061168857634e487b7160e01b600052602160045260246000fd5b91905290565b60208082526019908201527f476f7665726e61626c653a206f6e6c7920676f7665726e6f7200000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611705576117056116db565b5060010190565b8183526000602080850194508260005b85811015611748576001600160a01b0361173583611558565b168752958201959082019060010161171c565b509495945050505050565b60408152600061176760408301868861170c565b828103602084015261177a81858761170c565b979650505050505050565b60208152600061179960208301848661170c565b949350505050565b6000602082840312156117b357600080fd5b815160ff811681146105d157600080fd5b60008160001904831182151516156117de576117de6116db565b500290565b600081810b83820b8281128015607f19830184121615611805576118056116db565b81607f01831381161561181a5761181a6116db565b5090039392505050565b60008160000b8360000b6000821282607f03821381151615611848576118486116db565b82607f1903821281161561185e5761185e6116db565b50019392505050565b60008261188457634e487b7160e01b600052601260045260246000fd5b500490565b600081810b607f198114156118a0576118a06116db565b60000392915050565b805169ffffffffffffffffffff811681146105d857600080fd5b600080600080600060a086880312156118db57600080fd5b6118e4866118a9565b9450602086015193506040860151925060608601519150611907608087016118a9565b90509295509295909350565b6000600160ff1b821415611929576119296116db565b5060000390565b600181815b8085111561196b578160001904821115611951576119516116db565b8085161561195e57918102915b93841c9390800290611935565b509250929050565b60008261198257506001610702565b8161198f57506000610702565b81600181146119a557600281146119af576119cb565b6001915050610702565b60ff8411156119c0576119c06116db565b50506001821b610702565b5060208310610133831016604e8410600b84101617156119ee575081810a610702565b6119f88383611930565b8060001904821115611a0c57611a0c6116db565b029392505050565b60006105d18383611973565b600082821015611a3257611a326116db565b50039056fea26469706673582212202e4110c2871dc6930e2ac28b88bd7c5669e497072d967190c40542159d3c05b964736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addMappings(address[],address[])": {
        "params": {
          "_addresses": "The addresses of the tokens",
          "_mappings": "The addresses of their mappings"
        }
      },
      "addSupportForPairIfNeeded(address,address)": {
        "details": "Will revert if pair cannot be supported. _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order",
        "params": {
          "_tokenA": "One of the pair's tokens",
          "_tokenB": "The other of the pair's tokens"
        }
      },
      "addUSDStablecoins(address[])": {
        "params": {
          "_addresses": "The addresses of the tokens"
        }
      },
      "canSupportPair(address,address)": {
        "details": "_tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order",
        "params": {
          "_tokenA": "One of the pair's tokens",
          "_tokenB": "The other of the pair's tokens"
        },
        "returns": {
          "_0": "Whether the given pair of tokens can be supported by the oracle"
        }
      },
      "mappedToken(address)": {
        "returns": {
          "_0": "If it exists, the mapping is returned. Otherwise, the original token is returned"
        }
      },
      "quote(address,uint128,address)": {
        "params": {
          "_amountIn": "The amount that will be provided",
          "_tokenIn": "The token that will be provided",
          "_tokenOut": "The token we would like to quote"
        },
        "returns": {
          "_amountOut": "How much _tokenOut will be returned in exchange for _amountIn amount of _tokenIn"
        }
      },
      "reconfigureSupportForPair(address,address)": {
        "details": "Will revert if pair cannot be supported. _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order",
        "params": {
          "_tokenA": "One of the pair's tokens",
          "_tokenB": "The other of the pair's tokens"
        }
      },
      "setMaxDelay(uint32)": {
        "params": {
          "_maxDelay": "The new max delay"
        }
      }
    },
    "stateVariables": {
      "WETH": {
        "return": "The address of the token",
        "returns": {
          "_0": "The address of the token"
        }
      },
      "maxDelay": {
        "return": "How old the last price update can be in seconds",
        "returns": {
          "_0": "How old the last price update can be in seconds"
        }
      },
      "planForPair": {
        "details": "It is expected that _tokenA < _tokenB",
        "return": "The pricing plan that will be used",
        "returns": {
          "_0": "The pricing plan that will be used"
        }
      },
      "registry": {
        "return": "The Chainlink registry",
        "returns": {
          "_0": "The Chainlink registry"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidMappingsInput()": [
        {
          "notice": "Thrown when the input for adding mappings in invalid"
        }
      ],
      "InvalidPrice()": [
        {
          "notice": "Thrown when the price is non-positive"
        }
      ],
      "LastUpdateIsTooOld()": [
        {
          "notice": "Thrown when the last price update was too long ago"
        }
      ],
      "PairNotSupported()": [
        {
          "notice": "Thrown when trying to configure a pair that is not supported"
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "Thrown when one of the parameters is a zero address"
        }
      ],
      "ZeroMaxDelay()": [
        {
          "notice": "Thrown when the given max delay is zero"
        }
      ]
    },
    "events": {
      "AddedSupportForPairInChainlinkOracle(address,address)": {
        "notice": "Emitted when the oracle add supports for a new pair"
      },
      "MappingsAdded(address[],address[])": {
        "notice": "Emitted when new mappings are added"
      },
      "MaxDelaySet(uint32)": {
        "notice": "Emitted when a new max delay is set"
      },
      "TokensConsideredUSD(address[])": {
        "notice": "Emitted when new tokens are considered USD"
      }
    },
    "kind": "user",
    "methods": {
      "WETH()": {
        "notice": "Returns the address of the WETH ERC-20 token"
      },
      "addMappings(address[],address[])": {
        "notice": "Adds new token mappings"
      },
      "addSupportForPairIfNeeded(address,address)": {
        "notice": "Adds support for a given pair if the oracle didn't support it already. If called for a pair that is already supported, then nothing will happen. This function will let the oracle take some actions to configure the pair, in preparation for future quotes."
      },
      "addUSDStablecoins(address[])": {
        "notice": "Adds new tokens that should be considered USD stablecoins"
      },
      "canSupportPair(address,address)": {
        "notice": "Returns whether this oracle can support this pair of tokens"
      },
      "mappedToken(address)": {
        "notice": "Returns the mapping of the given token, if it exists. If it doesn't, then the original token is returned"
      },
      "maxDelay()": {
        "notice": "Returns how old the last price update can be before the oracle reverts by considering it too old"
      },
      "planForPair(address,address)": {
        "notice": "Returns the pricing plan that will be used when quoting the given pair"
      },
      "quote(address,uint128,address)": {
        "notice": "Returns a quote, based on the given tokens and amount"
      },
      "reconfigureSupportForPair(address,address)": {
        "notice": "Reconfigures support for a given pair. This function will let the oracle take some actions to configure the pair, in preparation for future quotes. Can be called many times in order to let the oracle re-configure for a new context."
      },
      "registry()": {
        "notice": "Returns the Chainlink feed registry"
      },
      "setMaxDelay(uint32)": {
        "notice": "Sets a new max delay"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16317,
        "contract": "contracts/oracles/ChainlinkOracle.sol:ChainlinkOracle",
        "label": "_governor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16319,
        "contract": "contracts/oracles/ChainlinkOracle.sol:ChainlinkOracle",
        "label": "_pendingGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14720,
        "contract": "contracts/oracles/ChainlinkOracle.sol:ChainlinkOracle",
        "label": "planForPair",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_enum(PricingPlan)10701))"
      },
      {
        "astId": 14730,
        "contract": "contracts/oracles/ChainlinkOracle.sol:ChainlinkOracle",
        "label": "maxDelay",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 14755,
        "contract": "contracts/oracles/ChainlinkOracle.sol:ChainlinkOracle",
        "label": "_shouldBeConsideredUSD",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14759,
        "contract": "contracts/oracles/ChainlinkOracle.sol:ChainlinkOracle",
        "label": "_tokenMappings",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(PricingPlan)10701": {
        "encoding": "inplace",
        "label": "enum IChainlinkOracle.PricingPlan",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(PricingPlan)10701)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum IChainlinkOracle.PricingPlan)",
        "numberOfBytes": "32",
        "value": "t_enum(PricingPlan)10701"
      },
      "t_mapping(t_address,t_mapping(t_address,t_enum(PricingPlan)10701))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => enum IChainlinkOracle.PricingPlan))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_enum(PricingPlan)10701)"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}