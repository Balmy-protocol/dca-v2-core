{
  "address": "0xEcbA21E26466727d705d48cb0a8DE42B11767Bf7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "internalType": "contract IDCAFactory",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "contract IKeep3rV1",
          "name": "_keep3rV1",
          "type": "address"
        },
        {
          "internalType": "contract IDCASwapper",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidPairAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MustWaitDelay",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAKeeper",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWorked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PairNotSubsidized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_swapInterval",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_delay",
          "type": "uint32"
        }
      ],
      "name": "DelaySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IKeep3rV1",
          "name": "_keep3rV1",
          "type": "address"
        }
      ],
      "name": "Keep3rV1Set",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PendingGovernorAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pendingGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_pairs",
          "type": "address[]"
        }
      ],
      "name": "StoppedSubsidizingPairs",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_pairs",
          "type": "address[]"
        }
      ],
      "name": "SubsidizingNewPairs",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IDCASwapper",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "SwapperSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountSwapped",
          "type": "uint256"
        }
      ],
      "name": "Worked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptPendingGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_swapInterval",
          "type": "uint32"
        }
      ],
      "name": "delay",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "__delay",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IDCAFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isGovernor",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isPendingGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isPendingGovernor",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keep3rV1",
      "outputs": [
        {
          "internalType": "contract IKeep3rV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_swapInterval",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "__delay",
          "type": "uint32"
        }
      ],
      "name": "setDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKeep3rV1",
          "name": "_keep3rV1",
          "type": "address"
        }
      ],
      "name": "setKeep3rV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__pendingGovernor",
          "type": "address"
        }
      ],
      "name": "setPendingGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDCASwapper",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "setSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pairs",
          "type": "address[]"
        }
      ],
      "name": "startSubsidizingPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pairs",
          "type": "address[]"
        }
      ],
      "name": "stopSubsidizingPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subsidizedPairs",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_pairs",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract IDCASwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IDCAPair",
              "name": "pair",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapPath",
              "type": "bytes"
            }
          ],
          "internalType": "struct IDCASwapper.PairToSwap[]",
          "name": "_pairsToSwap",
          "type": "tuple[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_smallestIntervals",
          "type": "uint32[]"
        }
      ],
      "name": "work",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountSwapped",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "workable",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IDCAPair",
              "name": "pair",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapPath",
              "type": "bytes"
            }
          ],
          "internalType": "struct IDCASwapper.PairToSwap[]",
          "name": "_pairs",
          "type": "tuple[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_smallestIntervals",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8039368e206cd5871b52b0bd14463aefb99fbbbaade3db05d6f58087513c6bb9",
  "receipt": {
    "to": null,
    "from": "0x4adF96CcbBB8FAcd5F61495c0bdf1dDf1Ef62496",
    "contractAddress": "0xEcbA21E26466727d705d48cb0a8DE42B11767Bf7",
    "transactionIndex": 17,
    "gasUsed": "1703209",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xdd21fb8e0cee7cb327c28e94870498f6a883f405565dca038d8c77d9a586c952",
    "transactionHash": "0x8039368e206cd5871b52b0bd14463aefb99fbbbaade3db05d6f58087513c6bb9",
    "logs": [],
    "blockNumber": 12949346,
    "cumulativeGasUsed": "2909684",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaEF6B153e3f59D4010DBcBCA04a25058417de695",
    "0xaC4a40a995f236E081424D966F1dFE014Fe0e98A",
    "0x1ceb5cb57c4d4e2b2433641b95dd330a33185a44",
    "0x5985B9a914bCd6A46d72690Df78c1640064c499e"
  ],
  "solcInputHash": "9cff5268f386a73e6ed0a9853e23ca90",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"contract IDCAFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IKeep3rV1\",\"name\":\"_keep3rV1\",\"type\":\"address\"},{\"internalType\":\"contract IDCASwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidPairAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustWaitDelay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAKeeper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWorked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PairNotSubsidized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_swapInterval\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_delay\",\"type\":\"uint32\"}],\"name\":\"DelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IKeep3rV1\",\"name\":\"_keep3rV1\",\"type\":\"address\"}],\"name\":\"Keep3rV1Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PendingGovernorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_pairs\",\"type\":\"address[]\"}],\"name\":\"StoppedSubsidizingPairs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_pairs\",\"type\":\"address[]\"}],\"name\":\"SubsidizingNewPairs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IDCASwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"SwapperSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountSwapped\",\"type\":\"uint256\"}],\"name\":\"Worked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_swapInterval\",\"type\":\"uint32\"}],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"__delay\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IDCAFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isGovernor\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isPendingGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isPendingGovernor\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keep3rV1\",\"outputs\":[{\"internalType\":\"contract IKeep3rV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_swapInterval\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"__delay\",\"type\":\"uint32\"}],\"name\":\"setDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeep3rV1\",\"name\":\"_keep3rV1\",\"type\":\"address\"}],\"name\":\"setKeep3rV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDCASwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"setSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pairs\",\"type\":\"address[]\"}],\"name\":\"startSubsidizingPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pairs\",\"type\":\"address[]\"}],\"name\":\"stopSubsidizingPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subsidizedPairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_pairs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract IDCASwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IDCAPair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapPath\",\"type\":\"bytes\"}],\"internalType\":\"struct IDCASwapper.PairToSwap[]\",\"name\":\"_pairsToSwap\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_smallestIntervals\",\"type\":\"uint32[]\"}],\"name\":\"work\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountSwapped\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workable\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IDCAPair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapPath\",\"type\":\"bytes\"}],\"internalType\":\"struct IDCASwapper.PairToSwap[]\",\"name\":\"_pairs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_smallestIntervals\",\"type\":\"uint32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"delay(uint32)\":{\"details\":\"If none was configured, then it will return half the given swap interval\",\"params\":{\"_swapInterval\":\"The swap interval to check\"},\"returns\":{\"__delay\":\"The configured delay\"}},\"setKeep3rV1(address)\":{\"details\":\"Will throw ZeroAddress if the zero address is passed\",\"params\":{\"_keep3rV1\":\"The Keep3r contract\"}},\"setSwapper(address)\":{\"details\":\"Will throw ZeroAddress if the zero address is passed\",\"params\":{\"_swapper\":\"The swapper contract\"}},\"startSubsidizingPairs(address[])\":{\"details\":\"Will throw InvalidPairAddress if any of the given addresses is not a valid DCA pair\",\"params\":{\"_pairs\":\"The new pairs to add\"}},\"stopSubsidizingPairs(address[])\":{\"params\":{\"_pairs\":\"The pairs to remove\"}},\"subsidizedPairs()\":{\"returns\":{\"_pairs\":\"An array with all the subsidized pairs\"}}},\"stateVariables\":{\"factory\":{\"return\":\"_factory The DCA Factory\",\"returns\":{\"_0\":\"_factory The DCA Factory\"}},\"keep3rV1\":{\"return\":\"_keeper The Keep3r contract\",\"returns\":{\"_0\":\"_keeper The Keep3r contract\"}},\"swapper\":{\"return\":\"_swapper The DCA swapper\",\"returns\":{\"_0\":\"_swapper The DCA swapper\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidPairAddress()\":[{\"notice\":\"Thrown when trying to subsidize an address that isn't a DCA pair\"}],\"MustWaitDelay()\":[{\"notice\":\"Thrown when a pair can technically be swapped, but the delay doesn't allow it\"}],\"NotAKeeper()\":[{\"notice\":\"Thrown when the caller executing work is not a keeper\"}],\"NotWorked()\":[{\"notice\":\"Thrown when the caller tries to execute work with no pairs\"}],\"PairNotSubsidized()\":[{\"notice\":\"Thrown when trying to work on a pair that is not being subsidized\"}]},\"events\":{\"DelaySet(uint32,uint32)\":{\"notice\":\"Emitted when a new delay is configured\"},\"Keep3rV1Set(address)\":{\"notice\":\"Emitted when a keep3r is used\"},\"StoppedSubsidizingPairs(address[])\":{\"notice\":\"Emitted when some pairs stop being subsidized\"},\"SubsidizingNewPairs(address[])\":{\"notice\":\"Emitted when new pairs are subsidized\"},\"SwapperSet(address)\":{\"notice\":\"Emitted when a new swapper is used\"},\"Worked(uint256)\":{\"notice\":\"Emitted when swaps are executed\"}},\"kind\":\"user\",\"methods\":{\"delay(uint32)\":{\"notice\":\"Returns the configured delay for a given swap interval\"},\"factory()\":{\"notice\":\"Returns the DCA factory\"},\"keep3rV1()\":{\"notice\":\"Returns the Keep3r contract\"},\"setKeep3rV1(address)\":{\"notice\":\"Sets a new address for the Keep3r contract\"},\"setSwapper(address)\":{\"notice\":\"Sets a new address for the swapper contract\"},\"startSubsidizingPairs(address[])\":{\"notice\":\"Adds some new pairs to the list of subsidized pairs\"},\"stopSubsidizingPairs(address[])\":{\"notice\":\"Removes some pairs from the list of subsidized pairs\"},\"subsidizedPairs()\":{\"notice\":\"Returns a list of all the pairs that are currently subsidized\"},\"swapper()\":{\"notice\":\"Returns the DCA swapper\"},\"work((address,bytes)[],uint32[])\":{\"notice\":\"Takes an array of swaps, and executes as many as possible, returning the amount that was swapped\"},\"workable()\":{\"notice\":\"This method isn't a view and it is extremelly expensive and inefficient. DO NOT call this method on-chain, it is for off-chain purposes only.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DCAKeep3rJob/DCAKeep3rJob.sol\":\"DCAKeep3rJob\"},\"evmVersion\":\"berlin\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"contracts/DCAKeep3rJob/DCAKeep3rJob.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.6;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '../utils/Governable.sol';\\n\\nimport '../interfaces/IDCAKeep3rJob.sol';\\nimport '../interfaces/IKeep3rV1.sol';\\nimport '../interfaces/IDCASwapper.sol';\\n\\nimport '../libraries/CommonErrors.sol';\\n\\ncontract DCAKeep3rJob is IDCAKeep3rJob, Governable {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  IDCAFactory public immutable override factory;\\n  IDCASwapper public override swapper;\\n  IKeep3rV1 public override keep3rV1;\\n  mapping(uint32 => uint32) internal _delay; // swap interval => delay\\n  EnumerableSet.AddressSet internal _subsidizedPairs;\\n\\n  constructor(\\n    address _governor,\\n    IDCAFactory _factory,\\n    IKeep3rV1 _keep3rV1,\\n    IDCASwapper _swapper\\n  ) Governable(_governor) {\\n    if (address(_factory) == address(0) || address(_keep3rV1) == address(0) || address(_swapper) == address(0))\\n      revert CommonErrors.ZeroAddress();\\n    factory = _factory;\\n    keep3rV1 = _keep3rV1;\\n    swapper = _swapper;\\n  }\\n\\n  function setKeep3rV1(IKeep3rV1 _keep3rV1) external override onlyGovernor {\\n    if (address(_keep3rV1) == address(0)) revert CommonErrors.ZeroAddress();\\n    keep3rV1 = _keep3rV1;\\n    emit Keep3rV1Set(_keep3rV1);\\n  }\\n\\n  function setSwapper(IDCASwapper _swapper) external override onlyGovernor {\\n    if (address(_swapper) == address(0)) revert CommonErrors.ZeroAddress();\\n    swapper = _swapper;\\n    emit SwapperSet(_swapper);\\n  }\\n\\n  function startSubsidizingPairs(address[] calldata _pairs) external override onlyGovernor {\\n    for (uint256 i; i < _pairs.length; i++) {\\n      if (!factory.isPair(_pairs[i])) revert InvalidPairAddress();\\n      _subsidizedPairs.add(_pairs[i]);\\n    }\\n    emit SubsidizingNewPairs(_pairs);\\n  }\\n\\n  function stopSubsidizingPairs(address[] calldata _pairs) external override onlyGovernor {\\n    for (uint256 i; i < _pairs.length; i++) {\\n      _subsidizedPairs.remove(_pairs[i]);\\n    }\\n    emit StoppedSubsidizingPairs(_pairs);\\n  }\\n\\n  function subsidizedPairs() external view override returns (address[] memory _pairs) {\\n    uint256 _length = _subsidizedPairs.length();\\n    _pairs = new address[](_length);\\n    for (uint256 i; i < _length; i++) {\\n      _pairs[i] = _subsidizedPairs.at(i);\\n    }\\n  }\\n\\n  function setDelay(uint32 _swapInterval, uint32 __delay) external override onlyGovernor {\\n    _delay[_swapInterval] = __delay;\\n    emit DelaySet(_swapInterval, __delay);\\n  }\\n\\n  function delay(uint32 _swapInterval) external view override returns (uint32 __delay) {\\n    __delay = _delay[_swapInterval];\\n    if (__delay == 0) {\\n      __delay = _swapInterval / 2;\\n    }\\n  }\\n\\n  /**\\n   * This method isn't a view and it is extremelly expensive and inefficient.\\n   * DO NOT call this method on-chain, it is for off-chain purposes only.\\n   */\\n  function workable() external override returns (IDCASwapper.PairToSwap[] memory _pairs, uint32[] memory _smallestIntervals) {\\n    uint256 _count;\\n    // Count how many pairs can be swapped\\n    uint256 _length = _subsidizedPairs.length();\\n    for (uint256 i; i < _length; i++) {\\n      IDCAPair _pair = IDCAPair(_subsidizedPairs.at(i));\\n      bytes memory _swapPath = swapper.findBestSwap(_pair);\\n      uint32 _swapInterval = _getSmallestSwapInterval(_pair);\\n      if (_swapPath.length > 0 && _hasDelayPassedAlready(_pair, _swapInterval)) {\\n        _count++;\\n      }\\n    }\\n    // Create result array with correct size\\n    _pairs = new IDCASwapper.PairToSwap[](_count);\\n    _smallestIntervals = new uint32[](_count);\\n\\n    // Fill result array\\n    for (uint256 i; i < _length; i++) {\\n      IDCAPair _pair = IDCAPair(_subsidizedPairs.at(i));\\n      bytes memory _swapPath = swapper.findBestSwap(_pair);\\n      uint32 _swapInterval = _getSmallestSwapInterval(_pair);\\n      if (_swapPath.length > 0 && _hasDelayPassedAlready(_pair, _swapInterval)) {\\n        _pairs[--_count] = IDCASwapper.PairToSwap({pair: _pair, swapPath: _swapPath});\\n        _smallestIntervals[_count] = _swapInterval;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Takes an array of swaps, and executes as many as possible, returning the amount that was swapped\\n   */\\n  function work(IDCASwapper.PairToSwap[] calldata _pairsToSwap, uint32[] calldata _smallestIntervals)\\n    external\\n    override\\n    returns (uint256 _amountSwapped)\\n  {\\n    if (!keep3rV1.isKeeper(msg.sender)) revert NotAKeeper();\\n    for (uint256 i; i < _pairsToSwap.length; i++) {\\n      IDCAPair _pair = _pairsToSwap[i].pair;\\n      if (!_subsidizedPairs.contains(address(_pair))) {\\n        revert PairNotSubsidized();\\n      }\\n      if (!_hasDelayPassedAlready(_pair, _smallestIntervals[i])) {\\n        revert MustWaitDelay();\\n      }\\n    }\\n    _amountSwapped = swapper.swapPairs(_pairsToSwap);\\n    if (_amountSwapped == 0) revert NotWorked();\\n    keep3rV1.worked(msg.sender);\\n    emit Worked(_amountSwapped);\\n  }\\n\\n  function _hasDelayPassedAlready(IDCAPair _pair, uint32 _swapInterval) internal view returns (bool) {\\n    uint32 _nextAvailable = _pair.nextSwapAvailable(_swapInterval);\\n    return _getTimestamp() >= _nextAvailable + this.delay(_swapInterval);\\n  }\\n\\n  function _getSmallestSwapInterval(IDCAPair _pair) internal view returns (uint32 _minSwapInterval) {\\n    IDCAPair.NextSwapInformation memory _nextSwapInfo = _pair.getNextSwapInfo();\\n    for (uint256 i; i < _nextSwapInfo.amountOfSwaps; i++) {\\n      if (_minSwapInterval == 0 || _nextSwapInfo.swapsToPerform[i].interval < _minSwapInterval) {\\n        _minSwapInterval = _nextSwapInfo.swapsToPerform[i].interval;\\n      }\\n    }\\n  }\\n\\n  function _getTimestamp() internal view virtual returns (uint32) {\\n    return uint32(block.timestamp);\\n  }\\n}\\n\",\"keccak256\":\"0x6401d1db5d6b0c3f4cd0ab10db704ecb9b7a7e37c1187cbb9245ad4d9560ae68\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDCAFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.6;\\n\\nimport './IDCAGlobalParameters.sol';\\n\\n/// @title Factory of DCA pairs\\n/// @notice This is the contract you communicate with to create new pairs or query created ones\\n/// @dev This factory can return 4 errors for the creation of a pair.\\n/// PairAlreadyExists if the pair already exists.\\n/// IdenticalTokens if you send the same tokenA and tokenB.\\n/// ZeroAddress if tokenA or tokenB is the zero address.\\n/// PairNotSupported if the oracle does not support the pair.\\ninterface IDCAFactoryPairsHandler {\\n  /// @notice Thrown when both tokens are equal\\n  error IdenticalTokens();\\n  /// @notice Thrown when trying to create a pair that already exists\\n  error PairAlreadyExists();\\n\\n  /// @notice Emitted when a pair is created\\n  /// @param _tokenA The first token of the pair by address sort order\\n  /// @param _tokenB The second token of the pair by address sort order\\n  /// @param _pair The address of the created pair\\n  event PairCreated(address indexed _tokenA, address indexed _tokenB, address _pair);\\n\\n  /// @notice Returns the global parameters contract\\n  /// @dev Global parameters has information about swaps and pairs, like swap intervals, fees charged, etc.\\n  /// @return The Global Parameters contract\\n  function globalParameters() external view returns (IDCAGlobalParameters);\\n\\n  /// @notice Gets a pair by a set of tokens\\n  /// @dev _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\\n  /// @param _tokenA first token of the pair\\n  /// @param _tokenB second token of the pair\\n  /// @return _pair Address of the pair if found, or zero address if it doesn't exist\\n  function pairByTokens(address _tokenA, address _tokenB) external view returns (address _pair);\\n\\n  /// @notice Gets a list of all available pairs\\n  /// @dev Returns an array of addresses for each pair that is created\\n  /// @return _pairs Array of pair addresses\\n  function allPairs() external view returns (address[] memory _pairs);\\n\\n  /// @notice Checks if address is a pair\\n  /// @param _address address to test if it is a pair address\\n  /// @return _isPair True if address is a pair, false if it is not\\n  function isPair(address _address) external view returns (bool _isPair);\\n\\n  /// @notice Creates a pair for 2 tokens\\n  /// @dev _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\\n  /// If the pair already exists, it raises the PairAlreadyExists error.\\n  /// If both parameters are equal, raises the IdenticalTokens error.\\n  /// If one of the parameters is the zero address, raises the ZeroAddress error.\\n  /// If the oracle does not support the pair, raises the PairNotSupported error.\\n  /// @param _tokenA first token of the pair\\n  /// @param _tokenB second token of the pair\\n  /// @return pair Address of the newly created pair\\n  function createPair(address _tokenA, address _tokenB) external returns (address pair);\\n}\\n\\ninterface IDCAFactory is IDCAFactoryPairsHandler {}\\n\",\"keccak256\":\"0x152c5d0d6994e01d519a1dab4008e7ea378f4757e78632a8ffff763869e017fd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IDCAGlobalParameters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.6;\\n\\nimport './ITimeWeightedOracle.sol';\\nimport './IDCATokenDescriptor.sol';\\n\\n/// @title The interface for handling parameters the affect the whole DCA ecosystem\\n/// @notice This contract will manage configuration that affects all pairs, swappers, etc\\ninterface IDCAGlobalParameters {\\n  /// @notice A compilation of all parameters that affect a swap\\n  struct SwapParameters {\\n    // The address of the fee recipient\\n    address feeRecipient;\\n    // Whether swaps are paused or not\\n    bool isPaused;\\n    // The swap fee\\n    uint32 swapFee;\\n    // The oracle contract\\n    ITimeWeightedOracle oracle;\\n  }\\n\\n  /// @notice A compilation of all parameters that affect a loan\\n  struct LoanParameters {\\n    // The address of the fee recipient\\n    address feeRecipient;\\n    // Whether loans are paused or not\\n    bool isPaused;\\n    // The loan fee\\n    uint32 loanFee;\\n  }\\n\\n  /// @notice Emitted when a new fee recipient is set\\n  /// @param _feeRecipient The address of the new fee recipient\\n  event FeeRecipientSet(address _feeRecipient);\\n\\n  /// @notice Emitted when a new NFT descriptor is set\\n  /// @param _descriptor The new NFT descriptor contract\\n  event NFTDescriptorSet(IDCATokenDescriptor _descriptor);\\n\\n  /// @notice Emitted when a new oracle is set\\n  /// @param _oracle The new oracle contract\\n  event OracleSet(ITimeWeightedOracle _oracle);\\n\\n  /// @notice Emitted when a new swap fee is set\\n  /// @param _feeSet The new swap fee\\n  event SwapFeeSet(uint32 _feeSet);\\n\\n  /// @notice Emitted when a new loan fee is set\\n  /// @param _feeSet The new loan fee\\n  event LoanFeeSet(uint32 _feeSet);\\n\\n  /// @notice Emitted when new swap intervals are allowed\\n  /// @param _swapIntervals The new swap intervals\\n  /// @param _descriptions The descriptions for each swap interval\\n  event SwapIntervalsAllowed(uint32[] _swapIntervals, string[] _descriptions);\\n\\n  /// @notice Emitted when some swap intervals are no longer allowed\\n  /// @param _swapIntervals The swap intervals that are no longer allowed\\n  event SwapIntervalsForbidden(uint32[] _swapIntervals);\\n\\n  /// @notice Thrown when trying to set a fee higher than the maximum allowed\\n  error HighFee();\\n\\n  /// @notice Thrown when trying to support new swap intervals, but the amount of descriptions doesn't match\\n  error InvalidParams();\\n\\n  /// @notice Thrown when trying to support a new swap interval of value zero\\n  error ZeroInterval();\\n\\n  /// @notice Thrown when trying a description for a new swap interval is empty\\n  error EmptyDescription();\\n\\n  /// @notice Returns the address of the fee recipient\\n  /// @return _feeRecipient The address of the fee recipient\\n  function feeRecipient() external view returns (address _feeRecipient);\\n\\n  /// @notice Returns fee charged on swaps\\n  /// @return _swapFee The fee itself\\n  function swapFee() external view returns (uint32 _swapFee);\\n\\n  /// @notice Returns fee charged on loans\\n  /// @return _loanFee The fee itself\\n  function loanFee() external view returns (uint32 _loanFee);\\n\\n  /// @notice Returns the NFT descriptor contract\\n  /// @return _nftDescriptor The contract itself\\n  function nftDescriptor() external view returns (IDCATokenDescriptor _nftDescriptor);\\n\\n  /// @notice Returns the time-weighted oracle contract\\n  /// @return _oracle The contract itself\\n  function oracle() external view returns (ITimeWeightedOracle _oracle);\\n\\n  /// @notice Returns the precision used for fees\\n  /// @dev Cannot be modified\\n  /// @return _precision The precision used for fees\\n  // solhint-disable-next-line func-name-mixedcase\\n  function FEE_PRECISION() external view returns (uint24 _precision);\\n\\n  /// @notice Returns the max fee that can be set for either swap or loans\\n  /// @dev Cannot be modified\\n  /// @return _maxFee The maximum possible fee\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MAX_FEE() external view returns (uint32 _maxFee);\\n\\n  /// @notice Returns a list of all the allowed swap intervals\\n  /// @return _allowedSwapIntervals An array with all allowed swap intervals\\n  function allowedSwapIntervals() external view returns (uint32[] memory _allowedSwapIntervals);\\n\\n  /// @notice Returns the description for a given swap interval\\n  /// @return _description The swap interval's description\\n  function intervalDescription(uint32 _swapInterval) external view returns (string memory _description);\\n\\n  /// @notice Returns whether a swap interval is currently allowed\\n  /// @return _isAllowed Whether the given swap interval is currently allowed\\n  function isSwapIntervalAllowed(uint32 _swapInterval) external view returns (bool _isAllowed);\\n\\n  /// @notice Returns whether swaps and loans are currently paused\\n  /// @return _isPaused Whether swaps and loans are currently paused\\n  function paused() external view returns (bool _isPaused);\\n\\n  /// @notice Returns a compilation of all parameters that affect a swap\\n  /// @return _swapParameters All parameters that affect a swap\\n  function swapParameters() external view returns (SwapParameters memory _swapParameters);\\n\\n  /// @notice Returns a compilation of all parameters that affect a loan\\n  /// @return _loanParameters All parameters that affect a loan\\n  function loanParameters() external view returns (LoanParameters memory _loanParameters);\\n\\n  /// @notice Sets a new fee recipient address\\n  /// @dev Will revert with ZeroAddress if the zero address is passed\\n  /// @param _feeRecipient The new fee recipient address\\n  function setFeeRecipient(address _feeRecipient) external;\\n\\n  /// @notice Sets a new swap fee\\n  /// @dev Will rever with HighFee if the fee is higher than the maximum\\n  /// @param _fee The new swap fee\\n  function setSwapFee(uint32 _fee) external;\\n\\n  /// @notice Sets a new loan fee\\n  /// @dev Will rever with HighFee if the fee is higher than the maximum\\n  /// @param _fee The new loan fee\\n  function setLoanFee(uint32 _fee) external;\\n\\n  /// @notice Sets a new NFT descriptor\\n  /// @dev Will revert with ZeroAddress if the zero address is passed\\n  /// @param _descriptor The new descriptor contract\\n  function setNFTDescriptor(IDCATokenDescriptor _descriptor) external;\\n\\n  /// @notice Sets a new time-weighted oracle\\n  /// @dev Will revert with ZeroAddress if the zero address is passed\\n  /// @param _oracle The new oracle contract\\n  function setOracle(ITimeWeightedOracle _oracle) external;\\n\\n  /// @notice Adds new swap intervals to the allowed list\\n  /// @dev Will revert with:\\n  /// InvalidParams if the amount of swap intervals is different from the amount of descriptions passed\\n  /// ZeroInterval if any of the swap intervals is zero\\n  /// EmptyDescription if any of the descriptions is empty\\n  /// @param _swapIntervals The new swap intervals\\n  /// @param _descriptions Their descriptions\\n  function addSwapIntervalsToAllowedList(uint32[] calldata _swapIntervals, string[] calldata _descriptions) external;\\n\\n  /// @notice Removes some swap intervals from the allowed list\\n  /// @param _swapIntervals The swap intervals to remove\\n  function removeSwapIntervalsFromAllowedList(uint32[] calldata _swapIntervals) external;\\n\\n  /// @notice Pauses all swaps and loans\\n  function pause() external;\\n\\n  /// @notice Unpauses all swaps and loans\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x3b7cb5f3481130f73b5acf63d2a8895a58a64085b0c8d8808b383c7ac4ce7177\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IDCAKeep3rJob.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.6;\\n\\nimport './IDCAFactory.sol';\\nimport './IDCASwapper.sol';\\nimport './IKeep3rV1.sol';\\n\\n/// @title Keep3r job that executes DCA swaps\\n/// @notice This contract will allow keep3rs to execute swaps and get paid with credits\\ninterface IDCAKeep3rJob {\\n  /// @notice Emitted when new pairs are subsidized\\n  /// @param _pairs The address of the pairs that will now be subsidized\\n  event SubsidizingNewPairs(address[] _pairs);\\n\\n  /// @notice Emitted when some pairs stop being subsidized\\n  /// @param _pairs The address of the pairs that will not be subsidized anymore\\n  event StoppedSubsidizingPairs(address[] _pairs);\\n\\n  /// @notice Emitted when a new swapper is used\\n  /// @param _swapper The new swapper\\n  event SwapperSet(IDCASwapper _swapper);\\n\\n  /// @notice Emitted when a keep3r is used\\n  /// @param _keep3rV1 The new keep3r\\n  event Keep3rV1Set(IKeep3rV1 _keep3rV1);\\n\\n  /// @notice Emitted when swaps are executed\\n  /// @param _amountSwapped The amount of pairs that was swapped\\n  event Worked(uint256 _amountSwapped);\\n\\n  /// @notice Emitted when a new delay is configured\\n  /// @param _swapInterval The swap interval that the delay will affect\\n  /// @param _delay The actual configured delay\\n  event DelaySet(uint32 _swapInterval, uint32 _delay);\\n\\n  /// @notice Thrown when trying to subsidize an address that isn't a DCA pair\\n  error InvalidPairAddress();\\n\\n  /// @notice Thrown when trying to work on a pair that is not being subsidized\\n  error PairNotSubsidized();\\n\\n  /// @notice Thrown when the caller executing work is not a keeper\\n  error NotAKeeper();\\n\\n  /// @notice Thrown when the caller tries to execute work with no pairs\\n  error NotWorked();\\n\\n  /// @notice Thrown when a pair can technically be swapped, but the delay doesn't allow it\\n  error MustWaitDelay();\\n\\n  /// @notice Returns a list of all the pairs that are currently subsidized\\n  /// @return _pairs An array with all the subsidized pairs\\n  function subsidizedPairs() external view returns (address[] memory _pairs);\\n\\n  /// @notice Returns the Keep3r contract\\n  /// @return _keeper The Keep3r contract\\n  function keep3rV1() external view returns (IKeep3rV1 _keeper);\\n\\n  /// @notice Returns the DCA factory\\n  /// @return _factory The DCA Factory\\n  function factory() external view returns (IDCAFactory _factory);\\n\\n  /// @notice Returns the DCA swapper\\n  /// @return _swapper The DCA swapper\\n  function swapper() external view returns (IDCASwapper _swapper);\\n\\n  /// @notice Returns the configured delay for a given swap interval\\n  /// @dev If none was configured, then it will return half the given swap interval\\n  /// @param _swapInterval The swap interval to check\\n  /// @return _delay The configured delay\\n  function delay(uint32 _swapInterval) external view returns (uint32 _delay);\\n\\n  /// @notice Returns a list of pairs to swap, and also the smallest swap interval for each pair. The result should be sent to work\\n  /// @dev DO NOT call this method on-chain, it is for off-chain purposes only. Is is extremely expensive and innefficient\\n  /// @return _pairs An array with pairs and their swap path\\n  /// @return _smallestIntervals The smallest swap interval that can be swapped for each pair\\n  function workable() external returns (IDCASwapper.PairToSwap[] memory _pairs, uint32[] memory _smallestIntervals);\\n\\n  /// @notice Sets a new address for the Keep3r contract\\n  /// @dev Will throw ZeroAddress if the zero address is passed\\n  /// @param _keep3rV1 The Keep3r contract\\n  function setKeep3rV1(IKeep3rV1 _keep3rV1) external;\\n\\n  /// @notice Sets a new address for the swapper contract\\n  /// @dev Will throw ZeroAddress if the zero address is passed\\n  /// @param _swapper The swapper contract\\n  function setSwapper(IDCASwapper _swapper) external;\\n\\n  /// @notice Adds some new pairs to the list of subsidized pairs\\n  /// @dev Will throw InvalidPairAddress if any of the given addresses is not a valid DCA pair\\n  /// @param _pairs The new pairs to add\\n  function startSubsidizingPairs(address[] calldata _pairs) external;\\n\\n  /// @notice Removes some pairs from the list of subsidized pairs\\n  /// @param _pairs The pairs to remove\\n  function stopSubsidizingPairs(address[] calldata _pairs) external;\\n\\n  /// @notice Sets a new delay for the given swap interval\\n  /// @param _swapInterval The swap interval that will be given the new delay\\n  /// @param _delay The new delay to set\\n  function setDelay(uint32 _swapInterval, uint32 _delay) external;\\n\\n  /// @notice Takes a list of pairs to swap, and tries to swap as many as possible\\n  /// @dev The method checks how much gas is left, and stops before reaching the limit. So the\\n  /// last pairs in the array are less likely to be swapped. Will revert with:\\n  /// NotAKeeper if the caller is not a keep3r\\n  /// PairNotSubsidized if one of the given pairs is not subsidized\\n  /// MustWaitDelay if one of the given pairs must wait for the delay\\n  /// NotWorked if the caller tries to execute no pairs\\n  /// @param _pairs The list of pairs so swap\\n  /// @param _smallestIntervals The smallest swap interval that can be swapped for each pair\\n  /// @return _amountSwapped How many pairs were actually swapped\\n  function work(IDCASwapper.PairToSwap[] calldata _pairs, uint32[] calldata _smallestIntervals) external returns (uint256 _amountSwapped);\\n}\\n\",\"keccak256\":\"0xf3f0eadf175efd0b4530be0180b4051c25b8e0867ab6f3819036143704f65a5f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IDCAPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport './IDCAGlobalParameters.sol';\\n\\n/// @title The interface for all state related queries\\n/// @notice These methods allow users to read the pair's current values\\ninterface IDCAPairParameters {\\n  /// @notice Returns the global parameters contract\\n  /// @dev Global parameters has information about swaps and pairs, like swap intervals, fees charged, etc.\\n  /// @return The Global Parameters contract\\n  function globalParameters() external view returns (IDCAGlobalParameters);\\n\\n  /// @notice Returns the token A contract\\n  /// @return The contract for token A\\n  function tokenA() external view returns (IERC20Metadata);\\n\\n  /// @notice Returns the token B contract\\n  /// @return The contract for token B\\n  function tokenB() external view returns (IERC20Metadata);\\n\\n  /// @notice Returns how much will the amount to swap differ from the previous swap\\n  /// @dev f.e. if the returned value is -100, then the amount to swap will be 100 less than the swap just before it\\n  /// @param _swapInterval The swap interval to check\\n  /// @param _from The 'from' token of the deposits\\n  /// @param _swap The swap number to check\\n  /// @return _delta How much will the amount to swap differ, when compared to the swap just before this one\\n  function swapAmountDelta(\\n    uint32 _swapInterval,\\n    address _from,\\n    uint32 _swap\\n  ) external view returns (int256 _delta);\\n\\n  /// @notice Returns if a certain swap interval is active or not\\n  /// @dev We consider a swap interval to be active if there is at least one active position on that interval\\n  /// @param _swapInterval The swap interval to check\\n  /// @return _isActive Whether the given swap interval is currently active\\n  function isSwapIntervalActive(uint32 _swapInterval) external view returns (bool _isActive);\\n\\n  /// @notice Returns the amount of swaps executed for a certain interval\\n  /// @param _swapInterval The swap interval to check\\n  /// @return _swaps The amount of swaps performed on the given interval\\n  function performedSwaps(uint32 _swapInterval) external view returns (uint32 _swaps);\\n}\\n\\n/// @title The interface for all position related matters in a DCA pair\\n/// @notice These methods allow users to create, modify and terminate their positions\\ninterface IDCAPairPositionHandler is IDCAPairParameters {\\n  /// @notice The position of a certain user\\n  struct UserPosition {\\n    // The token that the user deposited and will be swapped in exchange for \\\"to\\\"\\n    IERC20Metadata from;\\n    // The token that the user will get in exchange for their \\\"from\\\" tokens in each swap\\n    IERC20Metadata to;\\n    // How frequently the position's swaps should be executed\\n    uint32 swapInterval;\\n    // How many swaps were executed since deposit, last modification, or last withdraw\\n    uint32 swapsExecuted;\\n    // How many \\\"to\\\" tokens can currently be withdrawn\\n    uint256 swapped;\\n    // How many swaps left the position has to execute\\n    uint32 swapsLeft;\\n    // How many \\\"from\\\" tokens there are left to swap\\n    uint256 remaining;\\n    // How many \\\"from\\\" tokens need to be traded in each swap\\n    uint160 rate;\\n  }\\n\\n  /// @notice Emitted when a position is terminated\\n  /// @param _user The address of the user that terminated the position\\n  /// @param _dcaId The id of the position that was terminated\\n  /// @param _returnedUnswapped How many \\\"from\\\" tokens were returned to the caller\\n  /// @param _returnedSwapped How many \\\"to\\\" tokens were returned to the caller\\n  event Terminated(address indexed _user, uint256 _dcaId, uint256 _returnedUnswapped, uint256 _returnedSwapped);\\n\\n  /// @notice Emitted when a position is created\\n  /// @param _user The address of the user that created the position\\n  /// @param _dcaId The id of the position that was created\\n  /// @param _fromToken The address of the \\\"from\\\" token\\n  /// @param _rate How many \\\"from\\\" tokens need to be traded in each swap\\n  /// @param _startingSwap The number of the swap when the position will be executed for the first time\\n  /// @param _swapInterval How frequently the position's swaps should be executed\\n  /// @param _lastSwap The number of the swap when the position will be executed for the last time\\n  event Deposited(\\n    address indexed _user,\\n    uint256 _dcaId,\\n    address _fromToken,\\n    uint160 _rate,\\n    uint32 _startingSwap,\\n    uint32 _swapInterval,\\n    uint32 _lastSwap\\n  );\\n\\n  /// @notice Emitted when a user withdraws all swapped tokens from a position\\n  /// @param _user The address of the user that executed the withdraw\\n  /// @param _dcaId The id of the position that was affected\\n  /// @param _token The address of the withdrawn tokens. It's the same as the position's \\\"to\\\" token\\n  /// @param _amount The amount that was withdrawn\\n  event Withdrew(address indexed _user, uint256 _dcaId, address _token, uint256 _amount);\\n\\n  /// @notice Emitted when a user withdraws all swapped tokens from many positions\\n  /// @param _user The address of the user that executed the withdraw\\n  /// @param _dcaIds The ids of the positions that were affected\\n  /// @param _swappedTokenA The total amount that was withdrawn in token A\\n  /// @param _swappedTokenB The total amount that was withdrawn in token B\\n  event WithdrewMany(address indexed _user, uint256[] _dcaIds, uint256 _swappedTokenA, uint256 _swappedTokenB);\\n\\n  /// @notice Emitted when a position is modified\\n  /// @param _user The address of the user that modified the position\\n  /// @param _dcaId The id of the position that was modified\\n  /// @param _rate How many \\\"from\\\" tokens need to be traded in each swap\\n  /// @param _startingSwap The number of the swap when the position will be executed for the first time\\n  /// @param _lastSwap The number of the swap when the position will be executed for the last time\\n  event Modified(address indexed _user, uint256 _dcaId, uint160 _rate, uint32 _startingSwap, uint32 _lastSwap);\\n\\n  /// @notice Thrown when a user tries to create a position with a token that is neither token A nor token B\\n  error InvalidToken();\\n\\n  /// @notice Thrown when a user tries to create that a position with an unsupported swap interval\\n  error InvalidInterval();\\n\\n  /// @notice Thrown when a user tries operate on a position that doesn't exist (it might have been already terminated)\\n  error InvalidPosition();\\n\\n  /// @notice Thrown when a user tries operate on a position that they don't have access to\\n  error UnauthorizedCaller();\\n\\n  /// @notice Thrown when a user tries to create or modify a position by setting the rate to be zero\\n  error ZeroRate();\\n\\n  /// @notice Thrown when a user tries to create a position with zero swaps\\n  error ZeroSwaps();\\n\\n  /// @notice Thrown when a user tries to add zero funds to their position\\n  error ZeroAmount();\\n\\n  /// @notice Thrown when a user tries to modify the rate of a position that has already been completed\\n  error PositionCompleted();\\n\\n  /// @notice Thrown when a user tries to modify a position that has too much swapped balance. This error\\n  /// is thrown so that the user doesn't lose any funds. The error indicates that the user must perform a withdraw\\n  /// before modifying their position\\n  error MandatoryWithdraw();\\n\\n  /// @notice Returns a DCA position\\n  /// @param _dcaId The id of the position\\n  /// @return _position The position itself\\n  function userPosition(uint256 _dcaId) external view returns (UserPosition memory _position);\\n\\n  /// @notice Creates a new position\\n  /// @dev Will revert:\\n  /// With InvalidToken if _tokenAddress is neither token A nor token B\\n  /// With ZeroRate if _rate is zero\\n  /// With ZeroSwaps if _amountOfSwaps is zero\\n  /// With InvalidInterval if _swapInterval is not a valid swap interval\\n  /// @param _tokenAddress The address of the token that will be deposited\\n  /// @param _rate How many \\\"from\\\" tokens need to be traded in each swap\\n  /// @param _amountOfSwaps How many swaps to execute for this position\\n  /// @param _swapInterval How frequently the position's swaps should be executed\\n  /// @return _dcaId The id of the created position\\n  function deposit(\\n    address _tokenAddress,\\n    uint160 _rate,\\n    uint32 _amountOfSwaps,\\n    uint32 _swapInterval\\n  ) external returns (uint256 _dcaId);\\n\\n  /// @notice Withdraws all swapped tokens from a position\\n  /// @dev Will revert:\\n  /// With InvalidPosition if _dcaId is invalid\\n  /// With UnauthorizedCaller if the caller doesn't have access to the position\\n  /// @param _dcaId The position's id\\n  /// @return _swapped How much was withdrawn\\n  function withdrawSwapped(uint256 _dcaId) external returns (uint256 _swapped);\\n\\n  /// @notice Withdraws all swapped tokens from many positions\\n  /// @dev Will revert:\\n  /// With InvalidPosition if any of the ids in _dcaIds is invalid\\n  /// With UnauthorizedCaller if the caller doesn't have access to any of the positions in _dcaIds\\n  /// @param _dcaIds The positions' ids\\n  /// @return _swappedTokenA How much was withdrawn in token A\\n  /// @return _swappedTokenB How much was withdrawn in token B\\n  function withdrawSwappedMany(uint256[] calldata _dcaIds) external returns (uint256 _swappedTokenA, uint256 _swappedTokenB);\\n\\n  /// @notice Modifies the rate of a position. Could request more funds or return deposited funds\\n  /// depending on whether the new rate is greater than the previous one.\\n  /// @dev Will revert:\\n  /// With InvalidPosition if _dcaId is invalid\\n  /// With UnauthorizedCaller if the caller doesn't have access to the position\\n  /// With PositionCompleted if position has already been completed\\n  /// With ZeroRate if _newRate is zero\\n  /// With MandatoryWithdraw if the user must execute a withdraw before modifying their position\\n  /// @param _dcaId The position's id\\n  /// @param _newRate The new rate to set\\n  function modifyRate(uint256 _dcaId, uint160 _newRate) external;\\n\\n  /// @notice Modifies the amount of swaps of a position. Could request more funds or return\\n  /// deposited funds depending on whether the new amount of swaps is greater than the swaps left.\\n  /// @dev Will revert:\\n  /// With InvalidPosition if _dcaId is invalid\\n  /// With UnauthorizedCaller if the caller doesn't have access to the position\\n  /// With MandatoryWithdraw if the user must execute a withdraw before modifying their position\\n  /// @param _dcaId The position's id\\n  /// @param _newSwaps The new amount of swaps\\n  function modifySwaps(uint256 _dcaId, uint32 _newSwaps) external;\\n\\n  /// @notice Modifies both the rate and amount of swaps of a position. Could request more funds or return\\n  /// deposited funds depending on whether the new parameters require more or less than the the unswapped funds.\\n  /// @dev Will revert:\\n  /// With InvalidPosition if _dcaId is invalid\\n  /// With UnauthorizedCaller if the caller doesn't have access to the position\\n  /// With ZeroRate if _newRate is zero\\n  /// With MandatoryWithdraw if the user must execute a withdraw before modifying their position\\n  /// @param _dcaId The position's id\\n  /// @param _newRate The new rate to set\\n  /// @param _newSwaps The new amount of swaps\\n  function modifyRateAndSwaps(\\n    uint256 _dcaId,\\n    uint160 _newRate,\\n    uint32 _newSwaps\\n  ) external;\\n\\n  /// @notice Takes the unswapped balance, adds the new deposited funds and modifies the position so that\\n  /// it is executed in _newSwaps swaps\\n  /// @dev Will revert:\\n  /// With InvalidPosition if _dcaId is invalid\\n  /// With UnauthorizedCaller if the caller doesn't have access to the position\\n  /// With ZeroAmount if _amount is zero\\n  /// With ZeroSwaps if _newSwaps is zero\\n  /// With MandatoryWithdraw if the user must execute a withdraw before modifying their position\\n  /// @param _dcaId The position's id\\n  /// @param _amount Amounts of funds to add to the position\\n  /// @param _newSwaps The new amount of swaps\\n  function addFundsToPosition(\\n    uint256 _dcaId,\\n    uint256 _amount,\\n    uint32 _newSwaps\\n  ) external;\\n\\n  /// @notice Terminates the position and sends all unswapped and swapped balance to the caller\\n  /// @dev Will revert:\\n  /// With InvalidPosition if _dcaId is invalid\\n  /// With UnauthorizedCaller if the caller doesn't have access to the position\\n  /// @param _dcaId The position's id\\n  function terminate(uint256 _dcaId) external;\\n}\\n\\n/// @title The interface for all swap related matters in a DCA pair\\n/// @notice These methods allow users to get information about the next swap, and how to execute it\\ninterface IDCAPairSwapHandler {\\n  /// @notice Information about an available swap for a specific swap interval\\n  struct SwapInformation {\\n    // The affected swap interval\\n    uint32 interval;\\n    // The number of the swap that will be performed\\n    uint32 swapToPerform;\\n    // The amount of token A that needs swapping\\n    uint256 amountToSwapTokenA;\\n    // The amount of token B that needs swapping\\n    uint256 amountToSwapTokenB;\\n  }\\n\\n  /// @notice All information about the next swap\\n  struct NextSwapInformation {\\n    // All swaps that can be executed\\n    SwapInformation[] swapsToPerform;\\n    // How many entries of the swapsToPerform array are valid\\n    uint8 amountOfSwaps;\\n    // How much can be borrowed in token A during a flash swap\\n    uint256 availableToBorrowTokenA;\\n    // How much can be borrowed in token B during a flash swap\\n    uint256 availableToBorrowTokenB;\\n    // How much 10**decimals(tokenB) is when converted to token A\\n    uint256 ratePerUnitBToA;\\n    // How much 10**decimals(tokenA) is when converted to token B\\n    uint256 ratePerUnitAToB;\\n    // How much token A will be sent to the platform in terms of fee\\n    uint256 platformFeeTokenA;\\n    // How much token B will be sent to the platform in terms of fee\\n    uint256 platformFeeTokenB;\\n    // The amount of tokens that need to be provided by the swapper\\n    uint256 amountToBeProvidedBySwapper;\\n    // The amount of tokens that will be sent to the swapper optimistically\\n    uint256 amountToRewardSwapperWith;\\n    // The token that needs to be provided by the swapper\\n    IERC20Metadata tokenToBeProvidedBySwapper;\\n    // The token that will be sent to the swapper optimistically\\n    IERC20Metadata tokenToRewardSwapperWith;\\n  }\\n\\n  /// @notice Emitted when a swap is executed\\n  /// @param _sender The address of the user that initiated the swap\\n  /// @param _to The address that received the reward + loan\\n  /// @param _amountBorrowedTokenA How much was borrowed in token A\\n  /// @param _amountBorrowedTokenB How much was borrowed in token B\\n  /// @param _fee How much was charged as a swap fee to position owners\\n  /// @param _nextSwapInformation All information related to the swap\\n  event Swapped(\\n    address indexed _sender,\\n    address indexed _to,\\n    uint256 _amountBorrowedTokenA,\\n    uint256 _amountBorrowedTokenB,\\n    uint32 _fee,\\n    NextSwapInformation _nextSwapInformation\\n  );\\n\\n  /// @notice Thrown when trying to execute a swap, but none is available\\n  error NoSwapsToExecute();\\n\\n  /// @notice Returns when the next swap will be available for a given swap interval\\n  /// @param _swapInterval The swap interval to check\\n  /// @return _when The moment when the next swap will be available. Take into account that if the swap is already available, this result could\\n  /// be in the past\\n  function nextSwapAvailable(uint32 _swapInterval) external view returns (uint32 _when);\\n\\n  /// @notice Returns the amount of tokens that needed swapping in the last swap, for all positions in the given swap interval that were deposited in the given token\\n  /// @param _swapInterval The swap interval to check\\n  /// @param _from The address of the token that all positions used to deposit\\n  /// @return _amount The amount that needed swapping in the last swap\\n  function swapAmountAccumulator(uint32 _swapInterval, address _from) external view returns (uint256);\\n\\n  /// @notice Returns all information related to the next swap\\n  /// @return _nextSwapInformation The information about the next swap\\n  function getNextSwapInfo() external view returns (NextSwapInformation memory _nextSwapInformation);\\n\\n  /// @notice Executes a swap\\n  /// @dev This method assumes that the required amount has already been sent. Will revert with:\\n  /// Paused if swaps are paused by protocol\\n  /// NoSwapsToExecute if there are no swaps to execute\\n  /// LiquidityNotReturned if the required tokens were not sent before calling the function\\n  function swap() external;\\n\\n  /// @notice Executes a flash swap\\n  /// @dev Will revert with:\\n  /// Paused if swaps are paused by protocol\\n  /// NoSwapsToExecute if there are no swaps to execute\\n  /// InsufficientLiquidity if asked to borrow more than the actual reserves\\n  /// LiquidityNotReturned if the required tokens were not back during the callback\\n  /// @param _amountToBorrowTokenA How much to borrow in token A\\n  /// @param _amountToBorrowTokenB How much to borrow in token B\\n  /// @param _to Address to send the reward + the borrowed tokens\\n  /// @param _data Bytes to send to the caller during the callback. If this parameter is empty, the callback won't be executed\\n  function swap(\\n    uint256 _amountToBorrowTokenA,\\n    uint256 _amountToBorrowTokenB,\\n    address _to,\\n    bytes calldata _data\\n  ) external;\\n\\n  /// @notice Returns how many seconds left until the next swap is available\\n  /// @return _secondsUntilNextSwap The amount of seconds until next swap. Returns 0 if a swap can already be executed\\n  function secondsUntilNextSwap() external view returns (uint32 _secondsUntilNextSwap);\\n}\\n\\n/// @title The interface for all loan related matters in a DCA pair\\n/// @notice These methods allow users to ask how much is available for loans, and also to execute them\\ninterface IDCAPairLoanHandler {\\n  /// @notice Emitted when a flash loan is executed\\n  /// @param _sender The address of the user that initiated the loan\\n  /// @param _to The address that received the loan\\n  /// @param _amountBorrowedTokenA How much was borrowed in token A\\n  /// @param _amountBorrowedTokenB How much was borrowed in token B\\n  /// @param _loanFee How much was charged as a fee\\n  event Loaned(address indexed _sender, address indexed _to, uint256 _amountBorrowedTokenA, uint256 _amountBorrowedTokenB, uint32 _loanFee);\\n\\n  // @notice Thrown when trying to execute a flash loan but without actually asking for tokens\\n  error ZeroLoan();\\n\\n  /// @notice Returns the amount of tokens that can be asked for during a flash loan\\n  /// @return _amountToBorrowTokenA The amount of token A that is available for borrowing\\n  /// @return _amountToBorrowTokenB The amount of token B that is available for borrowing\\n  function availableToBorrow() external view returns (uint256 _amountToBorrowTokenA, uint256 _amountToBorrowTokenB);\\n\\n  /// @notice Executes a flash loan, sending the required amounts to the specified loan recipient\\n  /// @dev Will revert:\\n  /// With ZeroLoan if both _amountToBorrowTokenA & _amountToBorrowTokenB are 0\\n  /// With Paused if loans are paused by protocol\\n  /// With InsufficientLiquidity if asked for more that reserves\\n  /// @param _amountToBorrowTokenA The amount to borrow in token A\\n  /// @param _amountToBorrowTokenB The amount to borrow in token B\\n  /// @param _to Address that will receive the loan. This address should be a contract that implements IDCAPairLoanCallee\\n  /// @param _data Any data that should be passed through to the callback\\n  function loan(\\n    uint256 _amountToBorrowTokenA,\\n    uint256 _amountToBorrowTokenB,\\n    address _to,\\n    bytes calldata _data\\n  ) external;\\n}\\n\\ninterface IDCAPair is IDCAPairParameters, IDCAPairSwapHandler, IDCAPairPositionHandler, IDCAPairLoanHandler {}\\n\",\"keccak256\":\"0xfcea8c5f65c627f33d4479ef0a8d85999e7543818aaa004e97feb2900aab902a\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IDCASwapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.6;\\n\\nimport '../interfaces/IDCAPair.sol';\\nimport '../utils/CollectableDust.sol';\\n\\n/// @title The interface for a contract that can execute DCA swaps\\n/// @notice This contract will take a DCA swap and execute the opposite trade in a DEX\\n/// in order to return the expected funds and complete the swap\\ninterface IDCASwapper is ICollectableDust {\\n  /// @notice A pair to swap\\n  struct PairToSwap {\\n    // The pair to swap\\n    IDCAPair pair;\\n    // Path to execute the best swap possible\\n    bytes swapPath;\\n  }\\n\\n  /// @notice Emitted when a list of pairs is swapped correctly\\n  /// @param _pairsToSwap The list of swaps that was attempted to swap\\n  /// @param _amountSwapped The amount of pairs that was actually swapped\\n  event Swapped(PairToSwap[] _pairsToSwap, uint256 _amountSwapped);\\n\\n  /// @notice Emitted when trying to swap an empty list of pairs\\n  error ZeroPairsToSwap();\\n\\n  /// @notice Returns whether the swapper is paused or not\\n  /// @return _isPaused Whether the swapper is paused or not\\n  function paused() external view returns (bool _isPaused);\\n\\n  /// @notice Takes a pair and tries to find the best swap for it\\n  /// @dev DO NOT call this method on-chain, it is for off-chain purposes only. Is is extremely expensive and innefficient\\n  /// @param _pair The pair to find the best swap for\\n  /// @return _swapPath The path to execute the best swap for the pair. Should be used when calling swapPairs.\\n  /// Will be empty (length = 0) if there is no path available and the pair can't be swapped.\\n  function findBestSwap(IDCAPair _pair) external returns (bytes memory _swapPath);\\n\\n  /// @notice Takes a list of pairs to swap, and tries to swap as many as possible\\n  /// @dev The method checks how much gas is left, and stops before reaching the limit. So the\\n  /// last pairs in the array are less likely to be swapped.\\n  /// Will revert with ZeroPairsToSwap if _pairsToSwap is empty\\n  /// Will revert if called when paused\\n  /// @param _pairsToSwap The list of pairs so swap\\n  /// @return _amountSwapped How many pairs were actually swapped\\n  function swapPairs(PairToSwap[] calldata _pairsToSwap) external returns (uint256 _amountSwapped);\\n\\n  /// @notice Pauses the swapper\\n  function pause() external;\\n\\n  /// @notice Unpauses the swapper\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x7c4333dec3bbaaff2949e813abd17a921f9423b61158c4df0992cb08dc975ed7\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IDCATokenDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.6;\\n\\nimport './IDCAPair.sol';\\n\\n/// @title The interface for generating a token's description\\n/// @notice Contracts that implement this interface must return a base64 JSON with the entire description\\ninterface IDCATokenDescriptor {\\n  /// @notice Generates a token's description, both the JSON and the image inside\\n  /// @param _positionHandler The pair where the position was created\\n  /// @param _tokenId The token/position id\\n  /// @return _description The position's description\\n  function tokenURI(IDCAPairPositionHandler _positionHandler, uint256 _tokenId) external view returns (string memory _description);\\n}\\n\",\"keccak256\":\"0x4a85d1aeb6b87fc9a6264a0050419774fd714f843692e19217565e59c77799f3\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IKeep3rV1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/// @title The interface for Keep3r network\\ninterface IKeep3rV1 is IERC20 {\\n  function name() external returns (string memory);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function ETH() external view returns (address);\\n\\n  function isKeeper(address _keeper) external returns (bool);\\n\\n  function governance() external view returns (address);\\n\\n  function isMinKeeper(\\n    address _keeper,\\n    uint256 _minBond,\\n    uint256 _earned,\\n    uint256 _age\\n  ) external returns (bool);\\n\\n  function isBondedKeeper(\\n    address _keeper,\\n    address _bond,\\n    uint256 _minBond,\\n    uint256 _earned,\\n    uint256 _age\\n  ) external returns (bool);\\n\\n  function addCreditETH(address job) external payable;\\n\\n  function addCredit(\\n    address credit,\\n    address job,\\n    uint256 amount\\n  ) external;\\n\\n  function addKPRCredit(address _job, uint256 _amount) external;\\n\\n  function addJob(address _job) external;\\n\\n  function removeJob(address _job) external;\\n\\n  function addVotes(address voter, uint256 amount) external;\\n\\n  function removeVotes(address voter, uint256 amount) external;\\n\\n  function revoke(address keeper) external;\\n\\n  function worked(address _keeper) external;\\n\\n  function workReceipt(address _keeper, uint256 _amount) external;\\n\\n  function receipt(\\n    address credit,\\n    address _keeper,\\n    uint256 _amount\\n  ) external;\\n\\n  function receiptETH(address _keeper, uint256 _amount) external;\\n\\n  function addLiquidityToJob(\\n    address liquidity,\\n    address job,\\n    uint256 amount\\n  ) external;\\n\\n  function applyCreditToJob(\\n    address provider,\\n    address liquidity,\\n    address job\\n  ) external;\\n\\n  function unbondLiquidityFromJob(\\n    address liquidity,\\n    address job,\\n    uint256 amount\\n  ) external;\\n\\n  function removeLiquidityFromJob(address liquidity, address job) external;\\n\\n  function bonds(address _keeper, address _credit) external view returns (uint256 _amount);\\n\\n  function jobs(address _job) external view returns (bool);\\n\\n  function jobList(uint256 _index) external view returns (address _job);\\n\\n  function credits(address _job, address _credit) external view returns (uint256 _amount);\\n\\n  function liquidityAccepted(address _liquidity) external view returns (bool);\\n\\n  function liquidityProvided(\\n    address _provider,\\n    address _liquidity,\\n    address _job\\n  ) external view returns (uint256 _amount);\\n\\n  function liquidityApplied(\\n    address _provider,\\n    address _liquidity,\\n    address _job\\n  ) external view returns (uint256 _amount);\\n\\n  function liquidityAmount(\\n    address _provider,\\n    address _liquidity,\\n    address _job\\n  ) external view returns (uint256 _amount);\\n\\n  function liquidityUnbonding(\\n    address _provider,\\n    address _liquidity,\\n    address _job\\n  ) external view returns (uint256 _amount);\\n\\n  function liquidityAmountsUnbonding(\\n    address _provider,\\n    address _liquidity,\\n    address _job\\n  ) external view returns (uint256 _amount);\\n\\n  function bond(address bonding, uint256 amount) external;\\n\\n  function activate(address bonding) external;\\n\\n  function unbond(address bonding, uint256 amount) external;\\n\\n  function withdraw(address bonding) external;\\n\\n  function setGovernance(address _governance) external;\\n\\n  function acceptGovernance() external;\\n}\\n\",\"keccak256\":\"0x2945729dc3d2fa34e4e13ab8b1195940b3307bc104455a7456a3f22c8937468e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ITimeWeightedOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol';\\n\\n/// @title The interface for an oracle that provies TWAP quotes\\n/// @notice These methods allow users to add support for pairs, and then ask for quotes\\ninterface ITimeWeightedOracle {\\n  /// @notice Emitted when the oracle add supports for a new pair\\n  /// @param _tokenA One of the pair's tokens\\n  /// @param _tokenB The other of the pair's tokens\\n  event AddedSupportForPair(address _tokenA, address _tokenB);\\n\\n  /// @notice Returns whether this oracle can support this pair of tokens\\n  /// @dev _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\\n  /// @param _tokenA One of the pair's tokens\\n  /// @param _tokenB The other of the pair's tokens\\n  /// @return _canSupport Whether the given pair of tokens can be supported by the oracle\\n  function canSupportPair(address _tokenA, address _tokenB) external view returns (bool _canSupport);\\n\\n  /// @notice Returns a quote, based on the given tokens and amount\\n  /// @param _tokenIn The token that will be provided\\n  /// @param _amountIn The amount that will be provided\\n  /// @param _tokenOut The token we would like to quote\\n  /// @return _amountOut How much _tokenOut will be returned in exchange for _amountIn amount of _tokenIn\\n  function quote(\\n    address _tokenIn,\\n    uint128 _amountIn,\\n    address _tokenOut\\n  ) external view returns (uint256 _amountOut);\\n\\n  /// @notice Add support for a given pair to the contract. This function will let the oracle take some actions to\\n  /// configure the pair for future quotes. Could be called more than one in order to let the oracle re-configure for a new context.\\n  /// @dev Will revert if pair cannot be supported. _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\\n  /// @param _tokenA One of the pair's tokens\\n  /// @param _tokenB The other of the pair's tokens\\n  function addSupportForPair(address _tokenA, address _tokenB) external;\\n}\\n\\n/// @title An implementation of ITimeWeightedOracle that uses Uniswap V3 pool oracles\\n/// @notice This oracle will attempt to use all fee tiers of the same pair when calculating quotes\\ninterface IUniswapV3OracleAggregator is ITimeWeightedOracle {\\n  /// @notice Emitted when a new fee tier is added\\n  /// @return _feeTier The added fee tier\\n  event AddedFeeTier(uint24 _feeTier);\\n\\n  /// @notice Emitted when a new period is set\\n  /// @return _period The new period\\n  event PeriodChanged(uint32 _period);\\n\\n  /// @notice Returns the Uniswap V3 Factory\\n  /// @return _factory The Uniswap V3 Factory\\n  function factory() external view returns (IUniswapV3Factory _factory);\\n\\n  /// @notice Returns a list of all supported Uniswap V3 fee tiers\\n  /// @return _feeTiers An array of all supported fee tiers\\n  function supportedFeeTiers() external view returns (uint24[] memory _feeTiers);\\n\\n  /// @notice Returns a list of all Uniswap V3 pools used for a given pair\\n  /// @dev _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\\n  /// @return _pools An array with all pools used for quoting the given pair\\n  function poolsUsedForPair(address _tokenA, address _tokenB) external view returns (address[] memory _pools);\\n\\n  /// @notice Returns the period used for the TWAP calculation\\n  /// @return _period The period used for the TWAP\\n  function period() external view returns (uint16 _period);\\n\\n  /// @notice Returns minimum possible period\\n  /// @dev Cannot be modified\\n  /// @return The minimum possible period\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MINIMUM_PERIOD() external view returns (uint16);\\n\\n  /// @notice Returns maximum possible period\\n  /// @dev Cannot be modified\\n  /// @return The maximum possible period\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MAXIMUM_PERIOD() external view returns (uint16);\\n\\n  /// @notice Returns the minimum liquidity that a pool needs to have in order to be used for a pair's quote\\n  /// @dev This check is only performed when adding support for a pair. If the pool's liquidity then\\n  /// goes below the threshold, then it will still be used for the quote calculation\\n  /// @return The minimum liquidity threshold\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MINIMUM_LIQUIDITY_THRESHOLD() external view returns (uint16);\\n\\n  /// @notice Adds support for a new Uniswap V3 fee tier\\n  /// @dev Will revert if the provided fee tier is not supported by Uniswap V3\\n  /// @param _feeTier The new fee tier\\n  function addFeeTier(uint24 _feeTier) external;\\n\\n  /// @notice Sets the period to be used for the TWAP calculation\\n  /// @dev Will revert it is lower than MINIMUM_PERIOD or greater than MAXIMUM_PERIOD\\n  /// WARNING: increasing the period could cause big problems, because Uniswap V3 pools might not support a TWAP so old.\\n  /// @param _period The new period\\n  function setPeriod(uint16 _period) external;\\n}\\n\",\"keccak256\":\"0xd305b201e7ca68b507f50f8cd40eda3e207c0675bb28c253ae9024006b53eb01\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.6;\\n\\nlibrary CommonErrors {\\n  error ZeroAddress();\\n  error Paused();\\n  error InsufficientLiquidity();\\n  error LiquidityNotReturned();\\n}\\n\",\"keccak256\":\"0xa0a4b5552d5c5e53342b39ccbd1a3e881f6cb149310a9546cadfbd156416130e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/utils/CollectableDust.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\ninterface ICollectableDust {\\n  event DustSent(address _to, address token, uint256 amount);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function ETH() external view returns (address);\\n\\n  function sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) external;\\n}\\n\\nabstract contract CollectableDust is ICollectableDust {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  address public constant override ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  EnumerableSet.AddressSet internal _protocolTokens;\\n\\n  function _addProtocolToken(address _token) internal {\\n    require(!_protocolTokens.contains(_token), 'CollectableDust: token already part of protocol');\\n    _protocolTokens.add(_token);\\n  }\\n\\n  function _removeProtocolToken(address _token) internal {\\n    require(_protocolTokens.contains(_token), 'CollectableDust: token is not part of protocol');\\n    _protocolTokens.remove(_token);\\n  }\\n\\n  function _sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) internal {\\n    require(_to != address(0), 'CollectableDust: zero address');\\n    require(!_protocolTokens.contains(_token), 'CollectableDust: token is part of protocol');\\n    if (_token == ETH) {\\n      payable(_to).transfer(_amount);\\n    } else {\\n      IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n    emit DustSent(_to, _token, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0x5ffd51385466c5e4b578c66f1628a0df0ff4cece1f232bda14f0175fd6ecd24c\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\n\\ninterface IGovernable {\\n  event PendingGovernorSet(address _pendingGovernor);\\n  event PendingGovernorAccepted();\\n\\n  function setPendingGovernor(address _pendingGovernor) external;\\n\\n  function acceptPendingGovernor() external;\\n\\n  function governor() external view returns (address);\\n\\n  function pendingGovernor() external view returns (address);\\n\\n  function isGovernor(address _account) external view returns (bool _isGovernor);\\n\\n  function isPendingGovernor(address _account) external view returns (bool _isPendingGovernor);\\n}\\n\\nabstract contract Governable is IGovernable {\\n  address private _governor;\\n  address private _pendingGovernor;\\n\\n  constructor(address __governor) {\\n    require(__governor != address(0), 'Governable: zero address');\\n    _governor = __governor;\\n  }\\n\\n  function governor() external view override returns (address) {\\n    return _governor;\\n  }\\n\\n  function pendingGovernor() external view override returns (address) {\\n    return _pendingGovernor;\\n  }\\n\\n  function setPendingGovernor(address __pendingGovernor) external virtual override onlyGovernor {\\n    _setPendingGovernor(__pendingGovernor);\\n  }\\n\\n  function _setPendingGovernor(address __pendingGovernor) internal {\\n    require(__pendingGovernor != address(0), 'Governable: zero address');\\n    _pendingGovernor = __pendingGovernor;\\n    emit PendingGovernorSet(__pendingGovernor);\\n  }\\n\\n  function acceptPendingGovernor() external virtual override onlyPendingGovernor {\\n    _acceptPendingGovernor();\\n  }\\n\\n  function _acceptPendingGovernor() internal {\\n    require(_pendingGovernor != address(0), 'Governable: no pending governor');\\n    _governor = _pendingGovernor;\\n    _pendingGovernor = address(0);\\n    emit PendingGovernorAccepted();\\n  }\\n\\n  function isGovernor(address _account) public view override returns (bool _isGovernor) {\\n    return _account == _governor;\\n  }\\n\\n  function isPendingGovernor(address _account) public view override returns (bool _isPendingGovernor) {\\n    return _account == _pendingGovernor;\\n  }\\n\\n  modifier onlyGovernor() {\\n    require(isGovernor(msg.sender), 'Governable: only governor');\\n    _;\\n  }\\n\\n  modifier onlyPendingGovernor() {\\n    require(isPendingGovernor(msg.sender), 'Governable: only pending governor');\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x68dd7bb59bc2c55daf51dd4b54de2238daedc00726a954616ab77a9013d778ea\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001e6338038062001e6383398101604081905262000034916200013b565b836001600160a01b038116620000905760405162461bcd60e51b815260206004820152601860248201527f476f7665726e61626c653a207a65726f20616464726573730000000000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0392831617905583161580620000c257506001600160a01b038216155b80620000d557506001600160a01b038116155b15620000f45760405163d92e233d60e01b815260040160405180910390fd5b60609290921b6001600160601b031916608052600380546001600160a01b03199081166001600160a01b0393841617909155600280549091169190921617905550620001bc565b600080600080608085870312156200015257600080fd5b84516200015f81620001a3565b60208601519094506200017281620001a3565b60408601519093506200018581620001a3565b60608601519092506200019881620001a3565b939692955090935050565b6001600160a01b0381168114620001b957600080fd5b50565b60805160601c611c81620001e26000396000818161023a01526105ce0152611c816000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063932b9848116100a2578063df08aed511610071578063df08aed51461025c578063e3056a341461028e578063e43581b81461029f578063ec00cdfc146102c1578063f235757f146102d457600080fd5b8063932b9848146101e75780639c82f2a4146101fa578063b3e333021461020d578063c45a01551461023557600080fd5b80631ef94b91116100e95780631ef94b91146101835780632b3297f9146101965780635269fb22146101a957806370d84493146101bc57806380bb2bac146101d157600080fd5b806309167ac31461011b5780630c0206c1146101415780630c340a241461015657806313f6986d1461017b575b600080fd5b61012e610129366004611516565b6102e7565b6040519081526020015b60405180910390f35b61015461014f3660046114d5565b61058e565b005b6000546001600160a01b03165b6040516001600160a01b039091168152602001610138565b610154610739565b600354610163906001600160a01b031681565b600254610163906001600160a01b031681565b6101546101b7366004611787565b6107a7565b6101c461082f565b604051610138919061184f565b6101d96108da565b604051610138929190611980565b6101546101f53660046114d5565b610bde565b6101546102083660046114b1565b610c8a565b61022061021b36600461174d565b610d30565b60405163ffffffff9091168152602001610138565b6101637f000000000000000000000000000000000000000000000000000000000000000081565b61027e61026a3660046114b1565b6001546001600160a01b0391821691161490565b6040519015158152602001610138565b6001546001600160a01b0316610163565b61027e6102ad3660046114b1565b6000546001600160a01b0391821691161490565b6101546102cf3660046114b1565b610d60565b6101546102e23660046114b1565b610dff565b6003546040516335d2155560e11b81523360048201526000916001600160a01b031690636ba42aaa90602401602060405180830381600087803b15801561032d57600080fd5b505af1158015610341573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103659190611581565b610382576040516318f8148560e11b815260040160405180910390fd5b60005b8481101561044b5760008686838181106103a1576103a1611bf8565b90506020028101906103b39190611a5f565b6103c19060208101906114b1565b90506103ce600582610e35565b6103eb576040516364f5b57960e01b815260040160405180910390fd5b61041b8186868581811061040157610401611bf8565b9050602002016020810190610416919061174d565b610e5c565b6104385760405163c57aa8bb60e01b815260040160405180910390fd5b508061044381611bb1565b915050610385565b506002546040516328da4f1160e11b81526001600160a01b03909116906351b49e229061047e908890889060040161189c565b602060405180830381600087803b15801561049857600080fd5b505af11580156104ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d09190611734565b9050806104f05760405163021cba9f60e01b815260040160405180910390fd5b6003546040516317fbade560e21b81523360048201526001600160a01b0390911690635feeb79490602401600060405180830381600087803b15801561053557600080fd5b505af1158015610549573d6000803e3d6000fd5b505050507f3b461cbe53de95c0bdba809bec2fc886c81db1f73bb09b5e440c4574a65814948160405161057e91815260200190565b60405180910390a1949350505050565b6000546001600160a01b031633146105c15760405162461bcd60e51b81526004016105b890611a28565b60405180910390fd5b60005b818110156106fb577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e5e31b1384848481811061060d5761060d611bf8565b905060200201602081019061062291906114b1565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561066157600080fd5b505afa158015610675573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106999190611581565b6106b65760405163157a7c9760e11b815260040160405180910390fd5b6106e88383838181106106cb576106cb611bf8565b90506020020160208101906106e091906114b1565b600590610f76565b50806106f381611bb1565b9150506105c4565b507f1bd67299505a4483b89b72b10a7ec17ae1c45b42143a0c21f970c01cb3d3976b828260405161072d929190611801565b60405180910390a15050565b6001546001600160a01b0316331461079d5760405162461bcd60e51b815260206004820152602160248201527f476f7665726e61626c653a206f6e6c792070656e64696e6720676f7665726e6f6044820152603960f91b60648201526084016105b8565b6107a5610f8b565b565b6000546001600160a01b031633146107d15760405162461bcd60e51b81526004016105b890611a28565b63ffffffff828116600081815260046020908152604091829020805463ffffffff1916948616948517905581519283528201929092527f96d3f2e3f1c6a977ec715a110b69be9f86cc0eccb8e260ccc653c577000760e8910161072d565b6060600061083d6005611033565b9050806001600160401b0381111561085757610857611c0e565b604051908082528060200260200182016040528015610880578160200160208202803683370190505b50915060005b818110156108d55761089960058261103d565b8382815181106108ab576108ab611bf8565b6001600160a01b0390921660209283029190910190910152806108cd81611bb1565b915050610886565b505090565b6060806000806108ea6005611033565b905060005b818110156109db57600061090460058361103d565b600254604051638f3dd47360e01b81526001600160a01b03808416600483015292935060009290911690638f3dd47390602401600060405180830381600087803b15801561095157600080fd5b505af1158015610965573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261098d91908101906115a3565b9050600061099a83611049565b9050600082511180156109b257506109b28382610e5c565b156109c557856109c181611bb1565b9650505b50505080806109d390611bb1565b9150506108ef565b50816001600160401b038111156109f4576109f4611c0e565b604051908082528060200260200182016040528015610a3a57816020015b604080518082019091526000815260606020820152815260200190600190039081610a125790505b509350816001600160401b03811115610a5557610a55611c0e565b604051908082528060200260200182016040528015610a7e578160200160208202803683370190505b50925060005b81811015610bd7576000610a9960058361103d565b600254604051638f3dd47360e01b81526001600160a01b03808416600483015292935060009290911690638f3dd47390602401600060405180830381600087803b158015610ae657600080fd5b505af1158015610afa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b2291908101906115a3565b90506000610b2f83611049565b905060008251118015610b475750610b478382610e5c565b15610bc1576040518060400160405280846001600160a01b03168152602001838152508887610b7590611b9a565b97508781518110610b8857610b88611bf8565b602002602001018190525080878781518110610ba657610ba6611bf8565b602002602001019063ffffffff16908163ffffffff16815250505b5050508080610bcf90611bb1565b915050610a84565b5050509091565b6000546001600160a01b03163314610c085760405162461bcd60e51b81526004016105b890611a28565b60005b81811015610c5857610c45838383818110610c2857610c28611bf8565b9050602002016020810190610c3d91906114b1565b600590611155565b5080610c5081611bb1565b915050610c0b565b507f4df1c604b7f323920540ec69ae0f523513b08dad189205bdaab3982bdb57028d828260405161072d929190611801565b6000546001600160a01b03163314610cb45760405162461bcd60e51b81526004016105b890611a28565b6001600160a01b038116610cdb5760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f673779832598d6a388768ee342f8de96fdd5c39a468a6955377cf1405b9652b9906020015b60405180910390a150565b63ffffffff8082166000908152600460205260409020541680610d5b57610d58600283611b22565b90505b919050565b6000546001600160a01b03163314610d8a5760405162461bcd60e51b81526004016105b890611a28565b6001600160a01b038116610db15760405163d92e233d60e01b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527fe293822acf7304fef3f55e503ea48c3a719fefa8c882cd1575032e83be952f7f90602001610d25565b6000546001600160a01b03163314610e295760405162461bcd60e51b81526004016105b890611a28565b610e328161116a565b50565b6001600160a01b038116600090815260018301602052604081205415155b90505b92915050565b604051631529401f60e11b815263ffffffff8216600482015260009081906001600160a01b03851690632a52803e9060240160206040518083038186803b158015610ea657600080fd5b505afa158015610eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ede919061176a565b6040516359f1998160e11b815263ffffffff85166004820152909150309063b3e333029060240160206040518083038186803b158015610f1d57600080fd5b505afa158015610f31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f55919061176a565b610f5f9082611afa565b63ffffffff164263ffffffff161015949350505050565b6000610e53836001600160a01b03841661120e565b6001546001600160a01b0316610fe35760405162461bcd60e51b815260206004820152601f60248201527f476f7665726e61626c653a206e6f2070656e64696e6720676f7665726e6f720060448201526064016105b8565b60018054600080546001600160a01b03199081166001600160a01b0384161782559091169091556040517fdc57ca23c46d823853915ed5a090ca0ee9db5eb6a46f5c58e1c9158de861fd769190a1565b6000610d58825490565b6000610e53838361125d565b600080826001600160a01b0316632f84cbf56040518163ffffffff1660e01b815260040160006040518083038186803b15801561108557600080fd5b505afa158015611099573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110c19190810190611636565b905060005b816020015160ff1681101561114e5763ffffffff8316158061111457508263ffffffff168260000151828151811061110057611100611bf8565b60200260200101516000015163ffffffff16105b1561113c57815180518290811061112d5761112d611bf8565b60200260200101516000015192505b8061114681611bb1565b9150506110c6565b5050919050565b6000610e53836001600160a01b038416611287565b6001600160a01b0381166111c05760405162461bcd60e51b815260206004820152601860248201527f476f7665726e61626c653a207a65726f2061646472657373000000000000000060448201526064016105b8565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f56bddfa0cee9697cebddf9acd7f23dc6583663b05e007b877056d05017994def90602001610d25565b600081815260018301602052604081205461125557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e56565b506000610e56565b600082600001828154811061127457611274611bf8565b9060005260206000200154905092915050565b600081815260018301602052604081205480156113705760006112ab600183611b53565b85549091506000906112bf90600190611b53565b90508181146113245760008660000182815481106112df576112df611bf8565b906000526020600020015490508087600001848154811061130257611302611bf8565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061133557611335611be2565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610e56565b6000915050610e56565b60008083601f84011261138c57600080fd5b5081356001600160401b038111156113a357600080fd5b6020830191508360208260051b85010111156113be57600080fd5b9250929050565b600082601f8301126113d657600080fd5b815160206001600160401b038211156113f1576113f1611c0e565b6113ff818360051b01611aca565b80838252828201915082860187848660071b890101111561141f57600080fd5b6000805b8681101561148757608080848c03121561143b578283fd5b611443611a7f565b845161144e81611c39565b81528488015161145d81611c39565b81890152604085810151908201526060808601519082015286529486019490920191600101611423565b509198975050505050505050565b8051610d5b81611c24565b805160ff81168114610d5b57600080fd5b6000602082840312156114c357600080fd5b81356114ce81611c24565b9392505050565b600080602083850312156114e857600080fd5b82356001600160401b038111156114fe57600080fd5b61150a8582860161137a565b90969095509350505050565b6000806000806040858703121561152c57600080fd5b84356001600160401b038082111561154357600080fd5b61154f8883890161137a565b9096509450602087013591508082111561156857600080fd5b506115758782880161137a565b95989497509550505050565b60006020828403121561159357600080fd5b815180151581146114ce57600080fd5b6000602082840312156115b557600080fd5b81516001600160401b03808211156115cc57600080fd5b818401915084601f8301126115e057600080fd5b8151818111156115f2576115f2611c0e565b611605601f8201601f1916602001611aca565b915080825285602082850101111561161c57600080fd5b61162d816020840160208601611b6a565b50949350505050565b60006020828403121561164857600080fd5b81516001600160401b038082111561165f57600080fd5b90830190610180828603121561167457600080fd5b61167c611aa7565b82518281111561168b57600080fd5b611697878286016113c5565b8252506116a6602084016114a0565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e082015261010091508183015182820152610120915081830151828201526101409150611711828401611495565b828201526101609150611725828401611495565b91810191909152949350505050565b60006020828403121561174657600080fd5b5051919050565b60006020828403121561175f57600080fd5b81356114ce81611c39565b60006020828403121561177c57600080fd5b81516114ce81611c39565b6000806040838503121561179a57600080fd5b82356117a581611c39565b915060208301356117b581611c39565b809150509250929050565b600081518084526020808501945080840160005b838110156117f657815163ffffffff16875295820195908201906001016117d4565b509495945050505050565b60208082528181018390526000908460408401835b8681101561184457823561182981611c24565b6001600160a01b031682529183019190830190600101611816565b509695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156118905783516001600160a01b03168352928401929184019160010161186b565b50909695505050505050565b60208082528181018390526000906040808401600586901b8501820187855b8881101561197257878303603f190184528135368b9003603e190181126118e157600080fd5b8a0180356118ee81611c24565b6001600160a01b031684528087013536829003601e1901811261191057600080fd5b810180356001600160401b0381111561192857600080fd5b80360383131561193757600080fd5b87898701528088870152606092508089830184880137600086820184015295880195601f01601f1916909401019250908501906001016118bb565b509098975050505050505050565b60006040808301818452808651808352606092508286019150828160051b8701016020808a0160005b84811015611a0857898403605f19018652815180516001600160a01b0316855283015183850189905280518986018190526119e9818a8801848801611b6a565b96840196601f01601f19169490940187019350908201906001016119a9565b505087820390880152611a1b81896117c0565b9998505050505050505050565b60208082526019908201527f476f7665726e61626c653a206f6e6c7920676f7665726e6f7200000000000000604082015260600190565b60008235603e19833603018112611a7557600080fd5b9190910192915050565b604051608081016001600160401b0381118282101715611aa157611aa1611c0e565b60405290565b60405161018081016001600160401b0381118282101715611aa157611aa1611c0e565b604051601f8201601f191681016001600160401b0381118282101715611af257611af2611c0e565b604052919050565b600063ffffffff808316818516808303821115611b1957611b19611bcc565b01949350505050565b600063ffffffff80841680611b4757634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b600082821015611b6557611b65611bcc565b500390565b60005b83811015611b85578181015183820152602001611b6d565b83811115611b94576000848401525b50505050565b600081611ba957611ba9611bcc565b506000190190565b6000600019821415611bc557611bc5611bcc565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e3257600080fd5b63ffffffff81168114610e3257600080fdfea2646970667358221220099d771f2cc3217cf25087bc59c2a6231501e0ad07a622401654a3c6c936dc1e64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063932b9848116100a2578063df08aed511610071578063df08aed51461025c578063e3056a341461028e578063e43581b81461029f578063ec00cdfc146102c1578063f235757f146102d457600080fd5b8063932b9848146101e75780639c82f2a4146101fa578063b3e333021461020d578063c45a01551461023557600080fd5b80631ef94b91116100e95780631ef94b91146101835780632b3297f9146101965780635269fb22146101a957806370d84493146101bc57806380bb2bac146101d157600080fd5b806309167ac31461011b5780630c0206c1146101415780630c340a241461015657806313f6986d1461017b575b600080fd5b61012e610129366004611516565b6102e7565b6040519081526020015b60405180910390f35b61015461014f3660046114d5565b61058e565b005b6000546001600160a01b03165b6040516001600160a01b039091168152602001610138565b610154610739565b600354610163906001600160a01b031681565b600254610163906001600160a01b031681565b6101546101b7366004611787565b6107a7565b6101c461082f565b604051610138919061184f565b6101d96108da565b604051610138929190611980565b6101546101f53660046114d5565b610bde565b6101546102083660046114b1565b610c8a565b61022061021b36600461174d565b610d30565b60405163ffffffff9091168152602001610138565b6101637f000000000000000000000000000000000000000000000000000000000000000081565b61027e61026a3660046114b1565b6001546001600160a01b0391821691161490565b6040519015158152602001610138565b6001546001600160a01b0316610163565b61027e6102ad3660046114b1565b6000546001600160a01b0391821691161490565b6101546102cf3660046114b1565b610d60565b6101546102e23660046114b1565b610dff565b6003546040516335d2155560e11b81523360048201526000916001600160a01b031690636ba42aaa90602401602060405180830381600087803b15801561032d57600080fd5b505af1158015610341573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103659190611581565b610382576040516318f8148560e11b815260040160405180910390fd5b60005b8481101561044b5760008686838181106103a1576103a1611bf8565b90506020028101906103b39190611a5f565b6103c19060208101906114b1565b90506103ce600582610e35565b6103eb576040516364f5b57960e01b815260040160405180910390fd5b61041b8186868581811061040157610401611bf8565b9050602002016020810190610416919061174d565b610e5c565b6104385760405163c57aa8bb60e01b815260040160405180910390fd5b508061044381611bb1565b915050610385565b506002546040516328da4f1160e11b81526001600160a01b03909116906351b49e229061047e908890889060040161189c565b602060405180830381600087803b15801561049857600080fd5b505af11580156104ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d09190611734565b9050806104f05760405163021cba9f60e01b815260040160405180910390fd5b6003546040516317fbade560e21b81523360048201526001600160a01b0390911690635feeb79490602401600060405180830381600087803b15801561053557600080fd5b505af1158015610549573d6000803e3d6000fd5b505050507f3b461cbe53de95c0bdba809bec2fc886c81db1f73bb09b5e440c4574a65814948160405161057e91815260200190565b60405180910390a1949350505050565b6000546001600160a01b031633146105c15760405162461bcd60e51b81526004016105b890611a28565b60405180910390fd5b60005b818110156106fb577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e5e31b1384848481811061060d5761060d611bf8565b905060200201602081019061062291906114b1565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561066157600080fd5b505afa158015610675573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106999190611581565b6106b65760405163157a7c9760e11b815260040160405180910390fd5b6106e88383838181106106cb576106cb611bf8565b90506020020160208101906106e091906114b1565b600590610f76565b50806106f381611bb1565b9150506105c4565b507f1bd67299505a4483b89b72b10a7ec17ae1c45b42143a0c21f970c01cb3d3976b828260405161072d929190611801565b60405180910390a15050565b6001546001600160a01b0316331461079d5760405162461bcd60e51b815260206004820152602160248201527f476f7665726e61626c653a206f6e6c792070656e64696e6720676f7665726e6f6044820152603960f91b60648201526084016105b8565b6107a5610f8b565b565b6000546001600160a01b031633146107d15760405162461bcd60e51b81526004016105b890611a28565b63ffffffff828116600081815260046020908152604091829020805463ffffffff1916948616948517905581519283528201929092527f96d3f2e3f1c6a977ec715a110b69be9f86cc0eccb8e260ccc653c577000760e8910161072d565b6060600061083d6005611033565b9050806001600160401b0381111561085757610857611c0e565b604051908082528060200260200182016040528015610880578160200160208202803683370190505b50915060005b818110156108d55761089960058261103d565b8382815181106108ab576108ab611bf8565b6001600160a01b0390921660209283029190910190910152806108cd81611bb1565b915050610886565b505090565b6060806000806108ea6005611033565b905060005b818110156109db57600061090460058361103d565b600254604051638f3dd47360e01b81526001600160a01b03808416600483015292935060009290911690638f3dd47390602401600060405180830381600087803b15801561095157600080fd5b505af1158015610965573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261098d91908101906115a3565b9050600061099a83611049565b9050600082511180156109b257506109b28382610e5c565b156109c557856109c181611bb1565b9650505b50505080806109d390611bb1565b9150506108ef565b50816001600160401b038111156109f4576109f4611c0e565b604051908082528060200260200182016040528015610a3a57816020015b604080518082019091526000815260606020820152815260200190600190039081610a125790505b509350816001600160401b03811115610a5557610a55611c0e565b604051908082528060200260200182016040528015610a7e578160200160208202803683370190505b50925060005b81811015610bd7576000610a9960058361103d565b600254604051638f3dd47360e01b81526001600160a01b03808416600483015292935060009290911690638f3dd47390602401600060405180830381600087803b158015610ae657600080fd5b505af1158015610afa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b2291908101906115a3565b90506000610b2f83611049565b905060008251118015610b475750610b478382610e5c565b15610bc1576040518060400160405280846001600160a01b03168152602001838152508887610b7590611b9a565b97508781518110610b8857610b88611bf8565b602002602001018190525080878781518110610ba657610ba6611bf8565b602002602001019063ffffffff16908163ffffffff16815250505b5050508080610bcf90611bb1565b915050610a84565b5050509091565b6000546001600160a01b03163314610c085760405162461bcd60e51b81526004016105b890611a28565b60005b81811015610c5857610c45838383818110610c2857610c28611bf8565b9050602002016020810190610c3d91906114b1565b600590611155565b5080610c5081611bb1565b915050610c0b565b507f4df1c604b7f323920540ec69ae0f523513b08dad189205bdaab3982bdb57028d828260405161072d929190611801565b6000546001600160a01b03163314610cb45760405162461bcd60e51b81526004016105b890611a28565b6001600160a01b038116610cdb5760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f673779832598d6a388768ee342f8de96fdd5c39a468a6955377cf1405b9652b9906020015b60405180910390a150565b63ffffffff8082166000908152600460205260409020541680610d5b57610d58600283611b22565b90505b919050565b6000546001600160a01b03163314610d8a5760405162461bcd60e51b81526004016105b890611a28565b6001600160a01b038116610db15760405163d92e233d60e01b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527fe293822acf7304fef3f55e503ea48c3a719fefa8c882cd1575032e83be952f7f90602001610d25565b6000546001600160a01b03163314610e295760405162461bcd60e51b81526004016105b890611a28565b610e328161116a565b50565b6001600160a01b038116600090815260018301602052604081205415155b90505b92915050565b604051631529401f60e11b815263ffffffff8216600482015260009081906001600160a01b03851690632a52803e9060240160206040518083038186803b158015610ea657600080fd5b505afa158015610eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ede919061176a565b6040516359f1998160e11b815263ffffffff85166004820152909150309063b3e333029060240160206040518083038186803b158015610f1d57600080fd5b505afa158015610f31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f55919061176a565b610f5f9082611afa565b63ffffffff164263ffffffff161015949350505050565b6000610e53836001600160a01b03841661120e565b6001546001600160a01b0316610fe35760405162461bcd60e51b815260206004820152601f60248201527f476f7665726e61626c653a206e6f2070656e64696e6720676f7665726e6f720060448201526064016105b8565b60018054600080546001600160a01b03199081166001600160a01b0384161782559091169091556040517fdc57ca23c46d823853915ed5a090ca0ee9db5eb6a46f5c58e1c9158de861fd769190a1565b6000610d58825490565b6000610e53838361125d565b600080826001600160a01b0316632f84cbf56040518163ffffffff1660e01b815260040160006040518083038186803b15801561108557600080fd5b505afa158015611099573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110c19190810190611636565b905060005b816020015160ff1681101561114e5763ffffffff8316158061111457508263ffffffff168260000151828151811061110057611100611bf8565b60200260200101516000015163ffffffff16105b1561113c57815180518290811061112d5761112d611bf8565b60200260200101516000015192505b8061114681611bb1565b9150506110c6565b5050919050565b6000610e53836001600160a01b038416611287565b6001600160a01b0381166111c05760405162461bcd60e51b815260206004820152601860248201527f476f7665726e61626c653a207a65726f2061646472657373000000000000000060448201526064016105b8565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f56bddfa0cee9697cebddf9acd7f23dc6583663b05e007b877056d05017994def90602001610d25565b600081815260018301602052604081205461125557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e56565b506000610e56565b600082600001828154811061127457611274611bf8565b9060005260206000200154905092915050565b600081815260018301602052604081205480156113705760006112ab600183611b53565b85549091506000906112bf90600190611b53565b90508181146113245760008660000182815481106112df576112df611bf8565b906000526020600020015490508087600001848154811061130257611302611bf8565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061133557611335611be2565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610e56565b6000915050610e56565b60008083601f84011261138c57600080fd5b5081356001600160401b038111156113a357600080fd5b6020830191508360208260051b85010111156113be57600080fd5b9250929050565b600082601f8301126113d657600080fd5b815160206001600160401b038211156113f1576113f1611c0e565b6113ff818360051b01611aca565b80838252828201915082860187848660071b890101111561141f57600080fd5b6000805b8681101561148757608080848c03121561143b578283fd5b611443611a7f565b845161144e81611c39565b81528488015161145d81611c39565b81890152604085810151908201526060808601519082015286529486019490920191600101611423565b509198975050505050505050565b8051610d5b81611c24565b805160ff81168114610d5b57600080fd5b6000602082840312156114c357600080fd5b81356114ce81611c24565b9392505050565b600080602083850312156114e857600080fd5b82356001600160401b038111156114fe57600080fd5b61150a8582860161137a565b90969095509350505050565b6000806000806040858703121561152c57600080fd5b84356001600160401b038082111561154357600080fd5b61154f8883890161137a565b9096509450602087013591508082111561156857600080fd5b506115758782880161137a565b95989497509550505050565b60006020828403121561159357600080fd5b815180151581146114ce57600080fd5b6000602082840312156115b557600080fd5b81516001600160401b03808211156115cc57600080fd5b818401915084601f8301126115e057600080fd5b8151818111156115f2576115f2611c0e565b611605601f8201601f1916602001611aca565b915080825285602082850101111561161c57600080fd5b61162d816020840160208601611b6a565b50949350505050565b60006020828403121561164857600080fd5b81516001600160401b038082111561165f57600080fd5b90830190610180828603121561167457600080fd5b61167c611aa7565b82518281111561168b57600080fd5b611697878286016113c5565b8252506116a6602084016114a0565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e082015261010091508183015182820152610120915081830151828201526101409150611711828401611495565b828201526101609150611725828401611495565b91810191909152949350505050565b60006020828403121561174657600080fd5b5051919050565b60006020828403121561175f57600080fd5b81356114ce81611c39565b60006020828403121561177c57600080fd5b81516114ce81611c39565b6000806040838503121561179a57600080fd5b82356117a581611c39565b915060208301356117b581611c39565b809150509250929050565b600081518084526020808501945080840160005b838110156117f657815163ffffffff16875295820195908201906001016117d4565b509495945050505050565b60208082528181018390526000908460408401835b8681101561184457823561182981611c24565b6001600160a01b031682529183019190830190600101611816565b509695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156118905783516001600160a01b03168352928401929184019160010161186b565b50909695505050505050565b60208082528181018390526000906040808401600586901b8501820187855b8881101561197257878303603f190184528135368b9003603e190181126118e157600080fd5b8a0180356118ee81611c24565b6001600160a01b031684528087013536829003601e1901811261191057600080fd5b810180356001600160401b0381111561192857600080fd5b80360383131561193757600080fd5b87898701528088870152606092508089830184880137600086820184015295880195601f01601f1916909401019250908501906001016118bb565b509098975050505050505050565b60006040808301818452808651808352606092508286019150828160051b8701016020808a0160005b84811015611a0857898403605f19018652815180516001600160a01b0316855283015183850189905280518986018190526119e9818a8801848801611b6a565b96840196601f01601f19169490940187019350908201906001016119a9565b505087820390880152611a1b81896117c0565b9998505050505050505050565b60208082526019908201527f476f7665726e61626c653a206f6e6c7920676f7665726e6f7200000000000000604082015260600190565b60008235603e19833603018112611a7557600080fd5b9190910192915050565b604051608081016001600160401b0381118282101715611aa157611aa1611c0e565b60405290565b60405161018081016001600160401b0381118282101715611aa157611aa1611c0e565b604051601f8201601f191681016001600160401b0381118282101715611af257611af2611c0e565b604052919050565b600063ffffffff808316818516808303821115611b1957611b19611bcc565b01949350505050565b600063ffffffff80841680611b4757634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b600082821015611b6557611b65611bcc565b500390565b60005b83811015611b85578181015183820152602001611b6d565b83811115611b94576000848401525b50505050565b600081611ba957611ba9611bcc565b506000190190565b6000600019821415611bc557611bc5611bcc565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e3257600080fd5b63ffffffff81168114610e3257600080fdfea2646970667358221220099d771f2cc3217cf25087bc59c2a6231501e0ad07a622401654a3c6c936dc1e64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "delay(uint32)": {
        "details": "If none was configured, then it will return half the given swap interval",
        "params": {
          "_swapInterval": "The swap interval to check"
        },
        "returns": {
          "__delay": "The configured delay"
        }
      },
      "setKeep3rV1(address)": {
        "details": "Will throw ZeroAddress if the zero address is passed",
        "params": {
          "_keep3rV1": "The Keep3r contract"
        }
      },
      "setSwapper(address)": {
        "details": "Will throw ZeroAddress if the zero address is passed",
        "params": {
          "_swapper": "The swapper contract"
        }
      },
      "startSubsidizingPairs(address[])": {
        "details": "Will throw InvalidPairAddress if any of the given addresses is not a valid DCA pair",
        "params": {
          "_pairs": "The new pairs to add"
        }
      },
      "stopSubsidizingPairs(address[])": {
        "params": {
          "_pairs": "The pairs to remove"
        }
      },
      "subsidizedPairs()": {
        "returns": {
          "_pairs": "An array with all the subsidized pairs"
        }
      }
    },
    "stateVariables": {
      "factory": {
        "return": "_factory The DCA Factory",
        "returns": {
          "_0": "_factory The DCA Factory"
        }
      },
      "keep3rV1": {
        "return": "_keeper The Keep3r contract",
        "returns": {
          "_0": "_keeper The Keep3r contract"
        }
      },
      "swapper": {
        "return": "_swapper The DCA swapper",
        "returns": {
          "_0": "_swapper The DCA swapper"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidPairAddress()": [
        {
          "notice": "Thrown when trying to subsidize an address that isn't a DCA pair"
        }
      ],
      "MustWaitDelay()": [
        {
          "notice": "Thrown when a pair can technically be swapped, but the delay doesn't allow it"
        }
      ],
      "NotAKeeper()": [
        {
          "notice": "Thrown when the caller executing work is not a keeper"
        }
      ],
      "NotWorked()": [
        {
          "notice": "Thrown when the caller tries to execute work with no pairs"
        }
      ],
      "PairNotSubsidized()": [
        {
          "notice": "Thrown when trying to work on a pair that is not being subsidized"
        }
      ]
    },
    "events": {
      "DelaySet(uint32,uint32)": {
        "notice": "Emitted when a new delay is configured"
      },
      "Keep3rV1Set(address)": {
        "notice": "Emitted when a keep3r is used"
      },
      "StoppedSubsidizingPairs(address[])": {
        "notice": "Emitted when some pairs stop being subsidized"
      },
      "SubsidizingNewPairs(address[])": {
        "notice": "Emitted when new pairs are subsidized"
      },
      "SwapperSet(address)": {
        "notice": "Emitted when a new swapper is used"
      },
      "Worked(uint256)": {
        "notice": "Emitted when swaps are executed"
      }
    },
    "kind": "user",
    "methods": {
      "delay(uint32)": {
        "notice": "Returns the configured delay for a given swap interval"
      },
      "factory()": {
        "notice": "Returns the DCA factory"
      },
      "keep3rV1()": {
        "notice": "Returns the Keep3r contract"
      },
      "setKeep3rV1(address)": {
        "notice": "Sets a new address for the Keep3r contract"
      },
      "setSwapper(address)": {
        "notice": "Sets a new address for the swapper contract"
      },
      "startSubsidizingPairs(address[])": {
        "notice": "Adds some new pairs to the list of subsidized pairs"
      },
      "stopSubsidizingPairs(address[])": {
        "notice": "Removes some pairs from the list of subsidized pairs"
      },
      "subsidizedPairs()": {
        "notice": "Returns a list of all the pairs that are currently subsidized"
      },
      "swapper()": {
        "notice": "Returns the DCA swapper"
      },
      "work((address,bytes)[],uint32[])": {
        "notice": "Takes an array of swaps, and executes as many as possible, returning the amount that was swapped"
      },
      "workable()": {
        "notice": "This method isn't a view and it is extremelly expensive and inefficient. DO NOT call this method on-chain, it is for off-chain purposes only."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14844,
        "contract": "contracts/DCAKeep3rJob/DCAKeep3rJob.sol:DCAKeep3rJob",
        "label": "_governor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14846,
        "contract": "contracts/DCAKeep3rJob/DCAKeep3rJob.sol:DCAKeep3rJob",
        "label": "_pendingGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5377,
        "contract": "contracts/DCAKeep3rJob/DCAKeep3rJob.sol:DCAKeep3rJob",
        "label": "swapper",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDCASwapper)10584"
      },
      {
        "astId": 5381,
        "contract": "contracts/DCAKeep3rJob/DCAKeep3rJob.sol:DCAKeep3rJob",
        "label": "keep3rV1",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IKeep3rV1)10895"
      },
      {
        "astId": 5385,
        "contract": "contracts/DCAKeep3rJob/DCAKeep3rJob.sol:DCAKeep3rJob",
        "label": "_delay",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint32,t_uint32)"
      },
      {
        "astId": 5388,
        "contract": "contracts/DCAKeep3rJob/DCAKeep3rJob.sol:DCAKeep3rJob",
        "label": "_subsidizedPairs",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(AddressSet)3189_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDCASwapper)10584": {
        "encoding": "inplace",
        "label": "contract IDCASwapper",
        "numberOfBytes": "20"
      },
      "t_contract(IKeep3rV1)10895": {
        "encoding": "inplace",
        "label": "contract IKeep3rV1",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_struct(AddressSet)3189_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3188,
            "contract": "contracts/DCAKeep3rJob/DCAKeep3rJob.sol:DCAKeep3rJob",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2918_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2918_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2913,
            "contract": "contracts/DCAKeep3rJob/DCAKeep3rJob.sol:DCAKeep3rJob",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2917,
            "contract": "contracts/DCAKeep3rJob/DCAKeep3rJob.sol:DCAKeep3rJob",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}