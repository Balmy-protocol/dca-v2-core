{
  "address": "0x3dbC70b2c825329d13A33991028426cfF582f9B3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "internalType": "contract IDCATokenDescriptor",
          "name": "_descriptor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ExpiredDeadline",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HubAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyHubCanExecute",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "enum IDCAPermissionManager.Permission[]",
              "name": "permissions",
              "type": "uint8[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDCAPermissionManager.PermissionSet[]",
          "name": "permissions",
          "type": "tuple[]"
        }
      ],
      "name": "Modified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IDCATokenDescriptor",
          "name": "descriptor",
          "type": "address"
        }
      ],
      "name": "NFTDescriptorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PendingGovernorAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pendingGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMISSION_PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMISSION_SET_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptPendingGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "enum IDCAPermissionManager.Permission",
          "name": "_permission",
          "type": "uint8"
        }
      ],
      "name": "hasPermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "enum IDCAPermissionManager.Permission[]",
          "name": "_permissions",
          "type": "uint8[]"
        }
      ],
      "name": "hasPermissions",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "_hasPermissions",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hub",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isGovernor",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isPendingGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isPendingGovernor",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastOwnershipChange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "enum IDCAPermissionManager.Permission[]",
              "name": "permissions",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct IDCAPermissionManager.PermissionSet[]",
          "name": "_permissions",
          "type": "tuple[]"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "enum IDCAPermissionManager.Permission[]",
              "name": "permissions",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct IDCAPermissionManager.PermissionSet[]",
          "name": "_permissions",
          "type": "tuple[]"
        }
      ],
      "name": "modify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftDescriptor",
      "outputs": [
        {
          "internalType": "contract IDCATokenDescriptor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "enum IDCAPermissionManager.Permission[]",
              "name": "permissions",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct IDCAPermissionManager.PermissionSet[]",
          "name": "_permissions",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "permissionPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hub",
          "type": "address"
        }
      ],
      "name": "setHub",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDCATokenDescriptor",
          "name": "_descriptor",
          "type": "address"
        }
      ],
      "name": "setNFTDescriptor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__pendingGovernor",
          "type": "address"
        }
      ],
      "name": "setPendingGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenPermissions",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "permissions",
          "type": "uint8"
        },
        {
          "internalType": "uint248",
          "name": "lastUpdated",
          "type": "uint248"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa528e301b9ef69b4e52bc4b1181d8f1a75af84f71f4c793337967260fb36528b",
  "receipt": {
    "to": null,
    "from": "0xa71405F7D11734F03F2616b93EAEd22604C978Bf",
    "contractAddress": "0x3dbC70b2c825329d13A33991028426cfF582f9B3",
    "transactionIndex": 0,
    "gasUsed": "2651612",
    "logsBloom": "0x
    "blockHash": "0xed3e572201ccbc88ba86e9fe2e2b9aa4f60c076c48f1b28c5caade665c5ac175",
    "transactionHash": "0xa528e301b9ef69b4e52bc4b1181d8f1a75af84f71f4c793337967260fb36528b",
    "logs": [],
    "blockNumber": 755738,
    "cumulativeGasUsed": "2651612",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1a00e1E311009E56e3b0B9Ed6F86f5Ce128a1C01",
    "0x4f8cc084436Eb5de497DD812871b316ca04ADC57"
  ],
  "solcInputHash": "c05c06b1a5e910552d4718935471de1d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"contract IDCATokenDescriptor\",\"name\":\"_descriptor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ExpiredDeadline\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HubAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyHubCanExecute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"enum IDCAPermissionManager.Permission[]\",\"name\":\"permissions\",\"type\":\"uint8[]\"}],\"indexed\":false,\"internalType\":\"struct IDCAPermissionManager.PermissionSet[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"name\":\"Modified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IDCATokenDescriptor\",\"name\":\"descriptor\",\"type\":\"address\"}],\"name\":\"NFTDescriptorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PendingGovernorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMISSION_PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMISSION_SET_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"enum IDCAPermissionManager.Permission\",\"name\":\"_permission\",\"type\":\"uint8\"}],\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"enum IDCAPermissionManager.Permission[]\",\"name\":\"_permissions\",\"type\":\"uint8[]\"}],\"name\":\"hasPermissions\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_hasPermissions\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hub\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isGovernor\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isPendingGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isPendingGovernor\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastOwnershipChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"enum IDCAPermissionManager.Permission[]\",\"name\":\"permissions\",\"type\":\"uint8[]\"}],\"internalType\":\"struct IDCAPermissionManager.PermissionSet[]\",\"name\":\"_permissions\",\"type\":\"tuple[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"enum IDCAPermissionManager.Permission[]\",\"name\":\"permissions\",\"type\":\"uint8[]\"}],\"internalType\":\"struct IDCAPermissionManager.PermissionSet[]\",\"name\":\"_permissions\",\"type\":\"tuple[]\"}],\"name\":\"modify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftDescriptor\",\"outputs\":[{\"internalType\":\"contract IDCATokenDescriptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"enum IDCAPermissionManager.Permission[]\",\"name\":\"permissions\",\"type\":\"uint8[]\"}],\"internalType\":\"struct IDCAPermissionManager.PermissionSet[]\",\"name\":\"_permissions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"permissionPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hub\",\"type\":\"address\"}],\"name\":\"setHub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDCATokenDescriptor\",\"name\":\"_descriptor\",\"type\":\"address\"}],\"name\":\"setNFTDescriptor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPermissions\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"permissions\",\"type\":\"uint8\"},{\"internalType\":\"uint248\",\"name\":\"lastUpdated\",\"type\":\"uint248\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"_0\":\"The domain seperator used in encoding of permit signature\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Will revert with OnlyHubCanExecute if the caller is not the hub\",\"params\":{\"_id\":\"The token's id\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"hasPermission(uint256,address,uint8)\":{\"params\":{\"_address\":\"The address of the user to check\",\"_id\":\"The id of the token to check\",\"_permission\":\"The permission to check\"},\"returns\":{\"_0\":\"Whether the user has the permission or not\"}},\"hasPermissions(uint256,address,uint8[])\":{\"params\":{\"_address\":\"The address of the user to check\",\"_id\":\"The id of the token to check\",\"_permissions\":\"The permissions to check\"},\"returns\":{\"_hasPermissions\":\"Whether the user has each permission or not\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(uint256,address,(address,uint8[])[])\":{\"details\":\"Will revert with OnlyHubCanExecute if the caller is not the hub\",\"params\":{\"_id\":\"The id of the new NFT\",\"_owner\":\"The owner of the new NFT\",\"_permissions\":\"Permissions to set for the new NFT\"}},\"modify(uint256,(address,uint8[])[])\":{\"details\":\"Will revert with NotOwner if the caller is not the token's owner. Operators that are not part of the given permission sets do not see their permissions modified. In order to remove permissions to an operator, provide an empty list of permissions for them\",\"params\":{\"_id\":\"The token's id\",\"_permissions\":\"A list of permission sets\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"permissionPermit((address,uint8[])[],uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"This method works similarly to `modify`, but instead of being executed by the owner, it can be set my signature\",\"params\":{\"_deadline\":\"The deadline timestamp by which the call must be mined for the approve to work\",\"_permissions\":\"The permissions to set\",\"_r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"_s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"_tokenId\":\"The token's id\",\"_v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"_deadline\":\"The deadline timestamp by which the call must be mined for the approve to work\",\"_r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"_s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"_spender\":\"The account that is being approved\",\"_tokenId\":\"The ID of the token that is being approved for spending\",\"_v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setHub(address)\":{\"details\":\"Can only be successfully executed once. Once it's set, it can be modified again Will revert: With ZeroAddress if address is zero With HubAlreadySet if the hub has already been set\",\"params\":{\"_hub\":\"The address to set for the hub\"}},\"setNFTDescriptor(address)\":{\"details\":\"Will revert with ZeroAddress if address is zero\",\"params\":{\"_descriptor\":\"The new NFT descriptor contract\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"stateVariables\":{\"PERMISSION_PERMIT_TYPEHASH\":{\"return\":\"The typehash for the permission permit\",\"returns\":{\"_0\":\"The typehash for the permission permit\"}},\"PERMISSION_SET_TYPEHASH\":{\"return\":\"The typehash for the permission set\",\"returns\":{\"_0\":\"The typehash for the permission set\"}},\"PERMIT_TYPEHASH\":{\"return\":\"The typehash for the permit\",\"returns\":{\"_0\":\"The typehash for the permit\"}},\"hub\":{\"return\":\"The address of the DCA Hub\",\"returns\":{\"_0\":\"The address of the DCA Hub\"}},\"nftDescriptor\":{\"return\":\"The contract for the NFT descriptor\",\"returns\":{\"_0\":\"The contract for the NFT descriptor\"}},\"nonces\":{\"params\":{\"_user\":\"The address of the user\"},\"return\":\"_nonce The next nonce to use\",\"returns\":{\"_0\":\"_nonce The next nonce to use\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ExpiredDeadline()\":[{\"notice\":\"Thrown when a user tries to execute a permit with an expired deadline\"}],\"HubAlreadySet()\":[{\"notice\":\"Thrown when a user tries to set the hub, once it was already set\"}],\"InvalidSignature()\":[{\"notice\":\"Thrown when a user tries to execute a permit with an invalid signature\"}],\"NotOwner()\":[{\"notice\":\"Thrown when a user tries to modify permissions for a token they do not own\"}],\"OnlyHubCanExecute()\":[{\"notice\":\"Thrown when a user calls a method that can only be executed by the hub\"}],\"ZeroAddress()\":[{\"notice\":\"Thrown when a user provides a zero address when they shouldn't\"}]},\"events\":{\"Modified(uint256,(address,uint8[])[])\":{\"notice\":\"Emitted when permissions for a token are modified\"},\"NFTDescriptorSet(address)\":{\"notice\":\"Emitted when the address for a new descritor is set\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"The domain separator used in the permit signature\"},\"PERMISSION_PERMIT_TYPEHASH()\":{\"notice\":\"The permit typehash used in the permission permit signature\"},\"PERMISSION_SET_TYPEHASH()\":{\"notice\":\"The permit typehash used in the permission permit signature\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The permit typehash used in the permit signature\"},\"burn(uint256)\":{\"notice\":\"Burns the NFT with the given id, and clears all permissions\"},\"hasPermission(uint256,address,uint8)\":{\"notice\":\"Returns whether the given address has the permission for the given token\"},\"hasPermissions(uint256,address,uint8[])\":{\"notice\":\"Returns whether the given address has the permissions for the given token\"},\"hub()\":{\"notice\":\"Returns the address of the DCA Hub\"},\"mint(uint256,address,(address,uint8[])[])\":{\"notice\":\"Mints a new NFT with the given id, and sets the permissions for it\"},\"modify(uint256,(address,uint8[])[])\":{\"notice\":\"Sets new permissions for the given tokens\"},\"nftDescriptor()\":{\"notice\":\"Returns the NFT descriptor contract\"},\"nonces(address)\":{\"notice\":\"Returns the next nonce to use for a given user\"},\"permissionPermit((address,uint8[])[],uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Sets permissions via signature\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approves spending of a specific token ID by spender via signature\"},\"setHub(address)\":{\"notice\":\"Sets the address for the hub\"},\"setNFTDescriptor(address)\":{\"notice\":\"Sets a new NFT descriptor\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DCAPermissionsManager/DCAPermissionsManager.sol\":\"DCAPermissionsManager\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/DCAPermissionsManager/DCAPermissionsManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.7 <0.9.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol';\\nimport '../interfaces/IDCATokenDescriptor.sol';\\nimport '../interfaces/IDCAPermissionManager.sol';\\nimport '../libraries/PermissionMath.sol';\\nimport '../utils/Governable.sol';\\n\\n// Note: ideally, this would be part of the DCAHub. However, since we've reached the max bytecode size, we needed to make it its own contract\\ncontract DCAPermissionsManager is ERC721, EIP712, Governable, IDCAPermissionManager {\\n  struct TokenPermission {\\n    // The actual permissions\\n    uint8 permissions;\\n    // The block number when it was last updated\\n    uint248 lastUpdated;\\n  }\\n\\n  using PermissionMath for Permission[];\\n  using PermissionMath for uint8;\\n\\n  /// @inheritdoc IDCAPermissionManager\\n  bytes32 public constant PERMIT_TYPEHASH = keccak256('Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)');\\n  /// @inheritdoc IDCAPermissionManager\\n  bytes32 public constant PERMISSION_PERMIT_TYPEHASH =\\n    keccak256(\\n      'PermissionPermit(PermissionSet[] permissions,uint256 tokenId,uint256 nonce,uint256 deadline)PermissionSet(address operator,uint8[] permissions)'\\n    );\\n  /// @inheritdoc IDCAPermissionManager\\n  bytes32 public constant PERMISSION_SET_TYPEHASH = keccak256('PermissionSet(address operator,uint8[] permissions)');\\n  /// @inheritdoc IDCAPermissionManager\\n  IDCATokenDescriptor public nftDescriptor;\\n  /// @inheritdoc IDCAPermissionManager\\n  address public hub;\\n  /// @inheritdoc IDCAPermissionManager\\n  mapping(address => uint256) public nonces;\\n  mapping(uint256 => uint256) public lastOwnershipChange;\\n  mapping(uint256 => mapping(address => TokenPermission)) public tokenPermissions;\\n\\n  constructor(address _governor, IDCATokenDescriptor _descriptor)\\n    ERC721('Mean Finance DCA', 'DCA')\\n    EIP712('Mean Finance DCA', '1')\\n    Governable(_governor)\\n  {\\n    if (address(_descriptor) == address(0)) revert ZeroAddress();\\n    nftDescriptor = _descriptor;\\n  }\\n\\n  /// @inheritdoc IDCAPermissionManager\\n  function setHub(address _hub) external {\\n    if (_hub == address(0)) revert ZeroAddress();\\n    if (hub != address(0)) revert HubAlreadySet();\\n    hub = _hub;\\n  }\\n\\n  /// @inheritdoc IDCAPermissionManager\\n  function mint(\\n    uint256 _id,\\n    address _owner,\\n    PermissionSet[] calldata _permissions\\n  ) external {\\n    if (msg.sender != hub) revert OnlyHubCanExecute();\\n    _mint(_owner, _id);\\n    _setPermissions(_id, _permissions);\\n  }\\n\\n  /// @inheritdoc IDCAPermissionManager\\n  function hasPermission(\\n    uint256 _id,\\n    address _address,\\n    Permission _permission\\n  ) external view returns (bool) {\\n    if (ownerOf(_id) == _address) {\\n      return true;\\n    }\\n    TokenPermission memory _tokenPermission = tokenPermissions[_id][_address];\\n    // If there was an ownership change after the permission was last updated, then the address doesn't have the permission\\n    return _tokenPermission.permissions.hasPermission(_permission) && lastOwnershipChange[_id] < _tokenPermission.lastUpdated;\\n  }\\n\\n  /// @inheritdoc IDCAPermissionManager\\n  function hasPermissions(\\n    uint256 _id,\\n    address _address,\\n    Permission[] calldata _permissions\\n  ) external view returns (bool[] memory _hasPermissions) {\\n    _hasPermissions = new bool[](_permissions.length);\\n    if (ownerOf(_id) == _address) {\\n      // If the address is the owner, then they have all permissions\\n      for (uint256 i; i < _permissions.length; i++) {\\n        _hasPermissions[i] = true;\\n      }\\n    } else {\\n      // If it's not the owner, then check one by one\\n      TokenPermission memory _tokenPermission = tokenPermissions[_id][_address];\\n      if (lastOwnershipChange[_id] < _tokenPermission.lastUpdated) {\\n        for (uint256 i; i < _permissions.length; i++) {\\n          if (_tokenPermission.permissions.hasPermission(_permissions[i])) {\\n            _hasPermissions[i] = true;\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  /// @inheritdoc IDCAPermissionManager\\n  function burn(uint256 _id) external {\\n    if (msg.sender != hub) revert OnlyHubCanExecute();\\n    _burn(_id);\\n  }\\n\\n  /// @inheritdoc IDCAPermissionManager\\n  function modify(uint256 _id, PermissionSet[] calldata _permissions) external {\\n    if (msg.sender != ownerOf(_id)) revert NotOwner();\\n    _modify(_id, _permissions);\\n  }\\n\\n  /// @inheritdoc IDCAPermissionManager\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n    return _domainSeparatorV4();\\n  }\\n\\n  /// @inheritdoc IDCAPermissionManager\\n  function permit(\\n    address _spender,\\n    uint256 _tokenId,\\n    uint256 _deadline,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s\\n  ) external {\\n    if (block.timestamp > _deadline) revert ExpiredDeadline();\\n\\n    address _owner = ownerOf(_tokenId);\\n    bytes32 _structHash = keccak256(abi.encode(PERMIT_TYPEHASH, _spender, _tokenId, nonces[_owner]++, _deadline));\\n    bytes32 _hash = _hashTypedDataV4(_structHash);\\n\\n    address _signer = ECDSA.recover(_hash, _v, _r, _s);\\n    if (_signer != _owner) revert InvalidSignature();\\n\\n    _approve(_spender, _tokenId);\\n  }\\n\\n  /// @inheritdoc IDCAPermissionManager\\n  function permissionPermit(\\n    PermissionSet[] calldata _permissions,\\n    uint256 _tokenId,\\n    uint256 _deadline,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s\\n  ) external {\\n    if (block.timestamp > _deadline) revert ExpiredDeadline();\\n\\n    address _owner = ownerOf(_tokenId);\\n    bytes32 _structHash = keccak256(\\n      abi.encode(PERMISSION_PERMIT_TYPEHASH, keccak256(_encode(_permissions)), _tokenId, nonces[_owner]++, _deadline)\\n    );\\n    bytes32 _hash = _hashTypedDataV4(_structHash);\\n\\n    address _signer = ECDSA.recover(_hash, _v, _r, _s);\\n    if (_signer != _owner) revert InvalidSignature();\\n\\n    _modify(_tokenId, _permissions);\\n  }\\n\\n  /// @inheritdoc IDCAPermissionManager\\n  function setNFTDescriptor(IDCATokenDescriptor _descriptor) external onlyGovernor {\\n    if (address(_descriptor) == address(0)) revert ZeroAddress();\\n    nftDescriptor = _descriptor;\\n    emit NFTDescriptorSet(_descriptor);\\n  }\\n\\n  /// @inheritdoc ERC721\\n  function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n    return nftDescriptor.tokenURI(hub, _tokenId);\\n  }\\n\\n  function _encode(PermissionSet[] calldata _permissions) internal pure returns (bytes memory _result) {\\n    for (uint256 i; i < _permissions.length; i++) {\\n      _result = bytes.concat(_result, keccak256(_encode(_permissions[i])));\\n    }\\n  }\\n\\n  function _encode(PermissionSet calldata _permission) internal pure returns (bytes memory _result) {\\n    _result = abi.encode(PERMISSION_SET_TYPEHASH, _permission.operator, keccak256(_encode(_permission.permissions)));\\n  }\\n\\n  function _encode(Permission[] calldata _permissions) internal pure returns (bytes memory _result) {\\n    _result = new bytes(_permissions.length * 32);\\n    for (uint256 i; i < _permissions.length; i++) {\\n      _result[(i + 1) * 32 - 1] = bytes1(uint8(_permissions[i]));\\n    }\\n  }\\n\\n  function _modify(uint256 _id, PermissionSet[] calldata _permissions) internal {\\n    _setPermissions(_id, _permissions);\\n    emit Modified(_id, _permissions);\\n  }\\n\\n  function _setPermissions(uint256 _id, PermissionSet[] calldata _permissions) internal {\\n    uint248 _blockNumber = uint248(_getBlockNumber());\\n    for (uint256 i; i < _permissions.length; i++) {\\n      if (_permissions[i].permissions.length == 0) {\\n        delete tokenPermissions[_id][_permissions[i].operator];\\n      } else {\\n        tokenPermissions[_id][_permissions[i].operator] = TokenPermission({\\n          permissions: _permissions[i].permissions.toUInt8(),\\n          lastUpdated: _blockNumber\\n        });\\n      }\\n    }\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address _from,\\n    address _to,\\n    uint256 _id\\n  ) internal override {\\n    if (_to == address(0)) {\\n      // When token is being burned, we can delete this entry on the mapping\\n      delete lastOwnershipChange[_id];\\n    } else if (_from != address(0)) {\\n      // If the token is being minted, then no need to write this\\n      lastOwnershipChange[_id] = _getBlockNumber();\\n    }\\n  }\\n\\n  // Note: virtual so that it can be overriden in tests\\n  function _getBlockNumber() internal view virtual returns (uint256) {\\n    return block.number;\\n  }\\n}\\n\",\"keccak256\":\"0x8175484076b6d7bbc1a9297aa169893bf39007e19c079520a0aff027b3ca9efe\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDCAPermissionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.7 <0.9.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport './IDCATokenDescriptor.sol';\\n\\n/// @title The interface for all permission related matters\\n/// @notice These methods allow users to set and remove permissions to their positions\\ninterface IDCAPermissionManager is IERC721 {\\n  /// @notice Set of possible permissions\\n  enum Permission {\\n    INCREASE,\\n    REDUCE,\\n    WITHDRAW,\\n    TERMINATE\\n  }\\n\\n  /// @notice A set of permissions for a specific operator\\n  struct PermissionSet {\\n    // The address of the operator\\n    address operator;\\n    // The permissions given to the overator\\n    Permission[] permissions;\\n  }\\n\\n  /// @notice Emitted when permissions for a token are modified\\n  /// @param tokenId The id of the token\\n  /// @param permissions The set of permissions that were updated\\n  event Modified(uint256 tokenId, PermissionSet[] permissions);\\n\\n  /// @notice Emitted when the address for a new descritor is set\\n  /// @param descriptor The new descriptor contract\\n  event NFTDescriptorSet(IDCATokenDescriptor descriptor);\\n\\n  /// @notice Thrown when a user tries to set the hub, once it was already set\\n  error HubAlreadySet();\\n\\n  /// @notice Thrown when a user provides a zero address when they shouldn't\\n  error ZeroAddress();\\n\\n  /// @notice Thrown when a user calls a method that can only be executed by the hub\\n  error OnlyHubCanExecute();\\n\\n  /// @notice Thrown when a user tries to modify permissions for a token they do not own\\n  error NotOwner();\\n\\n  /// @notice Thrown when a user tries to execute a permit with an expired deadline\\n  error ExpiredDeadline();\\n\\n  /// @notice Thrown when a user tries to execute a permit with an invalid signature\\n  error InvalidSignature();\\n\\n  /// @notice The permit typehash used in the permit signature\\n  /// @return The typehash for the permit\\n  // solhint-disable-next-line func-name-mixedcase\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  /// @notice The permit typehash used in the permission permit signature\\n  /// @return The typehash for the permission permit\\n  // solhint-disable-next-line func-name-mixedcase\\n  function PERMISSION_PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  /// @notice The permit typehash used in the permission permit signature\\n  /// @return The typehash for the permission set\\n  // solhint-disable-next-line func-name-mixedcase\\n  function PERMISSION_SET_TYPEHASH() external pure returns (bytes32);\\n\\n  /// @notice The domain separator used in the permit signature\\n  /// @return The domain seperator used in encoding of permit signature\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /// @notice Returns the NFT descriptor contract\\n  /// @return The contract for the NFT descriptor\\n  function nftDescriptor() external returns (IDCATokenDescriptor);\\n\\n  /// @notice Returns the address of the DCA Hub\\n  /// @return The address of the DCA Hub\\n  function hub() external returns (address);\\n\\n  /// @notice Returns the next nonce to use for a given user\\n  /// @param _user The address of the user\\n  /// @return _nonce The next nonce to use\\n  function nonces(address _user) external returns (uint256 _nonce);\\n\\n  /// @notice Returns whether the given address has the permission for the given token\\n  /// @param _id The id of the token to check\\n  /// @param _address The address of the user to check\\n  /// @param _permission The permission to check\\n  /// @return Whether the user has the permission or not\\n  function hasPermission(\\n    uint256 _id,\\n    address _address,\\n    Permission _permission\\n  ) external view returns (bool);\\n\\n  /// @notice Returns whether the given address has the permissions for the given token\\n  /// @param _id The id of the token to check\\n  /// @param _address The address of the user to check\\n  /// @param _permissions The permissions to check\\n  /// @return _hasPermissions Whether the user has each permission or not\\n  function hasPermissions(\\n    uint256 _id,\\n    address _address,\\n    Permission[] calldata _permissions\\n  ) external view returns (bool[] memory _hasPermissions);\\n\\n  /// @notice Sets the address for the hub\\n  /// @dev Can only be successfully executed once. Once it's set, it can be modified again\\n  /// Will revert:\\n  /// With ZeroAddress if address is zero\\n  /// With HubAlreadySet if the hub has already been set\\n  /// @param _hub The address to set for the hub\\n  function setHub(address _hub) external;\\n\\n  /// @notice Mints a new NFT with the given id, and sets the permissions for it\\n  /// @dev Will revert with OnlyHubCanExecute if the caller is not the hub\\n  /// @param _id The id of the new NFT\\n  /// @param _owner The owner of the new NFT\\n  /// @param _permissions Permissions to set for the new NFT\\n  function mint(\\n    uint256 _id,\\n    address _owner,\\n    PermissionSet[] calldata _permissions\\n  ) external;\\n\\n  /// @notice Burns the NFT with the given id, and clears all permissions\\n  /// @dev Will revert with OnlyHubCanExecute if the caller is not the hub\\n  /// @param _id The token's id\\n  function burn(uint256 _id) external;\\n\\n  /// @notice Sets new permissions for the given tokens\\n  /// @dev Will revert with NotOwner if the caller is not the token's owner.\\n  /// Operators that are not part of the given permission sets do not see their permissions modified.\\n  /// In order to remove permissions to an operator, provide an empty list of permissions for them\\n  /// @param _id The token's id\\n  /// @param _permissions A list of permission sets\\n  function modify(uint256 _id, PermissionSet[] calldata _permissions) external;\\n\\n  /// @notice Approves spending of a specific token ID by spender via signature\\n  /// @param _spender The account that is being approved\\n  /// @param _tokenId The ID of the token that is being approved for spending\\n  /// @param _deadline The deadline timestamp by which the call must be mined for the approve to work\\n  /// @param _v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n  /// @param _r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n  /// @param _s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n  function permit(\\n    address _spender,\\n    uint256 _tokenId,\\n    uint256 _deadline,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s\\n  ) external;\\n\\n  /// @notice Sets permissions via signature\\n  /// @dev This method works similarly to `modify`, but instead of being executed by the owner, it can be set my signature\\n  /// @param _permissions The permissions to set\\n  /// @param _tokenId The token's id\\n  /// @param _deadline The deadline timestamp by which the call must be mined for the approve to work\\n  /// @param _v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n  /// @param _r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n  /// @param _s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n  function permissionPermit(\\n    PermissionSet[] calldata _permissions,\\n    uint256 _tokenId,\\n    uint256 _deadline,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s\\n  ) external;\\n\\n  /// @notice Sets a new NFT descriptor\\n  /// @dev Will revert with ZeroAddress if address is zero\\n  /// @param _descriptor The new NFT descriptor contract\\n  function setNFTDescriptor(IDCATokenDescriptor _descriptor) external;\\n}\\n\",\"keccak256\":\"0xf720ee98d4d27300f6c6eb2c46082fd5de3e46cb08ba814fffe5f8b2dbbeb98e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IDCATokenDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.7 <0.9.0;\\n\\n/// @title The interface for generating a token's description\\n/// @notice Contracts that implement this interface must return a base64 JSON with the entire description\\ninterface IDCATokenDescriptor {\\n  /// @notice Thrown when a user tries get the description of an unsupported interval\\n  error InvalidInterval();\\n\\n  /// @notice Generates a token's description, both the JSON and the image inside\\n  /// @param _hub The address of the DCA Hub\\n  /// @param _tokenId The token/position id\\n  /// @return _description The position's description\\n  function tokenURI(address _hub, uint256 _tokenId) external view returns (string memory _description);\\n\\n  /// @notice Returns a text description for the given swap interval. For example for 3600, returns 'Hourly'\\n  /// @dev Will revert with InvalidInterval if the function receives a unsupported interval\\n  /// @param _swapInterval The swap interval\\n  /// @return _description The description\\n  function intervalToDescription(uint32 _swapInterval) external pure returns (string memory _description);\\n}\\n\",\"keccak256\":\"0x31cfcc5eadd3f9d25d36724d68ba6d9ef4e7e0dc8520d62c396298d52dd8541f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/PermissionMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.7 <0.9.0;\\n\\nimport '../interfaces/IDCAPermissionManager.sol';\\n\\n/// @title Permission Math library\\n/// @notice Provides functions to easily convert from permissions to an int representation and viceversa\\nlibrary PermissionMath {\\n  /// @notice Takes a list of permissions and returns the int representation of the set that contains them all\\n  /// @param _permissions The list of permissions\\n  /// @return _representation The uint representation\\n  function toUInt8(IDCAPermissionManager.Permission[] memory _permissions) internal pure returns (uint8 _representation) {\\n    for (uint256 i; i < _permissions.length; i++) {\\n      _representation |= uint8(1 << uint8(_permissions[i]));\\n    }\\n  }\\n\\n  /// @notice Takes an int representation of a set of permissions, and returns whether it contains the given permission\\n  /// @param _representation The int representation\\n  /// @param _permission The permission to check for\\n  /// @return _hasPermission Whether the representation contains the given permission\\n  function hasPermission(uint8 _representation, IDCAPermissionManager.Permission _permission) internal pure returns (bool _hasPermission) {\\n    uint256 _bitMask = 1 << uint8(_permission);\\n    _hasPermission = (_representation & _bitMask) == _bitMask;\\n  }\\n}\\n\",\"keccak256\":\"0x3f8673f951bb7c98e1074eb4778628c004ce185a17ae5d0577d2d5f612e5c2f9\",\"license\":\"GPL-2.0-or-later\"},\"contracts/utils/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\n\\ninterface IGovernable {\\n  event PendingGovernorSet(address pendingGovernor);\\n  event PendingGovernorAccepted();\\n\\n  function setPendingGovernor(address _pendingGovernor) external;\\n\\n  function acceptPendingGovernor() external;\\n\\n  function governor() external view returns (address);\\n\\n  function pendingGovernor() external view returns (address);\\n\\n  function isGovernor(address _account) external view returns (bool _isGovernor);\\n\\n  function isPendingGovernor(address _account) external view returns (bool _isPendingGovernor);\\n}\\n\\nabstract contract Governable is IGovernable {\\n  address private _governor;\\n  address private _pendingGovernor;\\n\\n  constructor(address __governor) {\\n    require(__governor != address(0), 'Governable: zero address');\\n    _governor = __governor;\\n  }\\n\\n  function governor() external view override returns (address) {\\n    return _governor;\\n  }\\n\\n  function pendingGovernor() external view override returns (address) {\\n    return _pendingGovernor;\\n  }\\n\\n  function setPendingGovernor(address __pendingGovernor) external virtual override onlyGovernor {\\n    _setPendingGovernor(__pendingGovernor);\\n  }\\n\\n  function _setPendingGovernor(address __pendingGovernor) internal {\\n    require(__pendingGovernor != address(0), 'Governable: zero address');\\n    _pendingGovernor = __pendingGovernor;\\n    emit PendingGovernorSet(__pendingGovernor);\\n  }\\n\\n  function acceptPendingGovernor() external virtual override onlyPendingGovernor {\\n    _acceptPendingGovernor();\\n  }\\n\\n  function _acceptPendingGovernor() internal {\\n    require(_pendingGovernor != address(0), 'Governable: no pending governor');\\n    _governor = _pendingGovernor;\\n    _pendingGovernor = address(0);\\n    emit PendingGovernorAccepted();\\n  }\\n\\n  function isGovernor(address _account) public view override returns (bool _isGovernor) {\\n    return _account == _governor;\\n  }\\n\\n  function isPendingGovernor(address _account) public view override returns (bool _isPendingGovernor) {\\n    return _account == _pendingGovernor;\\n  }\\n\\n  modifier onlyGovernor() {\\n    require(isGovernor(msg.sender), 'Governable: only governor');\\n    _;\\n  }\\n\\n  modifier onlyPendingGovernor() {\\n    require(isPendingGovernor(msg.sender), 'Governable: only pending governor');\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x3e174ea3fad0b05bfa210572348adbb36d10da19fb95765a42bbfc274c6eb9da\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102275760003560e01c8063551e123b11610130578063a22cb465116100b8578063e1fc815d1161007c578063e1fc815d14610552578063e3056a3414610579578063e43581b81461058a578063e985e9c5146105ac578063f235757f146105e857600080fd5b8063a22cb465146104d7578063b3d23ffc146104ea578063b88d4fde1461050a578063c87b56dd1461051d578063df08aed51461053057600080fd5b80637cad6cd1116100ff5780637cad6cd11461042a5780637ecebe001461043d578063823abfd91461045d57806393f03eed1461047057806395d89b41146104cf57600080fd5b8063551e123b146103d15780636352211e146103f157806370a08231146104045780637ac2ff7b1461041757600080fd5b806330adf81f116101b357806336b350981161018257806336b350981461037257806342842e0e1461038557806342966c681461039857806344267570146103ab5780634faa3883146103be57600080fd5b806330adf81f1461031d57806331962cdc146103445780633644e51514610357578063365a86fc1461035f57600080fd5b80630b7d4820116101fa5780630b7d4820146102a95780630c340a24146102bc57806313f6986d146102cd57806323b872dd146102d557806327d70dca146102e857600080fd5b806301ffc9a71461022c57806306fdde0314610254578063081812fc14610269578063095ea7b314610294575b600080fd5b61023f61023a366004612363565b6105fb565b60405190151581526020015b60405180910390f35b61025c61064d565b60405161024b91906123d8565b61027c6102773660046123eb565b6106df565b6040516001600160a01b03909116815260200161024b565b6102a76102a2366004612419565b610779565b005b6102a76102b7366004612491565b61088f565b6006546001600160a01b031661027c565b6102a76108d4565b6102a76102e33660046124dd565b610942565b61030f7fd9daa4fe1723edf458fc13a2d7c6e9147a88485b7932c0ada7e0dd16445f0dda81565b60405190815260200161024b565b61030f7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b6102a761035236600461251e565b610973565b61030f6109e6565b60095461027c906001600160a01b031681565b6102a761038036600461253b565b6109f5565b6102a76103933660046124dd565b610a3b565b6102a76103a63660046123eb565b610a56565b60085461027c906001600160a01b031681565b6102a76103cc3660046125ad565b610a8d565b6103e46103df36600461253b565b610bc2565b60405161024b9190612627565b61027c6103ff3660046123eb565b610d50565b61030f61041236600461251e565b610dc7565b6102a761042536600461266d565b610e4e565b6102a761043836600461251e565b610f7c565b61030f61044b36600461251e565b600a6020526000908152604090205481565b61023f61046b3660046126d6565b61104e565b6104ae61047e366004612714565b600c60209081526000928352604080842090915290825290205460ff81169061010090046001600160f81b031682565b6040805160ff90931683526001600160f81b0390911660208301520161024b565b61025c611103565b6102a76104e5366004612744565b611112565b61030f6104f83660046123eb565b600b6020526000908152604090205481565b6102a76105183660046127e6565b6111d7565b61025c61052b3660046123eb565b611209565b61023f61053e36600461251e565b6007546001600160a01b0391821691161490565b61030f7f5922b2c51ed135e5c892d4fa1b63ad30a4a2c7e7bfc895ee28a38b6e8899962781565b6007546001600160a01b031661027c565b61023f61059836600461251e565b6006546001600160a01b0391821691161490565b61023f6105ba366004612895565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6102a76105f636600461251e565b611289565b60006001600160e01b031982166380ac58cd60e01b148061062c57506001600160e01b03198216635b5e139f60e01b145b8061064757506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461065c906128c3565b80601f0160208091040260200160405190810160405280929190818152602001828054610688906128c3565b80156106d55780601f106106aa576101008083540402835291602001916106d5565b820191906000526020600020905b8154815290600101906020018083116106b857829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661075d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061078482610d50565b9050806001600160a01b0316836001600160a01b031614156107f25760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610754565b336001600160a01b038216148061080e575061080e81336105ba565b6108805760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610754565b61088a83836112e8565b505050565b61089883610d50565b6001600160a01b0316336001600160a01b0316146108c9576040516330cd747160e01b815260040160405180910390fd5b61088a838383611356565b6007546001600160a01b031633146109385760405162461bcd60e51b815260206004820152602160248201527f476f7665726e61626c653a206f6e6c792070656e64696e6720676f7665726e6f6044820152603960f91b6064820152608401610754565b6109406113a1565b565b61094c3382611449565b6109685760405162461bcd60e51b8152600401610754906128f8565b61088a83838361153c565b6001600160a01b03811661099a5760405163d92e233d60e01b815260040160405180910390fd5b6009546001600160a01b0316156109c4576040516379fb96cd60e01b815260040160405180910390fd5b600980546001600160a01b0319166001600160a01b0392909216919091179055565b60006109f06116e7565b905090565b6009546001600160a01b03163314610a205760405163fc88f3b160e01b815260040160405180910390fd5b610a2a83856117da565b610a35848383611928565b50505050565b61088a838383604051806020016040528060008152506111d7565b6009546001600160a01b03163314610a815760405163fc88f3b160e01b815260040160405180910390fd5b610a8a81611af0565b50565b83421115610aae5760405163f87d927160e01b815260040160405180910390fd5b6000610ab986610d50565b905060007f5922b2c51ed135e5c892d4fa1b63ad30a4a2c7e7bfc895ee28a38b6e88999627610ae88a8a611b97565b80516020918201206001600160a01b0385166000908152600a90925260408220805491928b929190610b198361295f565b909155506040805160208101959095528401929092526060830152608082015260a0810187905260c0016040516020818303038152906040528051906020012090506000610b6682611c12565b90506000610b7682888888611c60565b9050836001600160a01b0316816001600160a01b031614610baa57604051638baa579f60e01b815260040160405180910390fd5b610bb5898c8c611356565b5050505050505050505050565b60608167ffffffffffffffff811115610bdd57610bdd612777565b604051908082528060200260200182016040528015610c06578160200160208202803683370190505b509050836001600160a01b0316610c1c86610d50565b6001600160a01b03161415610c725760005b82811015610c6c576001828281518110610c4a57610c4a61297a565b9115156020928302919091019091015280610c648161295f565b915050610c2e565b50610d48565b6000858152600c602090815260408083206001600160a01b0388168452825280832081518083018352905460ff8116825261010090046001600160f81b0316818401819052898552600b9093529220541015610d465760005b83811015610d4457610d08858583818110610ce857610ce861297a565b9050602002016020810190610cfd9190612990565b835160ff1690611c88565b15610d32576001838281518110610d2157610d2161297a565b911515602092830291909101909101525b80610d3c8161295f565b915050610ccb565b505b505b949350505050565b6000818152600260205260408120546001600160a01b0316806106475760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610754565b60006001600160a01b038216610e325760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610754565b506001600160a01b031660009081526003602052604090205490565b83421115610e6f5760405163f87d927160e01b815260040160405180910390fd5b6000610e7a86610d50565b6001600160a01b0381166000908152600a60205260408120805492935090917f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad918a918a9185610ec98361295f565b909155506040805160208101959095526001600160a01b03909316928401929092526060830152608082015260a0810187905260c0016040516020818303038152906040528051906020012090506000610f2282611c12565b90506000610f3282888888611c60565b9050836001600160a01b0316816001600160a01b031614610f6657604051638baa579f60e01b815260040160405180910390fd5b610f708a8a6112e8565b50505050505050505050565b6006546001600160a01b03163314610fd25760405162461bcd60e51b815260206004820152601960248201527823b7bb32b93730b136329d1037b7363c9033b7bb32b93737b960391b6044820152606401610754565b6001600160a01b038116610ff95760405163d92e233d60e01b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0383169081179091556040519081527f58a2b9171063c6d38177053178bc1844b920884b05d7c9126c480d86b0716bce906020015b60405180910390a150565b6000826001600160a01b031661106385610d50565b6001600160a01b0316141561107a575060016110fc565b6000848152600c602090815260408083206001600160a01b038716845282529182902082518084019093525460ff81168084526101009091046001600160f81b0316918301919091526110cd9084611c88565b80156110f8575080602001516001600160f81b0316600b600087815260200190815260200160002054105b9150505b9392505050565b60606001805461065c906128c3565b6001600160a01b03821633141561116b5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610754565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6111e13383611449565b6111fd5760405162461bcd60e51b8152600401610754906128f8565b610a3584848484611cb3565b60085460095460405163e9dc637560e01b81526001600160a01b03918216600482015260248101849052606092919091169063e9dc637590604401600060405180830381865afa158015611261573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261064791908101906129ab565b6006546001600160a01b031633146112df5760405162461bcd60e51b815260206004820152601960248201527823b7bb32b93730b136329d1037b7363c9033b7bb32b93737b960391b6044820152606401610754565b610a8a81611ce6565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061131d82610d50565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611361838383611928565b7f5015559e4f379aa0dd2effee572c916b09bb68ed41ad9ab127c8066f052e164383838360405161139493929190612a38565b60405180910390a1505050565b6007546001600160a01b03166113f95760405162461bcd60e51b815260206004820152601f60248201527f476f7665726e61626c653a206e6f2070656e64696e6720676f7665726e6f72006044820152606401610754565b60078054600680546001600160a01b03199081166001600160a01b038416179091551690556040517fdc57ca23c46d823853915ed5a090ca0ee9db5eb6a46f5c58e1c9158de861fd7690600090a1565b6000818152600260205260408120546001600160a01b03166114c25760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610754565b60006114cd83610d50565b9050806001600160a01b0316846001600160a01b031614806115085750836001600160a01b03166114fd846106df565b6001600160a01b0316145b80610d4857506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16610d48565b826001600160a01b031661154f82610d50565b6001600160a01b0316146115b75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610754565b6001600160a01b0382166116195760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610754565b611624838383611d8a565b61162f6000826112e8565b6001600160a01b0383166000908152600360205260408120805460019290611658908490612b65565b90915550506001600160a01b0382166000908152600360205260408120805460019290611686908490612b7c565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60007f000000000000000000000000000000000000000000000000000000000000000046141561173657507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6001600160a01b0382166118305760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610754565b6000818152600260205260409020546001600160a01b0316156118955760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610754565b6118a160008383611d8a565b6001600160a01b03821660009081526003602052604081208054600192906118ca908490612b7c565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b4360005b82811015611ae9578383828181106119465761194661297a565b90506020028101906119589190612b94565b611966906020810190612bb4565b151590506119d0576000858152600c602052604081209085858481811061198f5761198f61297a565b90506020028101906119a19190612b94565b6119af90602081019061251e565b6001600160a01b031681526020810191909152604001600090812055611ad7565b6040518060400160405280611a478686858181106119f0576119f061297a565b9050602002810190611a029190612b94565b611a10906020810190612bb4565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611dcf92505050565b60ff1681526001600160f81b0384166020918201526000878152600c9091526040812090868685818110611a7d57611a7d61297a565b9050602002810190611a8f9190612b94565b611a9d90602081019061251e565b6001600160a01b03168152602080820192909252604001600020825192909101516001600160f81b03166101000260ff9092169190911790555b80611ae18161295f565b91505061192c565b5050505050565b6000611afb82610d50565b9050611b0981600084611d8a565b611b146000836112e8565b6001600160a01b0381166000908152600360205260408120805460019290611b3d908490612b65565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b606060005b82811015611c0b5781611bd1858584818110611bba57611bba61297a565b9050602002810190611bcc9190612b94565b611e2b565b8051602091820120604051611be7939201612bfe565b60405160208183030381529060405291508080611c039061295f565b915050611b9c565b5092915050565b6000610647611c1f6116e7565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611c7187878787611eb7565b91509150611c7e81611fa4565b5095945050505050565b600080826003811115611c9d57611c9d612a22565b600160ff9182161b948516169093149392505050565b611cbe84848461153c565b611cca8484848461215f565b610a355760405162461bcd60e51b815260040161075490612c20565b6001600160a01b038116611d3c5760405162461bcd60e51b815260206004820152601860248201527f476f7665726e61626c653a207a65726f206164647265737300000000000000006044820152606401610754565b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527f56bddfa0cee9697cebddf9acd7f23dc6583663b05e007b877056d05017994def90602001611043565b6001600160a01b038216611dab576000908152600b60205260408120555050565b6001600160a01b0383161561088a57436000828152600b6020526040902055505050565b6000805b8251811015611e2557828181518110611dee57611dee61297a565b60200260200101516003811115611e0757611e07612a22565b60ff166001901b821791508080611e1d9061295f565b915050611dd3565b50919050565b60607fd9daa4fe1723edf458fc13a2d7c6e9147a88485b7932c0ada7e0dd16445f0dda611e5b602084018461251e565b611e70611e6b6020860186612bb4565b61225a565b8051602091820120604051611ea1949392019283526001600160a01b03919091166020830152604082015260600190565b6040516020818303038152906040529050919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611eee5750600090506003611f9b565b8460ff16601b14158015611f0657508460ff16601c14155b15611f175750600090506004611f9b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611f6b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611f9457600060019250925050611f9b565b9150600090505b94509492505050565b6000816004811115611fb857611fb8612a22565b1415611fc15750565b6001816004811115611fd557611fd5612a22565b14156120235760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610754565b600281600481111561203757612037612a22565b14156120855760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610754565b600381600481111561209957612099612a22565b14156120f25760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610754565b600481600481111561210657612106612a22565b1415610a8a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610754565b60006001600160a01b0384163b1561225257604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906121a3903390899088908890600401612c72565b6020604051808303816000875af19250505080156121de575060408051601f3d908101601f191682019092526121db91810190612caf565b60015b612238573d80801561220c576040519150601f19603f3d011682016040523d82523d6000602084013e612211565b606091505b5080516122305760405162461bcd60e51b815260040161075490612c20565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610d48565b506001610d48565b6060612267826020612ccc565b67ffffffffffffffff81111561227f5761227f612777565b6040519080825280601f01601f1916602001820160405280156122a9576020820181803683370190505b50905060005b82811015611c0b578383828181106122c9576122c961297a565b90506020020160208101906122de9190612990565b60038111156122ef576122ef612a22565b60f81b8260016122ff8482612b7c565b61230a906020612ccc565b6123149190612b65565b815181106123245761232461297a565b60200101906001600160f81b031916908160001a905350806123458161295f565b9150506122af565b6001600160e01b031981168114610a8a57600080fd5b60006020828403121561237557600080fd5b81356110fc8161234d565b60005b8381101561239b578181015183820152602001612383565b83811115610a355750506000910152565b600081518084526123c4816020860160208601612380565b601f01601f19169290920160200192915050565b6020815260006110fc60208301846123ac565b6000602082840312156123fd57600080fd5b5035919050565b6001600160a01b0381168114610a8a57600080fd5b6000806040838503121561242c57600080fd5b823561243781612404565b946020939093013593505050565b60008083601f84011261245757600080fd5b50813567ffffffffffffffff81111561246f57600080fd5b6020830191508360208260051b850101111561248a57600080fd5b9250929050565b6000806000604084860312156124a657600080fd5b83359250602084013567ffffffffffffffff8111156124c457600080fd5b6124d086828701612445565b9497909650939450505050565b6000806000606084860312156124f257600080fd5b83356124fd81612404565b9250602084013561250d81612404565b929592945050506040919091013590565b60006020828403121561253057600080fd5b81356110fc81612404565b6000806000806060858703121561255157600080fd5b84359350602085013561256381612404565b9250604085013567ffffffffffffffff81111561257f57600080fd5b61258b87828801612445565b95989497509550505050565b803560ff811681146125a857600080fd5b919050565b600080600080600080600060c0888a0312156125c857600080fd5b873567ffffffffffffffff8111156125df57600080fd5b6125eb8a828b01612445565b909850965050602088013594506040880135935061260b60608901612597565b92506080880135915060a0880135905092959891949750929550565b6020808252825182820181905260009190848201906040850190845b81811015612661578351151583529284019291840191600101612643565b50909695505050505050565b60008060008060008060c0878903121561268657600080fd5b863561269181612404565b955060208701359450604087013593506126ad60608801612597565b92506080870135915060a087013590509295509295509295565b8035600481106125a857600080fd5b6000806000606084860312156126eb57600080fd5b8335925060208401356126fd81612404565b915061270b604085016126c7565b90509250925092565b6000806040838503121561272757600080fd5b82359150602083013561273981612404565b809150509250929050565b6000806040838503121561275757600080fd5b823561276281612404565b91506020830135801515811461273957600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156127b6576127b6612777565b604052919050565b600067ffffffffffffffff8211156127d8576127d8612777565b50601f01601f191660200190565b600080600080608085870312156127fc57600080fd5b843561280781612404565b9350602085013561281781612404565b925060408501359150606085013567ffffffffffffffff81111561283a57600080fd5b8501601f8101871361284b57600080fd5b803561285e612859826127be565b61278d565b81815288602083850101111561287357600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b600080604083850312156128a857600080fd5b82356128b381612404565b9150602083013561273981612404565b600181811c908216806128d757607f821691505b60208210811415611e2557634e487b7160e01b600052602260045260246000fd5b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600060001982141561297357612973612949565b5060010190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156129a257600080fd5b6110fc826126c7565b6000602082840312156129bd57600080fd5b815167ffffffffffffffff8111156129d457600080fd5b8201601f810184136129e557600080fd5b80516129f3612859826127be565b818152856020838501011115612a0857600080fd5b612a19826020830160208601612380565b95945050505050565b634e487b7160e01b600052602160045260246000fd5b8381526040602080830182905282820184905260009190606090818501600587811b8701840189875b8a811015612b5457898303605f190185528135368d9003603e19018112612a8757600080fd5b8c018389018135612a9781612404565b6001600160a01b031685528188013536839003601e19018112612ab957600080fd5b8201803567ffffffffffffffff811115612ad257600080fd5b80881b3603841315612ae357600080fd5b868a018c90529182905289860192508801906000905b80821015612b3f57612b0a836126c7565b6004808210612b2857634e487b7160e01b6000526021815260246000fd5b508452928901929189019160019190910190612af9565b50505094860194925090850190600101612a61565b50909b9a5050505050505050505050565b600082821015612b7757612b77612949565b500390565b60008219821115612b8f57612b8f612949565b500190565b60008235603e19833603018112612baa57600080fd5b9190910192915050565b6000808335601e19843603018112612bcb57600080fd5b83018035915067ffffffffffffffff821115612be657600080fd5b6020019150600581901b360382131561248a57600080fd5b60008351612c10818460208801612380565b9190910191825250602001919050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612ca5908301846123ac565b9695505050505050565b600060208284031215612cc157600080fd5b81516110fc8161234d565b6000816000190483118215151615612ce657612ce6612949565b50029056fea2646970667358221220d5547fe997be768e270f0205600d063e715744a4b0ae228a92c8157ac5f7c26364736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "returns": {
          "_0": "The domain seperator used in encoding of permit signature"
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Will revert with OnlyHubCanExecute if the caller is not the hub",
        "params": {
          "_id": "The token's id"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "hasPermission(uint256,address,uint8)": {
        "params": {
          "_address": "The address of the user to check",
          "_id": "The id of the token to check",
          "_permission": "The permission to check"
        },
        "returns": {
          "_0": "Whether the user has the permission or not"
        }
      },
      "hasPermissions(uint256,address,uint8[])": {
        "params": {
          "_address": "The address of the user to check",
          "_id": "The id of the token to check",
          "_permissions": "The permissions to check"
        },
        "returns": {
          "_hasPermissions": "Whether the user has each permission or not"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(uint256,address,(address,uint8[])[])": {
        "details": "Will revert with OnlyHubCanExecute if the caller is not the hub",
        "params": {
          "_id": "The id of the new NFT",
          "_owner": "The owner of the new NFT",
          "_permissions": "Permissions to set for the new NFT"
        }
      },
      "modify(uint256,(address,uint8[])[])": {
        "details": "Will revert with NotOwner if the caller is not the token's owner. Operators that are not part of the given permission sets do not see their permissions modified. In order to remove permissions to an operator, provide an empty list of permissions for them",
        "params": {
          "_id": "The token's id",
          "_permissions": "A list of permission sets"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "permissionPermit((address,uint8[])[],uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "This method works similarly to `modify`, but instead of being executed by the owner, it can be set my signature",
        "params": {
          "_deadline": "The deadline timestamp by which the call must be mined for the approve to work",
          "_permissions": "The permissions to set",
          "_r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
          "_s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
          "_tokenId": "The token's id",
          "_v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
        }
      },
      "permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "_deadline": "The deadline timestamp by which the call must be mined for the approve to work",
          "_r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
          "_s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
          "_spender": "The account that is being approved",
          "_tokenId": "The ID of the token that is being approved for spending",
          "_v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setHub(address)": {
        "details": "Can only be successfully executed once. Once it's set, it can be modified again Will revert: With ZeroAddress if address is zero With HubAlreadySet if the hub has already been set",
        "params": {
          "_hub": "The address to set for the hub"
        }
      },
      "setNFTDescriptor(address)": {
        "details": "Will revert with ZeroAddress if address is zero",
        "params": {
          "_descriptor": "The new NFT descriptor contract"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "stateVariables": {
      "PERMISSION_PERMIT_TYPEHASH": {
        "return": "The typehash for the permission permit",
        "returns": {
          "_0": "The typehash for the permission permit"
        }
      },
      "PERMISSION_SET_TYPEHASH": {
        "return": "The typehash for the permission set",
        "returns": {
          "_0": "The typehash for the permission set"
        }
      },
      "PERMIT_TYPEHASH": {
        "return": "The typehash for the permit",
        "returns": {
          "_0": "The typehash for the permit"
        }
      },
      "hub": {
        "return": "The address of the DCA Hub",
        "returns": {
          "_0": "The address of the DCA Hub"
        }
      },
      "nftDescriptor": {
        "return": "The contract for the NFT descriptor",
        "returns": {
          "_0": "The contract for the NFT descriptor"
        }
      },
      "nonces": {
        "params": {
          "_user": "The address of the user"
        },
        "return": "_nonce The next nonce to use",
        "returns": {
          "_0": "_nonce The next nonce to use"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ExpiredDeadline()": [
        {
          "notice": "Thrown when a user tries to execute a permit with an expired deadline"
        }
      ],
      "HubAlreadySet()": [
        {
          "notice": "Thrown when a user tries to set the hub, once it was already set"
        }
      ],
      "InvalidSignature()": [
        {
          "notice": "Thrown when a user tries to execute a permit with an invalid signature"
        }
      ],
      "NotOwner()": [
        {
          "notice": "Thrown when a user tries to modify permissions for a token they do not own"
        }
      ],
      "OnlyHubCanExecute()": [
        {
          "notice": "Thrown when a user calls a method that can only be executed by the hub"
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "Thrown when a user provides a zero address when they shouldn't"
        }
      ]
    },
    "events": {
      "Modified(uint256,(address,uint8[])[])": {
        "notice": "Emitted when permissions for a token are modified"
      },
      "NFTDescriptorSet(address)": {
        "notice": "Emitted when the address for a new descritor is set"
      }
    },
    "kind": "user",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "notice": "The domain separator used in the permit signature"
      },
      "PERMISSION_PERMIT_TYPEHASH()": {
        "notice": "The permit typehash used in the permission permit signature"
      },
      "PERMISSION_SET_TYPEHASH()": {
        "notice": "The permit typehash used in the permission permit signature"
      },
      "PERMIT_TYPEHASH()": {
        "notice": "The permit typehash used in the permit signature"
      },
      "burn(uint256)": {
        "notice": "Burns the NFT with the given id, and clears all permissions"
      },
      "hasPermission(uint256,address,uint8)": {
        "notice": "Returns whether the given address has the permission for the given token"
      },
      "hasPermissions(uint256,address,uint8[])": {
        "notice": "Returns whether the given address has the permissions for the given token"
      },
      "hub()": {
        "notice": "Returns the address of the DCA Hub"
      },
      "mint(uint256,address,(address,uint8[])[])": {
        "notice": "Mints a new NFT with the given id, and sets the permissions for it"
      },
      "modify(uint256,(address,uint8[])[])": {
        "notice": "Sets new permissions for the given tokens"
      },
      "nftDescriptor()": {
        "notice": "Returns the NFT descriptor contract"
      },
      "nonces(address)": {
        "notice": "Returns the next nonce to use for a given user"
      },
      "permissionPermit((address,uint8[])[],uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Sets permissions via signature"
      },
      "permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Approves spending of a specific token ID by spender via signature"
      },
      "setHub(address)": {
        "notice": "Sets the address for the hub"
      },
      "setNFTDescriptor(address)": {
        "notice": "Sets a new NFT descriptor"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1941,
        "contract": "contracts/DCAPermissionsManager/DCAPermissionsManager.sol:DCAPermissionsManager",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1943,
        "contract": "contracts/DCAPermissionsManager/DCAPermissionsManager.sol:DCAPermissionsManager",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1947,
        "contract": "contracts/DCAPermissionsManager/DCAPermissionsManager.sol:DCAPermissionsManager",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1951,
        "contract": "contracts/DCAPermissionsManager/DCAPermissionsManager.sol:DCAPermissionsManager",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1955,
        "contract": "contracts/DCAPermissionsManager/DCAPermissionsManager.sol:DCAPermissionsManager",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1961,
        "contract": "contracts/DCAPermissionsManager/DCAPermissionsManager.sol:DCAPermissionsManager",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 16135,
        "contract": "contracts/DCAPermissionsManager/DCAPermissionsManager.sol:DCAPermissionsManager",
        "label": "_governor",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 16137,
        "contract": "contracts/DCAPermissionsManager/DCAPermissionsManager.sol:DCAPermissionsManager",
        "label": "_pendingGovernor",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 8747,
        "contract": "contracts/DCAPermissionsManager/DCAPermissionsManager.sol:DCAPermissionsManager",
        "label": "nftDescriptor",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IDCATokenDescriptor)10548"
      },
      {
        "astId": 8750,
        "contract": "contracts/DCAPermissionsManager/DCAPermissionsManager.sol:DCAPermissionsManager",
        "label": "hub",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 8755,
        "contract": "contracts/DCAPermissionsManager/DCAPermissionsManager.sol:DCAPermissionsManager",
        "label": "nonces",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8759,
        "contract": "contracts/DCAPermissionsManager/DCAPermissionsManager.sol:DCAPermissionsManager",
        "label": "lastOwnershipChange",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8766,
        "contract": "contracts/DCAPermissionsManager/DCAPermissionsManager.sol:DCAPermissionsManager",
        "label": "tokenPermissions",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenPermission)8717_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDCATokenDescriptor)10548": {
        "encoding": "inplace",
        "label": "contract IDCATokenDescriptor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(TokenPermission)8717_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DCAPermissionsManager.TokenPermission)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenPermission)8717_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenPermission)8717_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct DCAPermissionsManager.TokenPermission))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(TokenPermission)8717_storage)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenPermission)8717_storage": {
        "encoding": "inplace",
        "label": "struct DCAPermissionsManager.TokenPermission",
        "members": [
          {
            "astId": 8714,
            "contract": "contracts/DCAPermissionsManager/DCAPermissionsManager.sol:DCAPermissionsManager",
            "label": "permissions",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8716,
            "contract": "contracts/DCAPermissionsManager/DCAPermissionsManager.sol:DCAPermissionsManager",
            "label": "lastUpdated",
            "offset": 1,
            "slot": "0",
            "type": "t_uint248"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint248": {
        "encoding": "inplace",
        "label": "uint248",
        "numberOfBytes": "31"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}