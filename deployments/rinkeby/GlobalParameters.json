{
  "address": "0x893ec5FD762D570C0A0fEA8b93Ed33Cdb0963f95",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_immediateGovernor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timeLockedGovernor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        },
        {
          "internalType": "contract IDCATokenDescriptor",
          "name": "_nftDescriptor",
          "type": "address"
        },
        {
          "internalType": "contract ITimeWeightedOracle",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptyDescription",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HighFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParams",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroInterval",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "FeeRecipientSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_feeSet",
          "type": "uint32"
        }
      ],
      "name": "LoanFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IDCATokenDescriptor",
          "name": "_descriptor",
          "type": "address"
        }
      ],
      "name": "NFTDescriptorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ITimeWeightedOracle",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "OracleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_feeSet",
          "type": "uint32"
        }
      ],
      "name": "SwapFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32[]",
          "name": "_swapIntervals",
          "type": "uint32[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "_descriptions",
          "type": "string[]"
        }
      ],
      "name": "SwapIntervalsAllowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32[]",
          "name": "_swapIntervals",
          "type": "uint32[]"
        }
      ],
      "name": "SwapIntervalsForbidden",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_PRECISION",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IMMEDIATE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TIME_LOCKED_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_swapIntervals",
          "type": "uint32[]"
        },
        {
          "internalType": "string[]",
          "name": "_descriptions",
          "type": "string[]"
        }
      ],
      "name": "addSwapIntervalsToAllowedList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowedSwapIntervals",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "__allowedSwapIntervals",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "intervalDescription",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_swapInterval",
          "type": "uint32"
        }
      ],
      "name": "isSwapIntervalAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanParameters",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isPaused",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "loanFee",
              "type": "uint32"
            }
          ],
          "internalType": "struct IDCAGlobalParameters.LoanParameters",
          "name": "_loanParameters",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftDescriptor",
      "outputs": [
        {
          "internalType": "contract IDCATokenDescriptor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract ITimeWeightedOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_swapIntervals",
          "type": "uint32[]"
        }
      ],
      "name": "removeSwapIntervalsFromAllowedList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanFee",
          "type": "uint32"
        }
      ],
      "name": "setLoanFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDCATokenDescriptor",
          "name": "_descriptor",
          "type": "address"
        }
      ],
      "name": "setNFTDescriptor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITimeWeightedOracle",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_swapFee",
          "type": "uint32"
        }
      ],
      "name": "setSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapParameters",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isPaused",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "swapFee",
              "type": "uint32"
            },
            {
              "internalType": "contract ITimeWeightedOracle",
              "name": "oracle",
              "type": "address"
            }
          ],
          "internalType": "struct IDCAGlobalParameters.SwapParameters",
          "name": "_swapParameters",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc37e5e0b4bafbdb77541b3aedf997fa11a0f4c79806e09d5b9ab62144211bed6",
  "receipt": {
    "to": null,
    "from": "0xd63455f6723772654Dddb596bA518D9179d5d932",
    "contractAddress": "0x893ec5FD762D570C0A0fEA8b93Ed33Cdb0963f95",
    "transactionIndex": 14,
    "gasUsed": "1793550",
    "logsBloom": "0x
    "blockHash": "0x13b7d9436c05a8106a9b34fda6649c9e23031af7b15638c8854707e7e1ce663d",
    "transactionHash": "0xc37e5e0b4bafbdb77541b3aedf997fa11a0f4c79806e09d5b9ab62144211bed6",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 8979129,
        "transactionHash": "0xc37e5e0b4bafbdb77541b3aedf997fa11a0f4c79806e09d5b9ab62144211bed6",
        "address": "0x893ec5FD762D570C0A0fEA8b93Ed33Cdb0963f95",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x313f8c5ec4103e5607b5d8b3519ab06a512037396eaf72a07527d8b838012ed4",
          "0x0000000000000000000000009012d9bbfdcee42c618f9464b4632568e6385dca",
          "0x000000000000000000000000d63455f6723772654dddb596ba518d9179d5d932"
        ],
        "data": "0x",
        "logIndex": 28,
        "blockHash": "0x13b7d9436c05a8106a9b34fda6649c9e23031af7b15638c8854707e7e1ce663d"
      },
      {
        "transactionIndex": 14,
        "blockNumber": 8979129,
        "transactionHash": "0xc37e5e0b4bafbdb77541b3aedf997fa11a0f4c79806e09d5b9ab62144211bed6",
        "address": "0x893ec5FD762D570C0A0fEA8b93Ed33Cdb0963f95",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xfb63867dc303889c4e19b6276d834e066500dd4210f4434d34089a246beec82a",
          "0x000000000000000000000000db4d1d0b78b71bbabb7b527007a80900c29929aa",
          "0x000000000000000000000000d63455f6723772654dddb596ba518d9179d5d932"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0x13b7d9436c05a8106a9b34fda6649c9e23031af7b15638c8854707e7e1ce663d"
      },
      {
        "transactionIndex": 14,
        "blockNumber": 8979129,
        "transactionHash": "0xc37e5e0b4bafbdb77541b3aedf997fa11a0f4c79806e09d5b9ab62144211bed6",
        "address": "0x893ec5FD762D570C0A0fEA8b93Ed33Cdb0963f95",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x313f8c5ec4103e5607b5d8b3519ab06a512037396eaf72a07527d8b838012ed4",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x313f8c5ec4103e5607b5d8b3519ab06a512037396eaf72a07527d8b838012ed4"
        ],
        "data": "0x",
        "logIndex": 30,
        "blockHash": "0x13b7d9436c05a8106a9b34fda6649c9e23031af7b15638c8854707e7e1ce663d"
      },
      {
        "transactionIndex": 14,
        "blockNumber": 8979129,
        "transactionHash": "0xc37e5e0b4bafbdb77541b3aedf997fa11a0f4c79806e09d5b9ab62144211bed6",
        "address": "0x893ec5FD762D570C0A0fEA8b93Ed33Cdb0963f95",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xfb63867dc303889c4e19b6276d834e066500dd4210f4434d34089a246beec82a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xfb63867dc303889c4e19b6276d834e066500dd4210f4434d34089a246beec82a"
        ],
        "data": "0x",
        "logIndex": 31,
        "blockHash": "0x13b7d9436c05a8106a9b34fda6649c9e23031af7b15638c8854707e7e1ce663d"
      }
    ],
    "blockNumber": 8979129,
    "cumulativeGasUsed": "4300854",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9012D9bbFdcEe42c618f9464b4632568e6385dCa",
    "0xdb4D1D0B78B71BBabb7B527007A80900c29929aA",
    "0x0daABaB6f7E7Bb6befA07F88cAE10E5113aF11Cc",
    "0xF7ec8086a46A045393B1502D9E8f107Fa20F7074",
    "0xE51EB42A53B042fb4f75cb1b49b8b9651E54d6cf"
  ],
  "solcInputHash": "d392bc89274cb27025074d3e3e3f4973",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_immediateGovernor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timeLockedGovernor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"contract IDCATokenDescriptor\",\"name\":\"_nftDescriptor\",\"type\":\"address\"},{\"internalType\":\"contract ITimeWeightedOracle\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyDescription\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HighFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroInterval\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_feeSet\",\"type\":\"uint32\"}],\"name\":\"LoanFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IDCATokenDescriptor\",\"name\":\"_descriptor\",\"type\":\"address\"}],\"name\":\"NFTDescriptorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ITimeWeightedOracle\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"OracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_feeSet\",\"type\":\"uint32\"}],\"name\":\"SwapFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"_swapIntervals\",\"type\":\"uint32[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_descriptions\",\"type\":\"string[]\"}],\"name\":\"SwapIntervalsAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"_swapIntervals\",\"type\":\"uint32[]\"}],\"name\":\"SwapIntervalsForbidden\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IMMEDIATE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_LOCKED_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_swapIntervals\",\"type\":\"uint32[]\"},{\"internalType\":\"string[]\",\"name\":\"_descriptions\",\"type\":\"string[]\"}],\"name\":\"addSwapIntervalsToAllowedList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedSwapIntervals\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"__allowedSwapIntervals\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"intervalDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_swapInterval\",\"type\":\"uint32\"}],\"name\":\"isSwapIntervalAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"loanFee\",\"type\":\"uint32\"}],\"internalType\":\"struct IDCAGlobalParameters.LoanParameters\",\"name\":\"_loanParameters\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftDescriptor\",\"outputs\":[{\"internalType\":\"contract IDCATokenDescriptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract ITimeWeightedOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_swapIntervals\",\"type\":\"uint32[]\"}],\"name\":\"removeSwapIntervalsFromAllowedList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanFee\",\"type\":\"uint32\"}],\"name\":\"setLoanFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDCATokenDescriptor\",\"name\":\"_descriptor\",\"type\":\"address\"}],\"name\":\"setNFTDescriptor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITimeWeightedOracle\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_swapFee\",\"type\":\"uint32\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"internalType\":\"contract ITimeWeightedOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct IDCAGlobalParameters.SwapParameters\",\"name\":\"_swapParameters\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DCAGlobalParameters/DCAGlobalParameters.sol\":\"DCAGlobalParameters\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98fac37221212c8f126f198d262a4df86394bd1a9969f61e40739fe8ac013dd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xab1f67e4c96dfe0e3875d22883c3dee5411914f40ce0c54ef407f030d803512e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x4878ef6c288f4cef3c2a288d32cc548c648831cc55503ad3d9a581ed3b93aad9\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"contracts/DCAGlobalParameters/DCAGlobalParameters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\n\\nimport '../interfaces/IDCAGlobalParameters.sol';\\nimport '../libraries/CommonErrors.sol';\\n\\ncontract DCAGlobalParameters is IDCAGlobalParameters, AccessControl, Pausable {\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  bytes32 public constant IMMEDIATE_ROLE = keccak256('IMMEDIATE_ROLE');\\n  bytes32 public constant TIME_LOCKED_ROLE = keccak256('TIME_LOCKED_ROLE');\\n\\n  address public override feeRecipient;\\n  IDCATokenDescriptor public override nftDescriptor;\\n  ITimeWeightedOracle public override oracle;\\n  uint32 public override swapFee = 3000; // 0.3%\\n  uint32 public override loanFee = 1000; // 0.1%\\n  uint24 public constant override FEE_PRECISION = 10000;\\n  uint32 public constant override MAX_FEE = 10 * FEE_PRECISION; // 10%\\n  mapping(uint32 => string) public override intervalDescription;\\n  EnumerableSet.UintSet internal _allowedSwapIntervals;\\n\\n  constructor(\\n    address _immediateGovernor,\\n    address _timeLockedGovernor,\\n    address _feeRecipient,\\n    IDCATokenDescriptor _nftDescriptor,\\n    ITimeWeightedOracle _oracle\\n  ) {\\n    if (\\n      _immediateGovernor == address(0) ||\\n      _timeLockedGovernor == address(0) ||\\n      _feeRecipient == address(0) ||\\n      address(_nftDescriptor) == address(0) ||\\n      address(_oracle) == address(0)\\n    ) revert CommonErrors.ZeroAddress();\\n    _setupRole(IMMEDIATE_ROLE, _immediateGovernor);\\n    _setupRole(TIME_LOCKED_ROLE, _timeLockedGovernor);\\n    // We set each role as its own admin, so they can assign new addresses with the same role\\n    _setRoleAdmin(IMMEDIATE_ROLE, IMMEDIATE_ROLE);\\n    _setRoleAdmin(TIME_LOCKED_ROLE, TIME_LOCKED_ROLE);\\n    feeRecipient = _feeRecipient;\\n    nftDescriptor = _nftDescriptor;\\n    oracle = _oracle;\\n  }\\n\\n  function setFeeRecipient(address _feeRecipient) external override onlyRole(IMMEDIATE_ROLE) {\\n    if (_feeRecipient == address(0)) revert CommonErrors.ZeroAddress();\\n    feeRecipient = _feeRecipient;\\n    emit FeeRecipientSet(_feeRecipient);\\n  }\\n\\n  function setNFTDescriptor(IDCATokenDescriptor _descriptor) external override onlyRole(IMMEDIATE_ROLE) {\\n    if (address(_descriptor) == address(0)) revert CommonErrors.ZeroAddress();\\n    nftDescriptor = _descriptor;\\n    emit NFTDescriptorSet(_descriptor);\\n  }\\n\\n  function setOracle(ITimeWeightedOracle _oracle) external override onlyRole(TIME_LOCKED_ROLE) {\\n    if (address(_oracle) == address(0)) revert CommonErrors.ZeroAddress();\\n    oracle = _oracle;\\n    emit OracleSet(_oracle);\\n  }\\n\\n  function setSwapFee(uint32 _swapFee) external override onlyRole(TIME_LOCKED_ROLE) {\\n    if (_swapFee > MAX_FEE) revert HighFee();\\n    swapFee = _swapFee;\\n    emit SwapFeeSet(_swapFee);\\n  }\\n\\n  function setLoanFee(uint32 _loanFee) external override onlyRole(TIME_LOCKED_ROLE) {\\n    if (_loanFee > MAX_FEE) revert HighFee();\\n    loanFee = _loanFee;\\n    emit LoanFeeSet(_loanFee);\\n  }\\n\\n  function addSwapIntervalsToAllowedList(uint32[] calldata _swapIntervals, string[] calldata _descriptions)\\n    external\\n    override\\n    onlyRole(IMMEDIATE_ROLE)\\n  {\\n    if (_swapIntervals.length != _descriptions.length) revert InvalidParams();\\n    for (uint256 i; i < _swapIntervals.length; i++) {\\n      if (_swapIntervals[i] == 0) revert ZeroInterval();\\n      if (bytes(_descriptions[i]).length == 0) revert EmptyDescription();\\n      _allowedSwapIntervals.add(_swapIntervals[i]);\\n      intervalDescription[_swapIntervals[i]] = _descriptions[i];\\n    }\\n    emit SwapIntervalsAllowed(_swapIntervals, _descriptions);\\n  }\\n\\n  function removeSwapIntervalsFromAllowedList(uint32[] calldata _swapIntervals) external override onlyRole(IMMEDIATE_ROLE) {\\n    for (uint256 i; i < _swapIntervals.length; i++) {\\n      _allowedSwapIntervals.remove(_swapIntervals[i]);\\n      delete intervalDescription[_swapIntervals[i]];\\n    }\\n    emit SwapIntervalsForbidden(_swapIntervals);\\n  }\\n\\n  function allowedSwapIntervals() external view override returns (uint32[] memory __allowedSwapIntervals) {\\n    uint256 _allowedSwapIntervalsLength = _allowedSwapIntervals.length();\\n    __allowedSwapIntervals = new uint32[](_allowedSwapIntervalsLength);\\n    for (uint256 i; i < _allowedSwapIntervalsLength; i++) {\\n      __allowedSwapIntervals[i] = uint32(_allowedSwapIntervals.at(i));\\n    }\\n  }\\n\\n  function isSwapIntervalAllowed(uint32 _swapInterval) external view override returns (bool) {\\n    return _allowedSwapIntervals.contains(_swapInterval);\\n  }\\n\\n  function paused() public view override(IDCAGlobalParameters, Pausable) returns (bool) {\\n    return super.paused();\\n  }\\n\\n  function pause() external override onlyRole(IMMEDIATE_ROLE) {\\n    _pause();\\n  }\\n\\n  function unpause() external override onlyRole(IMMEDIATE_ROLE) {\\n    _unpause();\\n  }\\n\\n  function loanParameters() external view override returns (LoanParameters memory _loanParameters) {\\n    _loanParameters.feeRecipient = feeRecipient;\\n    _loanParameters.isPaused = paused();\\n    _loanParameters.loanFee = loanFee;\\n  }\\n\\n  function swapParameters() external view override returns (SwapParameters memory _swapParameters) {\\n    _swapParameters.feeRecipient = feeRecipient;\\n    _swapParameters.isPaused = paused();\\n    _swapParameters.swapFee = swapFee;\\n    _swapParameters.oracle = oracle;\\n  }\\n}\\n\",\"keccak256\":\"0xa971083e4d3811982d6946dbe162891db3ede7ee545cd59b897a3f9e3fd73999\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDCAGlobalParameters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\nimport './ITimeWeightedOracle.sol';\\nimport './IDCATokenDescriptor.sol';\\n\\ninterface IDCAGlobalParameters {\\n  struct SwapParameters {\\n    address feeRecipient;\\n    bool isPaused;\\n    uint32 swapFee;\\n    ITimeWeightedOracle oracle;\\n  }\\n\\n  struct LoanParameters {\\n    address feeRecipient;\\n    bool isPaused;\\n    uint32 loanFee;\\n  }\\n\\n  event FeeRecipientSet(address _feeRecipient);\\n  event NFTDescriptorSet(IDCATokenDescriptor _descriptor);\\n  event OracleSet(ITimeWeightedOracle _oracle);\\n  event SwapFeeSet(uint32 _feeSet);\\n  event LoanFeeSet(uint32 _feeSet);\\n  event SwapIntervalsAllowed(uint32[] _swapIntervals, string[] _descriptions);\\n  event SwapIntervalsForbidden(uint32[] _swapIntervals);\\n\\n  error HighFee();\\n  error InvalidParams();\\n  error ZeroInterval();\\n  error EmptyDescription();\\n\\n  /* Public getters */\\n  function feeRecipient() external view returns (address);\\n\\n  function swapFee() external view returns (uint32);\\n\\n  function loanFee() external view returns (uint32);\\n\\n  function nftDescriptor() external view returns (IDCATokenDescriptor);\\n\\n  function oracle() external view returns (ITimeWeightedOracle);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function FEE_PRECISION() external view returns (uint24);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MAX_FEE() external view returns (uint32);\\n\\n  function allowedSwapIntervals() external view returns (uint32[] memory __allowedSwapIntervals);\\n\\n  function intervalDescription(uint32 _swapInterval) external view returns (string memory);\\n\\n  function isSwapIntervalAllowed(uint32 _swapInterval) external view returns (bool);\\n\\n  function paused() external view returns (bool);\\n\\n  function swapParameters() external view returns (SwapParameters memory);\\n\\n  function loanParameters() external view returns (LoanParameters memory);\\n\\n  /* Public setters */\\n  function setFeeRecipient(address _feeRecipient) external;\\n\\n  function setSwapFee(uint32 _fee) external;\\n\\n  function setLoanFee(uint32 _fee) external;\\n\\n  function setNFTDescriptor(IDCATokenDescriptor _descriptor) external;\\n\\n  function setOracle(ITimeWeightedOracle _oracle) external;\\n\\n  function addSwapIntervalsToAllowedList(uint32[] calldata _swapIntervals, string[] calldata _descriptions) external;\\n\\n  function removeSwapIntervalsFromAllowedList(uint32[] calldata _swapIntervals) external;\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0xa42670c088a9691c65ac4e5112705fb9e7a40a4bb1dad49acdf549a6dc10a774\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IDCAPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\nimport './IDCAGlobalParameters.sol';\\nimport './IERC20Detailed.sol';\\n\\ninterface IDCAPairParameters {\\n  /* Public getters */\\n  function globalParameters() external view returns (IDCAGlobalParameters);\\n\\n  function tokenA() external view returns (IERC20Detailed);\\n\\n  function tokenB() external view returns (IERC20Detailed);\\n\\n  function swapAmountDelta(\\n    uint32,\\n    address,\\n    uint32\\n  ) external view returns (int256);\\n\\n  function isSwapIntervalActive(uint32) external view returns (bool);\\n\\n  function performedSwaps(uint32) external view returns (uint32);\\n}\\n\\ninterface IDCAPairPositionHandler is IDCAPairParameters {\\n  struct UserPosition {\\n    IERC20Detailed from;\\n    IERC20Detailed to;\\n    uint32 swapInterval;\\n    uint32 swapsExecuted; // Since deposit or last withdraw\\n    uint256 swapped; // Since deposit or last withdraw\\n    uint32 swapsLeft;\\n    uint256 remaining;\\n    uint160 rate;\\n  }\\n\\n  event Terminated(address indexed _user, uint256 _dcaId, uint256 _returnedUnswapped, uint256 _returnedSwapped);\\n  event Deposited(\\n    address indexed _user,\\n    uint256 _dcaId,\\n    address _fromToken,\\n    uint160 _rate,\\n    uint32 _startingSwap,\\n    uint32 _swapInterval,\\n    uint32 _lastSwap\\n  );\\n  event Withdrew(address indexed _user, uint256 _dcaId, address _token, uint256 _amount);\\n  event WithdrewMany(address indexed _user, uint256[] _dcaIds, uint256 _swappedTokenA, uint256 _swappedTokenB);\\n  event Modified(address indexed _user, uint256 _dcaId, uint160 _rate, uint32 _startingSwap, uint32 _lastSwap);\\n\\n  error InvalidToken();\\n  error InvalidInterval();\\n  error InvalidPosition();\\n  error UnauthorizedCaller();\\n  error ZeroRate();\\n  error ZeroSwaps();\\n  error ZeroAmount();\\n  error PositionCompleted();\\n  error MandatoryWithdraw();\\n\\n  function userPosition(uint256) external view returns (UserPosition memory _position);\\n\\n  function deposit(\\n    address _tokenAddress,\\n    uint160 _rate,\\n    uint32 _amountOfSwaps,\\n    uint32 _swapInterval\\n  ) external returns (uint256 _dcaId);\\n\\n  function withdrawSwapped(uint256 _dcaId) external returns (uint256 _swapped);\\n\\n  function withdrawSwappedMany(uint256[] calldata _dcaIds) external returns (uint256 _swappedTokenA, uint256 _swappedTokenB);\\n\\n  function modifyRate(uint256 _dcaId, uint160 _newRate) external;\\n\\n  function modifySwaps(uint256 _dcaId, uint32 _newSwaps) external;\\n\\n  function modifyRateAndSwaps(\\n    uint256 _dcaId,\\n    uint160 _newRate,\\n    uint32 _newSwaps\\n  ) external;\\n\\n  function addFundsToPosition(\\n    uint256 _dcaId,\\n    uint256 _amount,\\n    uint32 _newSwaps\\n  ) external;\\n\\n  function terminate(uint256 _dcaId) external;\\n}\\n\\ninterface IDCAPairSwapHandler {\\n  struct SwapInformation {\\n    uint32 interval;\\n    uint32 swapToPerform;\\n    uint256 amountToSwapTokenA;\\n    uint256 amountToSwapTokenB;\\n  }\\n\\n  struct NextSwapInformation {\\n    SwapInformation[] swapsToPerform;\\n    uint8 amountOfSwaps;\\n    uint256 availableToBorrowTokenA;\\n    uint256 availableToBorrowTokenB;\\n    uint256 ratePerUnitBToA;\\n    uint256 ratePerUnitAToB;\\n    uint256 platformFeeTokenA;\\n    uint256 platformFeeTokenB;\\n    uint256 amountToBeProvidedBySwapper;\\n    uint256 amountToRewardSwapperWith;\\n    IERC20Detailed tokenToBeProvidedBySwapper;\\n    IERC20Detailed tokenToRewardSwapperWith;\\n  }\\n\\n  event Swapped(\\n    address indexed _sender,\\n    address indexed _to,\\n    uint256 _amountBorrowedTokenA,\\n    uint256 _amountBorrowedTokenB,\\n    uint32 _fee,\\n    NextSwapInformation _nextSwapInformation\\n  );\\n\\n  error NoSwapsToExecute();\\n\\n  function nextSwapAvailable(uint32) external view returns (uint32);\\n\\n  function swapAmountAccumulator(uint32, address) external view returns (uint256);\\n\\n  function getNextSwapInfo() external view returns (NextSwapInformation memory _nextSwapInformation);\\n\\n  function swap() external;\\n\\n  function swap(\\n    uint256 _amountToBorrowTokenA,\\n    uint256 _amountToBorrowTokenB,\\n    address _to,\\n    bytes calldata _data\\n  ) external;\\n\\n  function secondsUntilNextSwap() external view returns (uint32);\\n}\\n\\ninterface IDCAPairLoanHandler {\\n  event Loaned(address indexed _sender, address indexed _to, uint256 _amountBorrowedTokenA, uint256 _amountBorrowedTokenB, uint32 _loanFee);\\n\\n  error ZeroLoan();\\n\\n  function availableToBorrow() external view returns (uint256 _amountToBorrowTokenA, uint256 _amountToBorrowTokenB);\\n\\n  function loan(\\n    uint256 _amountToBorrowTokenA,\\n    uint256 _amountToBorrowTokenB,\\n    address _to,\\n    bytes calldata _data\\n  ) external;\\n}\\n\\ninterface IDCAPair is IDCAPairParameters, IDCAPairSwapHandler, IDCAPairPositionHandler, IDCAPairLoanHandler {}\\n\",\"keccak256\":\"0x4c5bf2a9933f41348df17008dc0a2c84b12bd46c158358f23d8b40665ccd96ca\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IDCATokenDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\nimport './IDCAPair.sol';\\n\\ninterface IDCATokenDescriptor {\\n  function tokenURI(IDCAPairPositionHandler _positionHandler, uint256 _tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x02d47009390b1163d86af7b9dd69b31a5ff86d11f3ec3e3cccf6a5ed48013328\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IERC20Detailed is IERC20 {\\n  function decimals() external view returns (uint8);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x86fb39cf10020e4372633e2e28b3fc5b78ea9d455e4decc56248b2fc65847517\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ITimeWeightedOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol';\\n\\ninterface ITimeWeightedOracle {\\n  event AddedSupportForPair(address _tokenA, address _tokenB);\\n\\n  /** Returns whether this oracle can support this pair of tokens */\\n  function canSupportPair(address _tokenA, address _tokenB) external view returns (bool);\\n\\n  /** Returns a quote, based on the given tokens and amount */\\n  function quote(\\n    address _tokenIn,\\n    uint128 _amountIn,\\n    address _tokenOut\\n  ) external view returns (uint256 _amountOut);\\n\\n  /**\\n   * Let the oracle take some actions to configure this pair of tokens for future uses.\\n   * Will revert if pair cannot be supported.\\n   */\\n  function addSupportForPair(address _tokenA, address _tokenB) external;\\n}\\n\\ninterface IUniswapV3OracleAggregator is ITimeWeightedOracle {\\n  event AddedFeeTier(uint24 _feeTier);\\n  event PeriodChanged(uint32 _period);\\n\\n  /* Public getters */\\n  function factory() external view returns (IUniswapV3Factory);\\n\\n  function supportedFeeTiers() external view returns (uint24[] memory);\\n\\n  function poolsUsedForPair(address _tokenA, address _tokenB) external view returns (address[] memory);\\n\\n  function period() external view returns (uint16);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MINIMUM_PERIOD() external view returns (uint16);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MAXIMUM_PERIOD() external view returns (uint16);\\n\\n  /* Public setters */\\n  function addFeeTier(uint24) external;\\n\\n  function setPeriod(uint16) external;\\n}\\n\",\"keccak256\":\"0xa4d11329f1af41227caf2693d7826428bc917802239c18f29a7d49fd476d25bc\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\nlibrary CommonErrors {\\n  error ZeroAddress();\\n  error Paused();\\n  error InsufficientLiquidity();\\n  error LiquidityNotReturned();\\n}\\n\",\"keccak256\":\"0xdb5b09a418d0e3590014e48c1e4f46b6b6be6b7ac3de4e58351adc4a34197d74\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405260038054600160a01b600160e01b031916647d0000017760a31b1790553480156200002e57600080fd5b5060405162001fb338038062001fb38339810160408190526200005191620002b2565b6001805460ff191690556001600160a01b03851615806200007957506001600160a01b038416155b806200008c57506001600160a01b038316155b806200009f57506001600160a01b038216155b80620000b257506001600160a01b038116155b15620000d15760405163d92e233d60e01b815260040160405180910390fd5b620000ec60008051602062001f9383398151915286620001ae565b620001187ffb63867dc303889c4e19b6276d834e066500dd4210f4434d34089a246beec82a85620001ae565b6200013360008051602062001f9383398151915280620001be565b6200015f7ffb63867dc303889c4e19b6276d834e066500dd4210f4434d34089a246beec82a80620001be565b600180546001600160a01b0394851661010002610100600160a81b0319909116179055600280549284166001600160a01b031993841617905560038054919093169116179055506200034a9050565b620001ba828262000212565b5050565b600082815260208190526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a460009182526020829052604090912060010155565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620001ba576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200026e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600080600080600060a08688031215620002ca578081fd5b8551620002d78162000331565b6020870151909550620002ea8162000331565b6040870151909450620002fd8162000331565b6060870151909350620003108162000331565b6080870151909250620003238162000331565b809150509295509295909350565b6001600160a01b03811681146200034757600080fd5b50565b611c39806200035a6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80637d361dd31161010f578063b1d0a337116100a2578063d6d788c311610071578063d6d788c31461049a578063da90b03a146104ad578063e63a391f146104c0578063e74b981b146104dd57600080fd5b8063b1d0a33714610431578063bc063e1a1461046c578063caeb93d914610474578063d547741f1461048757600080fd5b806391d14854116100de57806391d14854146103ec5780639bcb5572146103ff5780639eceefe114610416578063a217fddf1461042957600080fd5b80637d361dd3146103a95780637d8e8603146103be5780637dc0d1d0146103d15780638456cb59146103e457600080fd5b806346904840116101875780635c975abb116101565780635c975abb1461035b57806375c890b8146103635780637adbf973146103835780637cad6cd11461039657600080fd5b806346904840146102ed578063480e5da1146103055780634eeeb3eb1461031a57806354cf2aeb1461032f57600080fd5b80632f2ff15d116101c35780632f2ff15d1461029257806336568abe146102a75780633f4ba83a146102ba57806344267570146102c257600080fd5b806301ffc9a7146101ea5780630e55bd1c14610212578063248a9ca314610261575b600080fd5b6101fd6101f83660046117d4565b6104f0565b60405190151581526020015b60405180910390f35b61021a610527565b604051610209919081516001600160a01b03908116825260208084015115159083015260408084015163ffffffff1690830152606092830151169181019190915260800190565b61028461026f36600461178d565b60009081526020819052604090206001015490565b604051908152602001610209565b6102a56102a03660046117a5565b610590565b005b6102a56102b53660046117a5565b6105bb565b6102a561063e565b6002546102d5906001600160a01b031681565b6040516001600160a01b039091168152602001610209565b6001546102d59061010090046001600160a01b031681565b61030d610662565b60405161020991906119c0565b610284600080516020611bc483398151915281565b60035461034690600160a01b900463ffffffff1681565b60405163ffffffff9091168152602001610209565b6101fd610727565b6103766103713660046117fc565b61073a565b6040516102099190611a0a565b6102a56103913660046116c8565b6107d4565b6102a56103a43660046116c8565b61086a565b610284600080516020611be483398151915281565b6102a56103cc3660046116e4565b6108f8565b6003546102d5906001600160a01b031681565b6102a5610a1b565b6101fd6103fa3660046117a5565b610a3c565b60035461034690600160c01b900463ffffffff1681565b6101fd6104243660046117fc565b610a65565b610284600081565b610439610a7b565b6040805182516001600160a01b031681526020808401511515908201529181015163ffffffff1690820152606001610209565b610346610acf565b6102a5610482366004611724565b610ae4565b6102a56104953660046117a5565b610d06565b6102a56104a83660046117fc565b610d2c565b6102a56104bb3660046117fc565b610dd1565b6104c961271081565b60405162ffffff9091168152602001610209565b6102a56104eb3660046116c8565b610e76565b60006001600160e01b03198216637965db0b60e01b148061052157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60408051608081018252600060208201819052918101829052606081019190915260015461010090046001600160a01b03168152610563610727565b1515602082015260035463ffffffff600160a01b82041660408301526001600160a01b0316606082015290565b6000828152602081905260409020600101546105ac8133610f0c565b6105b68383610f70565b505050565b6001600160a01b03811633146106305760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61063a8282610ff4565b5050565b600080516020611be48339815191526106578133610f0c565b61065f611059565b50565b6060600061067060056110ee565b90508067ffffffffffffffff81111561069957634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156106c2578160200160208202803683370190505b50915060005b81811015610722576106db6005826110f8565b8382815181106106fb57634e487b7160e01b600052603260045260246000fd5b63ffffffff909216602092830291909101909101528061071a81611b7d565b9150506106c8565b505090565b600061073560015460ff1690565b905090565b6004602052600090815260409020805461075390611b42565b80601f016020809104026020016040519081016040528092919081815260200182805461077f90611b42565b80156107cc5780601f106107a1576101008083540402835291602001916107cc565b820191906000526020600020905b8154815290600101906020018083116107af57829003601f168201915b505050505081565b600080516020611bc48339815191526107ed8133610f0c565b6001600160a01b0382166108145760405163d92e233d60e01b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0384169081179091556040519081527f3f32684a32a11dabdbb8c0177de80aa3ae36a004d75210335b49e544e48cd0aa906020015b60405180910390a15050565b600080516020611be48339815191526108838133610f0c565b6001600160a01b0382166108aa5760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0384169081179091556040519081527f58a2b9171063c6d38177053178bc1844b920884b05d7c9126c480d86b0716bce9060200161085e565b600080516020611be48339815191526109118133610f0c565b60005b828110156109dc5761096a84848381811061093f57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061095491906117fc565b63ffffffff16600561110b90919063ffffffff16565b506004600085858481811061098f57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906109a491906117fc565b63ffffffff1663ffffffff16815260200190815260200160002060006109ca9190611592565b806109d481611b7d565b915050610914565b507fd0359552feffede26fee29bd110dd8e1a3237acd35c7e17a9d3b7330b02f88258383604051610a0e9291906118f7565b60405180910390a1505050565b600080516020611be4833981519152610a348133610f0c565b61065f611117565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610521600563ffffffff8085169061119216565b604080516060810182526000602082018190529181019190915260015461010090046001600160a01b03168152610ab0610727565b15156020820152600354600160c01b900463ffffffff16604082015290565b610adc612710600a611a9a565b62ffffff1681565b600080516020611be4833981519152610afd8133610f0c565b838214610b1d57604051635435b28960e11b815260040160405180910390fd5b60005b84811015610cc157858582818110610b4857634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610b5d91906117fc565b63ffffffff16610b805760405163346ff60760e01b815260040160405180910390fd5b838382818110610ba057634e487b7160e01b600052603260045260246000fd5b9050602002810190610bb29190611a3d565b15159050610bd35760405163d937d5df60e01b815260040160405180910390fd5b610c21868683818110610bf657634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610c0b91906117fc565b63ffffffff1660056111aa90919063ffffffff16565b50838382818110610c4257634e487b7160e01b600052603260045260246000fd5b9050602002810190610c549190611a3d565b60046000898986818110610c7857634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610c8d91906117fc565b63ffffffff1681526020810191909152604001600020610cae9290916115cc565b5080610cb981611b7d565b915050610b20565b507fbedbd17c0fc434b767574d7b78c5b856984fbdd13b02606fb750dd37020ddaa385858585604051610cf79493929190611913565b60405180910390a15050505050565b600082815260208190526040902060010154610d228133610f0c565b6105b68383610ff4565b600080516020611bc4833981519152610d458133610f0c565b610d52612710600a611a9a565b62ffffff1663ffffffff83161115610d7d576040516314041af760e31b815260040160405180910390fd5b6003805463ffffffff60a01b1916600160a01b63ffffffff8516908102919091179091556040519081527f5658872a8436367e842f76c14ffbbf8e67a2e70f47b28b3c4154134f72e902d69060200161085e565b600080516020611bc4833981519152610dea8133610f0c565b610df7612710600a611a9a565b62ffffff1663ffffffff83161115610e22576040516314041af760e31b815260040160405180910390fd5b6003805463ffffffff60c01b1916600160c01b63ffffffff8516908102919091179091556040519081527f6d0851a3fe66369a96f833703a09a7cb561e2eea7bc56bb8f247ac599814150f9060200161085e565b600080516020611be4833981519152610e8f8133610f0c565b6001600160a01b038216610eb65760405163d92e233d60e01b815260040160405180910390fd5b60018054610100600160a81b0319166101006001600160a01b038516908102919091179091556040519081527fbf9a9534339a9d6b81696e05dcfb614b7dc518a31d48be3cfb757988381fb3239060200161085e565b610f168282610a3c565b61063a57610f2e816001600160a01b031660146111b6565b610f398360206111b6565b604051602001610f4a929190611882565b60408051601f198184030181529082905262461bcd60e51b825261062791600401611a0a565b610f7a8282610a3c565b61063a576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610fb03390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610ffe8282610a3c565b1561063a576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611061610727565b6110a45760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610627565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000610521825490565b60006111048383611398565b9392505050565b6000611104838361142c565b61111f610727565b1561115f5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610627565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336110d1565b60008181526001830160205260408120541515611104565b60006111048383611543565b606060006111c5836002611ac5565b6111d0906002611a82565b67ffffffffffffffff8111156111f657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611220576020820181803683370190505b509050600360fc1b8160008151811061124957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061128657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006112aa846002611ac5565b6112b5906001611a82565b90505b6001811115611349576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106112f757634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061131b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361134281611b2b565b90506112b8565b5083156111045760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610627565b815460009082106113f65760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b6064820152608401610627565b82600001828154811061141957634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60008181526001830160205260408120548015611539576000611450600183611ae4565b855490915060009061146490600190611ae4565b9050600086600001828154811061148b57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106114bc57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600189019091526040902084905586548790806114fd57634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610521565b6000915050610521565b600081815260018301602052604081205461158a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610521565b506000610521565b50805461159e90611b42565b6000825580601f106115ae575050565b601f01602090049060005260206000209081019061065f9190611650565b8280546115d890611b42565b90600052602060002090601f0160209004810192826115fa5760008555611640565b82601f106116135782800160ff19823516178555611640565b82800160010185558215611640579182015b82811115611640578235825591602001919060010190611625565b5061164c929150611650565b5090565b5b8082111561164c5760008155600101611651565b60008083601f840112611676578182fd5b50813567ffffffffffffffff81111561168d578182fd5b6020830191508360208260051b85010111156116a857600080fd5b9250929050565b803563ffffffff811681146116c357600080fd5b919050565b6000602082840312156116d9578081fd5b813561110481611bae565b600080602083850312156116f6578081fd5b823567ffffffffffffffff81111561170c578182fd5b61171885828601611665565b90969095509350505050565b60008060008060408587031215611739578182fd5b843567ffffffffffffffff80821115611750578384fd5b61175c88838901611665565b90965094506020870135915080821115611774578384fd5b5061178187828801611665565b95989497509550505050565b60006020828403121561179e578081fd5b5035919050565b600080604083850312156117b7578182fd5b8235915060208301356117c981611bae565b809150509250929050565b6000602082840312156117e5578081fd5b81356001600160e01b031981168114611104578182fd5b60006020828403121561180d578081fd5b611104826116af565b81835260006020808501945082825b8581101561184e5763ffffffff61183b836116af565b1687529582019590820190600101611825565b509495945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516118ba816017850160208801611afb565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516118eb816028840160208801611afb565b01602801949350505050565b60208152600061190b602083018486611816565b949350505050565b604081526000611927604083018688611816565b602083820381850152818583528183019050818660051b84010187855b888110156119b057858303601f190184528135368b9003601e19018112611969578788fd5b8a01803567ffffffffffffffff811115611981578889fd5b8036038c131561198f578889fd5b61199c8582898501611859565b958701959450505090840190600101611944565b50909a9950505050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156119fe57835163ffffffff16835292840192918401916001016119dc565b50909695505050505050565b6020815260008251806020840152611a29816040850160208701611afb565b601f01601f19169190910160400192915050565b6000808335601e19843603018112611a53578283fd5b83018035915067ffffffffffffffff821115611a6d578283fd5b6020019150368190038213156116a857600080fd5b60008219821115611a9557611a95611b98565b500190565b600062ffffff80831681851681830481118215151615611abc57611abc611b98565b02949350505050565b6000816000190483118215151615611adf57611adf611b98565b500290565b600082821015611af657611af6611b98565b500390565b60005b83811015611b16578181015183820152602001611afe565b83811115611b25576000848401525b50505050565b600081611b3a57611b3a611b98565b506000190190565b600181811c90821680611b5657607f821691505b60208210811415611b7757634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611b9157611b91611b98565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461065f57600080fdfefb63867dc303889c4e19b6276d834e066500dd4210f4434d34089a246beec82a313f8c5ec4103e5607b5d8b3519ab06a512037396eaf72a07527d8b838012ed4a26469706673582212203ef12b9de6f415c4ed664b1fc97a07568e73f4c63eb7ded9f41703fed47c27d064736f6c63430008040033313f8c5ec4103e5607b5d8b3519ab06a512037396eaf72a07527d8b838012ed4",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80637d361dd31161010f578063b1d0a337116100a2578063d6d788c311610071578063d6d788c31461049a578063da90b03a146104ad578063e63a391f146104c0578063e74b981b146104dd57600080fd5b8063b1d0a33714610431578063bc063e1a1461046c578063caeb93d914610474578063d547741f1461048757600080fd5b806391d14854116100de57806391d14854146103ec5780639bcb5572146103ff5780639eceefe114610416578063a217fddf1461042957600080fd5b80637d361dd3146103a95780637d8e8603146103be5780637dc0d1d0146103d15780638456cb59146103e457600080fd5b806346904840116101875780635c975abb116101565780635c975abb1461035b57806375c890b8146103635780637adbf973146103835780637cad6cd11461039657600080fd5b806346904840146102ed578063480e5da1146103055780634eeeb3eb1461031a57806354cf2aeb1461032f57600080fd5b80632f2ff15d116101c35780632f2ff15d1461029257806336568abe146102a75780633f4ba83a146102ba57806344267570146102c257600080fd5b806301ffc9a7146101ea5780630e55bd1c14610212578063248a9ca314610261575b600080fd5b6101fd6101f83660046117d4565b6104f0565b60405190151581526020015b60405180910390f35b61021a610527565b604051610209919081516001600160a01b03908116825260208084015115159083015260408084015163ffffffff1690830152606092830151169181019190915260800190565b61028461026f36600461178d565b60009081526020819052604090206001015490565b604051908152602001610209565b6102a56102a03660046117a5565b610590565b005b6102a56102b53660046117a5565b6105bb565b6102a561063e565b6002546102d5906001600160a01b031681565b6040516001600160a01b039091168152602001610209565b6001546102d59061010090046001600160a01b031681565b61030d610662565b60405161020991906119c0565b610284600080516020611bc483398151915281565b60035461034690600160a01b900463ffffffff1681565b60405163ffffffff9091168152602001610209565b6101fd610727565b6103766103713660046117fc565b61073a565b6040516102099190611a0a565b6102a56103913660046116c8565b6107d4565b6102a56103a43660046116c8565b61086a565b610284600080516020611be483398151915281565b6102a56103cc3660046116e4565b6108f8565b6003546102d5906001600160a01b031681565b6102a5610a1b565b6101fd6103fa3660046117a5565b610a3c565b60035461034690600160c01b900463ffffffff1681565b6101fd6104243660046117fc565b610a65565b610284600081565b610439610a7b565b6040805182516001600160a01b031681526020808401511515908201529181015163ffffffff1690820152606001610209565b610346610acf565b6102a5610482366004611724565b610ae4565b6102a56104953660046117a5565b610d06565b6102a56104a83660046117fc565b610d2c565b6102a56104bb3660046117fc565b610dd1565b6104c961271081565b60405162ffffff9091168152602001610209565b6102a56104eb3660046116c8565b610e76565b60006001600160e01b03198216637965db0b60e01b148061052157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60408051608081018252600060208201819052918101829052606081019190915260015461010090046001600160a01b03168152610563610727565b1515602082015260035463ffffffff600160a01b82041660408301526001600160a01b0316606082015290565b6000828152602081905260409020600101546105ac8133610f0c565b6105b68383610f70565b505050565b6001600160a01b03811633146106305760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61063a8282610ff4565b5050565b600080516020611be48339815191526106578133610f0c565b61065f611059565b50565b6060600061067060056110ee565b90508067ffffffffffffffff81111561069957634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156106c2578160200160208202803683370190505b50915060005b81811015610722576106db6005826110f8565b8382815181106106fb57634e487b7160e01b600052603260045260246000fd5b63ffffffff909216602092830291909101909101528061071a81611b7d565b9150506106c8565b505090565b600061073560015460ff1690565b905090565b6004602052600090815260409020805461075390611b42565b80601f016020809104026020016040519081016040528092919081815260200182805461077f90611b42565b80156107cc5780601f106107a1576101008083540402835291602001916107cc565b820191906000526020600020905b8154815290600101906020018083116107af57829003601f168201915b505050505081565b600080516020611bc48339815191526107ed8133610f0c565b6001600160a01b0382166108145760405163d92e233d60e01b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0384169081179091556040519081527f3f32684a32a11dabdbb8c0177de80aa3ae36a004d75210335b49e544e48cd0aa906020015b60405180910390a15050565b600080516020611be48339815191526108838133610f0c565b6001600160a01b0382166108aa5760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0384169081179091556040519081527f58a2b9171063c6d38177053178bc1844b920884b05d7c9126c480d86b0716bce9060200161085e565b600080516020611be48339815191526109118133610f0c565b60005b828110156109dc5761096a84848381811061093f57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061095491906117fc565b63ffffffff16600561110b90919063ffffffff16565b506004600085858481811061098f57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906109a491906117fc565b63ffffffff1663ffffffff16815260200190815260200160002060006109ca9190611592565b806109d481611b7d565b915050610914565b507fd0359552feffede26fee29bd110dd8e1a3237acd35c7e17a9d3b7330b02f88258383604051610a0e9291906118f7565b60405180910390a1505050565b600080516020611be4833981519152610a348133610f0c565b61065f611117565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610521600563ffffffff8085169061119216565b604080516060810182526000602082018190529181019190915260015461010090046001600160a01b03168152610ab0610727565b15156020820152600354600160c01b900463ffffffff16604082015290565b610adc612710600a611a9a565b62ffffff1681565b600080516020611be4833981519152610afd8133610f0c565b838214610b1d57604051635435b28960e11b815260040160405180910390fd5b60005b84811015610cc157858582818110610b4857634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610b5d91906117fc565b63ffffffff16610b805760405163346ff60760e01b815260040160405180910390fd5b838382818110610ba057634e487b7160e01b600052603260045260246000fd5b9050602002810190610bb29190611a3d565b15159050610bd35760405163d937d5df60e01b815260040160405180910390fd5b610c21868683818110610bf657634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610c0b91906117fc565b63ffffffff1660056111aa90919063ffffffff16565b50838382818110610c4257634e487b7160e01b600052603260045260246000fd5b9050602002810190610c549190611a3d565b60046000898986818110610c7857634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610c8d91906117fc565b63ffffffff1681526020810191909152604001600020610cae9290916115cc565b5080610cb981611b7d565b915050610b20565b507fbedbd17c0fc434b767574d7b78c5b856984fbdd13b02606fb750dd37020ddaa385858585604051610cf79493929190611913565b60405180910390a15050505050565b600082815260208190526040902060010154610d228133610f0c565b6105b68383610ff4565b600080516020611bc4833981519152610d458133610f0c565b610d52612710600a611a9a565b62ffffff1663ffffffff83161115610d7d576040516314041af760e31b815260040160405180910390fd5b6003805463ffffffff60a01b1916600160a01b63ffffffff8516908102919091179091556040519081527f5658872a8436367e842f76c14ffbbf8e67a2e70f47b28b3c4154134f72e902d69060200161085e565b600080516020611bc4833981519152610dea8133610f0c565b610df7612710600a611a9a565b62ffffff1663ffffffff83161115610e22576040516314041af760e31b815260040160405180910390fd5b6003805463ffffffff60c01b1916600160c01b63ffffffff8516908102919091179091556040519081527f6d0851a3fe66369a96f833703a09a7cb561e2eea7bc56bb8f247ac599814150f9060200161085e565b600080516020611be4833981519152610e8f8133610f0c565b6001600160a01b038216610eb65760405163d92e233d60e01b815260040160405180910390fd5b60018054610100600160a81b0319166101006001600160a01b038516908102919091179091556040519081527fbf9a9534339a9d6b81696e05dcfb614b7dc518a31d48be3cfb757988381fb3239060200161085e565b610f168282610a3c565b61063a57610f2e816001600160a01b031660146111b6565b610f398360206111b6565b604051602001610f4a929190611882565b60408051601f198184030181529082905262461bcd60e51b825261062791600401611a0a565b610f7a8282610a3c565b61063a576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610fb03390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610ffe8282610a3c565b1561063a576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611061610727565b6110a45760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610627565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000610521825490565b60006111048383611398565b9392505050565b6000611104838361142c565b61111f610727565b1561115f5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610627565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336110d1565b60008181526001830160205260408120541515611104565b60006111048383611543565b606060006111c5836002611ac5565b6111d0906002611a82565b67ffffffffffffffff8111156111f657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611220576020820181803683370190505b509050600360fc1b8160008151811061124957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061128657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006112aa846002611ac5565b6112b5906001611a82565b90505b6001811115611349576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106112f757634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061131b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361134281611b2b565b90506112b8565b5083156111045760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610627565b815460009082106113f65760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b6064820152608401610627565b82600001828154811061141957634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60008181526001830160205260408120548015611539576000611450600183611ae4565b855490915060009061146490600190611ae4565b9050600086600001828154811061148b57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106114bc57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600189019091526040902084905586548790806114fd57634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610521565b6000915050610521565b600081815260018301602052604081205461158a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610521565b506000610521565b50805461159e90611b42565b6000825580601f106115ae575050565b601f01602090049060005260206000209081019061065f9190611650565b8280546115d890611b42565b90600052602060002090601f0160209004810192826115fa5760008555611640565b82601f106116135782800160ff19823516178555611640565b82800160010185558215611640579182015b82811115611640578235825591602001919060010190611625565b5061164c929150611650565b5090565b5b8082111561164c5760008155600101611651565b60008083601f840112611676578182fd5b50813567ffffffffffffffff81111561168d578182fd5b6020830191508360208260051b85010111156116a857600080fd5b9250929050565b803563ffffffff811681146116c357600080fd5b919050565b6000602082840312156116d9578081fd5b813561110481611bae565b600080602083850312156116f6578081fd5b823567ffffffffffffffff81111561170c578182fd5b61171885828601611665565b90969095509350505050565b60008060008060408587031215611739578182fd5b843567ffffffffffffffff80821115611750578384fd5b61175c88838901611665565b90965094506020870135915080821115611774578384fd5b5061178187828801611665565b95989497509550505050565b60006020828403121561179e578081fd5b5035919050565b600080604083850312156117b7578182fd5b8235915060208301356117c981611bae565b809150509250929050565b6000602082840312156117e5578081fd5b81356001600160e01b031981168114611104578182fd5b60006020828403121561180d578081fd5b611104826116af565b81835260006020808501945082825b8581101561184e5763ffffffff61183b836116af565b1687529582019590820190600101611825565b509495945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516118ba816017850160208801611afb565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516118eb816028840160208801611afb565b01602801949350505050565b60208152600061190b602083018486611816565b949350505050565b604081526000611927604083018688611816565b602083820381850152818583528183019050818660051b84010187855b888110156119b057858303601f190184528135368b9003601e19018112611969578788fd5b8a01803567ffffffffffffffff811115611981578889fd5b8036038c131561198f578889fd5b61199c8582898501611859565b958701959450505090840190600101611944565b50909a9950505050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156119fe57835163ffffffff16835292840192918401916001016119dc565b50909695505050505050565b6020815260008251806020840152611a29816040850160208701611afb565b601f01601f19169190910160400192915050565b6000808335601e19843603018112611a53578283fd5b83018035915067ffffffffffffffff821115611a6d578283fd5b6020019150368190038213156116a857600080fd5b60008219821115611a9557611a95611b98565b500190565b600062ffffff80831681851681830481118215151615611abc57611abc611b98565b02949350505050565b6000816000190483118215151615611adf57611adf611b98565b500290565b600082821015611af657611af6611b98565b500390565b60005b83811015611b16578181015183820152602001611afe565b83811115611b25576000848401525b50505050565b600081611b3a57611b3a611b98565b506000190190565b600181811c90821680611b5657607f821691505b60208210811415611b7757634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611b9157611b91611b98565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461065f57600080fdfefb63867dc303889c4e19b6276d834e066500dd4210f4434d34089a246beec82a313f8c5ec4103e5607b5d8b3519ab06a512037396eaf72a07527d8b838012ed4a26469706673582212203ef12b9de6f415c4ed664b1fc97a07568e73f4c63eb7ded9f41703fed47c27d064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/DCAGlobalParameters/DCAGlobalParameters.sol:DCAGlobalParameters",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)"
      },
      {
        "astId": 385,
        "contract": "contracts/DCAGlobalParameters/DCAGlobalParameters.sol:DCAGlobalParameters",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 4787,
        "contract": "contracts/DCAGlobalParameters/DCAGlobalParameters.sol:DCAGlobalParameters",
        "label": "feeRecipient",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4791,
        "contract": "contracts/DCAGlobalParameters/DCAGlobalParameters.sol:DCAGlobalParameters",
        "label": "nftDescriptor",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDCATokenDescriptor)9723"
      },
      {
        "astId": 4795,
        "contract": "contracts/DCAGlobalParameters/DCAGlobalParameters.sol:DCAGlobalParameters",
        "label": "oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ITimeWeightedOracle)9784"
      },
      {
        "astId": 4799,
        "contract": "contracts/DCAGlobalParameters/DCAGlobalParameters.sol:DCAGlobalParameters",
        "label": "swapFee",
        "offset": 20,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 4803,
        "contract": "contracts/DCAGlobalParameters/DCAGlobalParameters.sol:DCAGlobalParameters",
        "label": "loanFee",
        "offset": 24,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 4818,
        "contract": "contracts/DCAGlobalParameters/DCAGlobalParameters.sol:DCAGlobalParameters",
        "label": "intervalDescription",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint32,t_string_storage)"
      },
      {
        "astId": 4821,
        "contract": "contracts/DCAGlobalParameters/DCAGlobalParameters.sol:DCAGlobalParameters",
        "label": "_allowedSwapIntervals",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(UintSet)3283_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDCATokenDescriptor)9723": {
        "encoding": "inplace",
        "label": "contract IDCATokenDescriptor",
        "numberOfBytes": "20"
      },
      "t_contract(ITimeWeightedOracle)9784": {
        "encoding": "inplace",
        "label": "contract ITimeWeightedOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)57_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)57_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 54,
            "contract": "contracts/DCAGlobalParameters/DCAGlobalParameters.sol:DCAGlobalParameters",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 56,
            "contract": "contracts/DCAGlobalParameters/DCAGlobalParameters.sol:DCAGlobalParameters",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2881_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2876,
            "contract": "contracts/DCAGlobalParameters/DCAGlobalParameters.sol:DCAGlobalParameters",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2880,
            "contract": "contracts/DCAGlobalParameters/DCAGlobalParameters.sol:DCAGlobalParameters",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)3283_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 3282,
            "contract": "contracts/DCAGlobalParameters/DCAGlobalParameters.sol:DCAGlobalParameters",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2881_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}