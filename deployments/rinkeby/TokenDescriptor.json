{
  "address": "0xF7ec8086a46A045393B1502D9E8f107Fa20F7074",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IDCAPairPositionHandler",
          "name": "_positionHandler",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4acb33633c51e1aa19027b87a1f04254fa3deea1c300fb301a288efd9fcdc9c0",
  "receipt": {
    "to": null,
    "from": "0xd63455f6723772654Dddb596bA518D9179d5d932",
    "contractAddress": "0xF7ec8086a46A045393B1502D9E8f107Fa20F7074",
    "transactionIndex": 22,
    "gasUsed": "3456619",
    "logsBloom": "0x
    "blockHash": "0xadd4ba532f89d8115ae7474cebf390206e6f8c1e76d62da68ba0103a26519ad7",
    "transactionHash": "0x4acb33633c51e1aa19027b87a1f04254fa3deea1c300fb301a288efd9fcdc9c0",
    "logs": [],
    "blockNumber": 8979124,
    "cumulativeGasUsed": "7224331",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d392bc89274cb27025074d3e3e3f4973",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IDCAPairPositionHandler\",\"name\":\"_positionHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Describes NFT token positions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Produces a string containing the data URI for a JSON metadata string\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DCATokenDescriptor/DCATokenDescriptor.sol\":\"DCATokenDescriptor\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0c8ad17afea99676d4dbab1857f52a7660b67602a79d03abd0a4c742074bbeb3\",\"license\":\"MIT\"},\"contracts/DCATokenDescriptor/DCATokenDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\npragma abicoder v2;\\n\\nimport '../interfaces/IDCAGlobalParameters.sol';\\nimport '../interfaces/IDCAPair.sol';\\nimport '../interfaces/IERC20Detailed.sol';\\nimport '../libraries/NFTDescriptor.sol';\\n\\n/// @title Describes NFT token positions\\n/// @notice Produces a string containing the data URI for a JSON metadata string\\ncontract DCATokenDescriptor is IDCATokenDescriptor {\\n  function tokenURI(IDCAPairPositionHandler _positionHandler, uint256 _tokenId) external view override returns (string memory) {\\n    IERC20Detailed _tokenA = _positionHandler.tokenA();\\n    IERC20Detailed _tokenB = _positionHandler.tokenB();\\n    IDCAGlobalParameters _globalParameters = _positionHandler.globalParameters();\\n    IDCAPairPositionHandler.UserPosition memory _userPosition = _positionHandler.userPosition(_tokenId);\\n\\n    return\\n      NFTDescriptor.constructTokenURI(\\n        NFTDescriptor.ConstructTokenURIParams({\\n          tokenId: _tokenId,\\n          pair: address(_positionHandler),\\n          tokenA: address(_tokenA),\\n          tokenB: address(_tokenB),\\n          tokenADecimals: _tokenA.decimals(),\\n          tokenBDecimals: _tokenB.decimals(),\\n          tokenASymbol: _tokenA.symbol(),\\n          tokenBSymbol: _tokenB.symbol(),\\n          swapInterval: _globalParameters.intervalDescription(_userPosition.swapInterval),\\n          swapsExecuted: _userPosition.swapsExecuted,\\n          swapped: _userPosition.swapped,\\n          swapsLeft: _userPosition.swapsLeft,\\n          remaining: _userPosition.remaining,\\n          rate: _userPosition.rate,\\n          fromA: _userPosition.from == _tokenA\\n        })\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0xf1793d41e755c401eea53e0e6804a50484e0b6b62645ed1581c6c41ecbcf289d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IDCAGlobalParameters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\nimport './ITimeWeightedOracle.sol';\\nimport './IDCATokenDescriptor.sol';\\n\\ninterface IDCAGlobalParameters {\\n  struct SwapParameters {\\n    address feeRecipient;\\n    bool isPaused;\\n    uint32 swapFee;\\n    ITimeWeightedOracle oracle;\\n  }\\n\\n  struct LoanParameters {\\n    address feeRecipient;\\n    bool isPaused;\\n    uint32 loanFee;\\n  }\\n\\n  event FeeRecipientSet(address _feeRecipient);\\n  event NFTDescriptorSet(IDCATokenDescriptor _descriptor);\\n  event OracleSet(ITimeWeightedOracle _oracle);\\n  event SwapFeeSet(uint32 _feeSet);\\n  event LoanFeeSet(uint32 _feeSet);\\n  event SwapIntervalsAllowed(uint32[] _swapIntervals, string[] _descriptions);\\n  event SwapIntervalsForbidden(uint32[] _swapIntervals);\\n\\n  error HighFee();\\n  error InvalidParams();\\n  error ZeroInterval();\\n  error EmptyDescription();\\n\\n  /* Public getters */\\n  function feeRecipient() external view returns (address);\\n\\n  function swapFee() external view returns (uint32);\\n\\n  function loanFee() external view returns (uint32);\\n\\n  function nftDescriptor() external view returns (IDCATokenDescriptor);\\n\\n  function oracle() external view returns (ITimeWeightedOracle);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function FEE_PRECISION() external view returns (uint24);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MAX_FEE() external view returns (uint32);\\n\\n  function allowedSwapIntervals() external view returns (uint32[] memory __allowedSwapIntervals);\\n\\n  function intervalDescription(uint32 _swapInterval) external view returns (string memory);\\n\\n  function isSwapIntervalAllowed(uint32 _swapInterval) external view returns (bool);\\n\\n  function paused() external view returns (bool);\\n\\n  function swapParameters() external view returns (SwapParameters memory);\\n\\n  function loanParameters() external view returns (LoanParameters memory);\\n\\n  /* Public setters */\\n  function setFeeRecipient(address _feeRecipient) external;\\n\\n  function setSwapFee(uint32 _fee) external;\\n\\n  function setLoanFee(uint32 _fee) external;\\n\\n  function setNFTDescriptor(IDCATokenDescriptor _descriptor) external;\\n\\n  function setOracle(ITimeWeightedOracle _oracle) external;\\n\\n  function addSwapIntervalsToAllowedList(uint32[] calldata _swapIntervals, string[] calldata _descriptions) external;\\n\\n  function removeSwapIntervalsFromAllowedList(uint32[] calldata _swapIntervals) external;\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0xa42670c088a9691c65ac4e5112705fb9e7a40a4bb1dad49acdf549a6dc10a774\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IDCAPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\nimport './IDCAGlobalParameters.sol';\\nimport './IERC20Detailed.sol';\\n\\ninterface IDCAPairParameters {\\n  /* Public getters */\\n  function globalParameters() external view returns (IDCAGlobalParameters);\\n\\n  function tokenA() external view returns (IERC20Detailed);\\n\\n  function tokenB() external view returns (IERC20Detailed);\\n\\n  function swapAmountDelta(\\n    uint32,\\n    address,\\n    uint32\\n  ) external view returns (int256);\\n\\n  function isSwapIntervalActive(uint32) external view returns (bool);\\n\\n  function performedSwaps(uint32) external view returns (uint32);\\n}\\n\\ninterface IDCAPairPositionHandler is IDCAPairParameters {\\n  struct UserPosition {\\n    IERC20Detailed from;\\n    IERC20Detailed to;\\n    uint32 swapInterval;\\n    uint32 swapsExecuted; // Since deposit or last withdraw\\n    uint256 swapped; // Since deposit or last withdraw\\n    uint32 swapsLeft;\\n    uint256 remaining;\\n    uint160 rate;\\n  }\\n\\n  event Terminated(address indexed _user, uint256 _dcaId, uint256 _returnedUnswapped, uint256 _returnedSwapped);\\n  event Deposited(\\n    address indexed _user,\\n    uint256 _dcaId,\\n    address _fromToken,\\n    uint160 _rate,\\n    uint32 _startingSwap,\\n    uint32 _swapInterval,\\n    uint32 _lastSwap\\n  );\\n  event Withdrew(address indexed _user, uint256 _dcaId, address _token, uint256 _amount);\\n  event WithdrewMany(address indexed _user, uint256[] _dcaIds, uint256 _swappedTokenA, uint256 _swappedTokenB);\\n  event Modified(address indexed _user, uint256 _dcaId, uint160 _rate, uint32 _startingSwap, uint32 _lastSwap);\\n\\n  error InvalidToken();\\n  error InvalidInterval();\\n  error InvalidPosition();\\n  error UnauthorizedCaller();\\n  error ZeroRate();\\n  error ZeroSwaps();\\n  error ZeroAmount();\\n  error PositionCompleted();\\n  error MandatoryWithdraw();\\n\\n  function userPosition(uint256) external view returns (UserPosition memory _position);\\n\\n  function deposit(\\n    address _tokenAddress,\\n    uint160 _rate,\\n    uint32 _amountOfSwaps,\\n    uint32 _swapInterval\\n  ) external returns (uint256 _dcaId);\\n\\n  function withdrawSwapped(uint256 _dcaId) external returns (uint256 _swapped);\\n\\n  function withdrawSwappedMany(uint256[] calldata _dcaIds) external returns (uint256 _swappedTokenA, uint256 _swappedTokenB);\\n\\n  function modifyRate(uint256 _dcaId, uint160 _newRate) external;\\n\\n  function modifySwaps(uint256 _dcaId, uint32 _newSwaps) external;\\n\\n  function modifyRateAndSwaps(\\n    uint256 _dcaId,\\n    uint160 _newRate,\\n    uint32 _newSwaps\\n  ) external;\\n\\n  function addFundsToPosition(\\n    uint256 _dcaId,\\n    uint256 _amount,\\n    uint32 _newSwaps\\n  ) external;\\n\\n  function terminate(uint256 _dcaId) external;\\n}\\n\\ninterface IDCAPairSwapHandler {\\n  struct SwapInformation {\\n    uint32 interval;\\n    uint32 swapToPerform;\\n    uint256 amountToSwapTokenA;\\n    uint256 amountToSwapTokenB;\\n  }\\n\\n  struct NextSwapInformation {\\n    SwapInformation[] swapsToPerform;\\n    uint8 amountOfSwaps;\\n    uint256 availableToBorrowTokenA;\\n    uint256 availableToBorrowTokenB;\\n    uint256 ratePerUnitBToA;\\n    uint256 ratePerUnitAToB;\\n    uint256 platformFeeTokenA;\\n    uint256 platformFeeTokenB;\\n    uint256 amountToBeProvidedBySwapper;\\n    uint256 amountToRewardSwapperWith;\\n    IERC20Detailed tokenToBeProvidedBySwapper;\\n    IERC20Detailed tokenToRewardSwapperWith;\\n  }\\n\\n  event Swapped(\\n    address indexed _sender,\\n    address indexed _to,\\n    uint256 _amountBorrowedTokenA,\\n    uint256 _amountBorrowedTokenB,\\n    uint32 _fee,\\n    NextSwapInformation _nextSwapInformation\\n  );\\n\\n  error NoSwapsToExecute();\\n\\n  function nextSwapAvailable(uint32) external view returns (uint32);\\n\\n  function swapAmountAccumulator(uint32, address) external view returns (uint256);\\n\\n  function getNextSwapInfo() external view returns (NextSwapInformation memory _nextSwapInformation);\\n\\n  function swap() external;\\n\\n  function swap(\\n    uint256 _amountToBorrowTokenA,\\n    uint256 _amountToBorrowTokenB,\\n    address _to,\\n    bytes calldata _data\\n  ) external;\\n\\n  function secondsUntilNextSwap() external view returns (uint32);\\n}\\n\\ninterface IDCAPairLoanHandler {\\n  event Loaned(address indexed _sender, address indexed _to, uint256 _amountBorrowedTokenA, uint256 _amountBorrowedTokenB, uint32 _loanFee);\\n\\n  error ZeroLoan();\\n\\n  function availableToBorrow() external view returns (uint256 _amountToBorrowTokenA, uint256 _amountToBorrowTokenB);\\n\\n  function loan(\\n    uint256 _amountToBorrowTokenA,\\n    uint256 _amountToBorrowTokenB,\\n    address _to,\\n    bytes calldata _data\\n  ) external;\\n}\\n\\ninterface IDCAPair is IDCAPairParameters, IDCAPairSwapHandler, IDCAPairPositionHandler, IDCAPairLoanHandler {}\\n\",\"keccak256\":\"0x4c5bf2a9933f41348df17008dc0a2c84b12bd46c158358f23d8b40665ccd96ca\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IDCATokenDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\nimport './IDCAPair.sol';\\n\\ninterface IDCATokenDescriptor {\\n  function tokenURI(IDCAPairPositionHandler _positionHandler, uint256 _tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x02d47009390b1163d86af7b9dd69b31a5ff86d11f3ec3e3cccf6a5ed48013328\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IERC20Detailed is IERC20 {\\n  function decimals() external view returns (uint8);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x86fb39cf10020e4372633e2e28b3fc5b78ea9d455e4decc56248b2fc65847517\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ITimeWeightedOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol';\\n\\ninterface ITimeWeightedOracle {\\n  event AddedSupportForPair(address _tokenA, address _tokenB);\\n\\n  /** Returns whether this oracle can support this pair of tokens */\\n  function canSupportPair(address _tokenA, address _tokenB) external view returns (bool);\\n\\n  /** Returns a quote, based on the given tokens and amount */\\n  function quote(\\n    address _tokenIn,\\n    uint128 _amountIn,\\n    address _tokenOut\\n  ) external view returns (uint256 _amountOut);\\n\\n  /**\\n   * Let the oracle take some actions to configure this pair of tokens for future uses.\\n   * Will revert if pair cannot be supported.\\n   */\\n  function addSupportForPair(address _tokenA, address _tokenB) external;\\n}\\n\\ninterface IUniswapV3OracleAggregator is ITimeWeightedOracle {\\n  event AddedFeeTier(uint24 _feeTier);\\n  event PeriodChanged(uint32 _period);\\n\\n  /* Public getters */\\n  function factory() external view returns (IUniswapV3Factory);\\n\\n  function supportedFeeTiers() external view returns (uint24[] memory);\\n\\n  function poolsUsedForPair(address _tokenA, address _tokenB) external view returns (address[] memory);\\n\\n  function period() external view returns (uint16);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MINIMUM_PERIOD() external view returns (uint16);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MAXIMUM_PERIOD() external view returns (uint16);\\n\\n  /* Public setters */\\n  function addFeeTier(uint24) external;\\n\\n  function setPeriod(uint16) external;\\n}\\n\",\"keccak256\":\"0xa4d11329f1af41227caf2693d7826428bc917802239c18f29a7d49fd476d25bc\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/NFTDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport 'base64-sol/base64.sol';\\nimport './NFTSVG.sol';\\n\\n// Based on Uniswap's NFTDescriptor\\nlibrary NFTDescriptor {\\n  using Strings for uint256;\\n  using Strings for uint32;\\n\\n  struct ConstructTokenURIParams {\\n    address pair;\\n    address tokenA;\\n    address tokenB;\\n    uint8 tokenADecimals;\\n    uint8 tokenBDecimals;\\n    string tokenASymbol;\\n    string tokenBSymbol;\\n    string swapInterval;\\n    uint32 swapsExecuted;\\n    uint32 swapsLeft;\\n    uint256 tokenId;\\n    uint256 swapped;\\n    uint256 remaining;\\n    uint160 rate;\\n    bool fromA;\\n  }\\n\\n  function constructTokenURI(ConstructTokenURIParams memory _params) internal pure returns (string memory) {\\n    string memory _name = _generateName(_params);\\n\\n    string memory _description = _generateDescription(\\n      _params.tokenASymbol,\\n      _params.tokenBSymbol,\\n      addressToString(_params.pair),\\n      addressToString(_params.tokenA),\\n      addressToString(_params.tokenB),\\n      _params.swapInterval,\\n      _params.tokenId\\n    );\\n\\n    string memory _image = Base64.encode(bytes(_generateSVGImage(_params)));\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          'data:application/json;base64,',\\n          Base64.encode(\\n            bytes(\\n              abi.encodePacked(\\n                '{\\\"name\\\":\\\"',\\n                _name,\\n                '\\\", \\\"description\\\":\\\"',\\n                _description,\\n                '\\\", \\\"image\\\": \\\"',\\n                'data:image/svg+xml;base64,',\\n                _image,\\n                '\\\"}'\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function _escapeQuotes(string memory _symbol) private pure returns (string memory) {\\n    bytes memory symbolBytes = bytes(_symbol);\\n    uint8 quotesCount = 0;\\n    for (uint8 i = 0; i < symbolBytes.length; i++) {\\n      if (symbolBytes[i] == '\\\"') {\\n        quotesCount++;\\n      }\\n    }\\n    if (quotesCount > 0) {\\n      bytes memory escapedBytes = new bytes(symbolBytes.length + (quotesCount));\\n      uint256 index;\\n      for (uint8 i = 0; i < symbolBytes.length; i++) {\\n        if (symbolBytes[i] == '\\\"') {\\n          escapedBytes[index++] = '\\\\\\\\';\\n        }\\n        escapedBytes[index++] = symbolBytes[i];\\n      }\\n      return string(escapedBytes);\\n    }\\n    return _symbol;\\n  }\\n\\n  function _generateDescription(\\n    string memory _tokenASymbol,\\n    string memory _tokenBSymbol,\\n    string memory _pairAddress,\\n    string memory _tokenAAddress,\\n    string memory _tokenBAddress,\\n    string memory _interval,\\n    uint256 _tokenId\\n  ) private pure returns (string memory) {\\n    string memory _part1 = string(\\n      abi.encodePacked(\\n        'This NFT represents a position in a Mean Finance DCA ',\\n        _escapeQuotes(_tokenASymbol),\\n        '-',\\n        _escapeQuotes(_tokenBSymbol),\\n        ' pair. ',\\n        'The owner of this NFT can modify or redeem the position.\\\\\\\\n',\\n        '\\\\\\\\nPair Address: ',\\n        _pairAddress,\\n        '\\\\\\\\n',\\n        _escapeQuotes(_tokenASymbol)\\n      )\\n    );\\n    string memory _part2 = string(\\n      abi.encodePacked(\\n        ' Address: ',\\n        _tokenAAddress,\\n        '\\\\\\\\n',\\n        _escapeQuotes(_tokenBSymbol),\\n        ' Address: ',\\n        _tokenBAddress,\\n        '\\\\\\\\nSwap interval: ',\\n        _interval,\\n        '\\\\\\\\nToken ID: ',\\n        _tokenId.toString(),\\n        '\\\\\\\\n\\\\\\\\n',\\n        unicode'\\u26a0\\ufe0f DISCLAIMER: Due diligence is imperative when assessing this NFT. Make sure token addresses match the expected tokens, as token symbols may be imitated.'\\n      )\\n    );\\n    return string(abi.encodePacked(_part1, _part2));\\n  }\\n\\n  function _generateName(ConstructTokenURIParams memory _params) private pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          'Mean Finance DCA - ',\\n          _params.swapInterval,\\n          ' - ',\\n          _escapeQuotes(_params.tokenASymbol),\\n          '/',\\n          _escapeQuotes(_params.tokenBSymbol)\\n        )\\n      );\\n  }\\n\\n  struct DecimalStringParams {\\n    // significant figures of decimal\\n    uint256 sigfigs;\\n    // length of decimal string\\n    uint8 bufferLength;\\n    // ending index for significant figures (funtion works backwards when copying sigfigs)\\n    uint8 sigfigIndex;\\n    // index of decimal place (0 if no decimal)\\n    uint8 decimalIndex;\\n    // start index for trailing/leading 0's for very small/large numbers\\n    uint8 zerosStartIndex;\\n    // end index for trailing/leading 0's for very small/large numbers\\n    uint8 zerosEndIndex;\\n    // true if decimal number is less than one\\n    bool isLessThanOne;\\n  }\\n\\n  function _generateDecimalString(DecimalStringParams memory params) private pure returns (string memory) {\\n    bytes memory buffer = new bytes(params.bufferLength);\\n    if (params.isLessThanOne) {\\n      buffer[0] = '0';\\n      buffer[1] = '.';\\n    }\\n\\n    // add leading/trailing 0's\\n    for (uint256 zerosCursor = params.zerosStartIndex; zerosCursor < params.zerosEndIndex + 1; zerosCursor++) {\\n      buffer[zerosCursor] = bytes1(uint8(48));\\n    }\\n    // add sigfigs\\n    while (params.sigfigs > 0) {\\n      if (params.decimalIndex > 0 && params.sigfigIndex == params.decimalIndex) {\\n        buffer[params.sigfigIndex--] = '.';\\n      }\\n      uint8 charIndex = uint8(48 + (params.sigfigs % 10));\\n      buffer[params.sigfigIndex] = bytes1(charIndex);\\n      params.sigfigs /= 10;\\n      if (params.sigfigs > 0) {\\n        params.sigfigIndex--;\\n      }\\n    }\\n    return string(buffer);\\n  }\\n\\n  function _sigfigsRounded(uint256 value, uint8 digits) private pure returns (uint256, bool) {\\n    bool extraDigit;\\n    if (digits > 5) {\\n      value = value / (10**(digits - 5));\\n    }\\n    bool roundUp = value % 10 > 4;\\n    value = value / 10;\\n    if (roundUp) {\\n      value = value + 1;\\n    }\\n    // 99999 -> 100000 gives an extra sigfig\\n    if (value == 100000) {\\n      value /= 10;\\n      extraDigit = true;\\n    }\\n    return (value, extraDigit);\\n  }\\n\\n  function fixedPointToDecimalString(uint256 value, uint8 decimals) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return '0.0000';\\n    }\\n\\n    bool priceBelow1 = value < 10**decimals;\\n\\n    // get digit count\\n    uint256 temp = value;\\n    uint8 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    // don't count extra digit kept for rounding\\n    digits = digits - 1;\\n\\n    // address rounding\\n    (uint256 sigfigs, bool extraDigit) = _sigfigsRounded(value, digits);\\n    if (extraDigit) {\\n      digits++;\\n    }\\n\\n    DecimalStringParams memory params;\\n    if (priceBelow1) {\\n      // 7 bytes ( \\\"0.\\\" and 5 sigfigs) + leading 0's bytes\\n      params.bufferLength = uint8(digits >= 5 ? decimals - digits + 6 : decimals + 2);\\n      params.zerosStartIndex = 2;\\n      params.zerosEndIndex = uint8(decimals - digits + 1);\\n      params.sigfigIndex = uint8(params.bufferLength - 1);\\n    } else if (digits >= decimals + 4) {\\n      // no decimal in price string\\n      params.bufferLength = uint8(digits - decimals + 1);\\n      params.zerosStartIndex = 5;\\n      params.zerosEndIndex = uint8(params.bufferLength - 1);\\n      params.sigfigIndex = 4;\\n    } else {\\n      // 5 sigfigs surround decimal\\n      params.bufferLength = 6;\\n      params.sigfigIndex = 5;\\n      params.decimalIndex = uint8(digits - decimals + 1);\\n    }\\n    params.sigfigs = sigfigs;\\n    params.isLessThanOne = priceBelow1;\\n\\n    return _generateDecimalString(params);\\n  }\\n\\n  function addressToString(address _addr) internal pure returns (string memory) {\\n    bytes memory s = new bytes(40);\\n    for (uint256 i = 0; i < 20; i++) {\\n      bytes1 b = bytes1(uint8(uint256(uint160(_addr)) / (2**(8 * (19 - i)))));\\n      bytes1 hi = bytes1(uint8(b) / 16);\\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n      s[2 * i] = _char(hi);\\n      s[2 * i + 1] = _char(lo);\\n    }\\n    return string(abi.encodePacked('0x', string(s)));\\n  }\\n\\n  function _char(bytes1 b) private pure returns (bytes1 c) {\\n    if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n    else return bytes1(uint8(b) + 0x57);\\n  }\\n\\n  function _generateSVGImage(ConstructTokenURIParams memory _params) private pure returns (string memory svg) {\\n    string memory _fromSymbol;\\n    string memory _toSymbol;\\n    uint8 _fromDecimals;\\n    uint8 _toDecimals;\\n    if (_params.fromA) {\\n      _fromSymbol = _escapeQuotes(_params.tokenASymbol);\\n      _fromDecimals = _params.tokenADecimals;\\n      _toSymbol = _escapeQuotes(_params.tokenBSymbol);\\n      _toDecimals = _params.tokenBDecimals;\\n    } else {\\n      _fromSymbol = _escapeQuotes(_params.tokenBSymbol);\\n      _fromDecimals = _params.tokenBDecimals;\\n      _toSymbol = _escapeQuotes(_params.tokenASymbol);\\n      _toDecimals = _params.tokenADecimals;\\n    }\\n    NFTSVG.SVGParams memory _svgParams = NFTSVG.SVGParams({\\n      tokenId: _params.tokenId,\\n      tokenA: addressToString(_params.tokenA),\\n      tokenB: addressToString(_params.tokenB),\\n      tokenASymbol: _escapeQuotes(_params.tokenASymbol),\\n      tokenBSymbol: _escapeQuotes(_params.tokenBSymbol),\\n      interval: _params.swapInterval,\\n      swapsExecuted: _params.swapsExecuted,\\n      swapsLeft: _params.swapsLeft,\\n      swapped: string(abi.encodePacked(fixedPointToDecimalString(_params.swapped, _toDecimals), ' ', _toSymbol)),\\n      averagePrice: string(\\n        abi.encodePacked(\\n          fixedPointToDecimalString(_params.swapsExecuted > 0 ? _params.swapped / _params.swapsExecuted : 0, _toDecimals),\\n          ' ',\\n          _toSymbol\\n        )\\n      ),\\n      remaining: string(abi.encodePacked(fixedPointToDecimalString(_params.remaining, _fromDecimals), ' ', _fromSymbol)),\\n      rate: string(abi.encodePacked(fixedPointToDecimalString(_params.rate, _fromDecimals), ' ', _fromSymbol))\\n    });\\n\\n    return NFTSVG.generateSVG(_svgParams);\\n  }\\n}\\n\",\"keccak256\":\"0x3d98b0bdc10b5f6880c557a42aa8b8e75aca045ecedaecbf36377b94319f77a0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/NFTSVG.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\n/// @title NFTSVG\\n/// @notice Provides a function for generating an SVG associated with a DCA NFT. Based on Uniswap's NFTDescriptor. Background by bgjar.com\\nlibrary NFTSVG {\\n  using Strings for uint256;\\n  using Strings for uint32;\\n\\n  struct SVGParams {\\n    string tokenA;\\n    string tokenB;\\n    string tokenASymbol;\\n    string tokenBSymbol;\\n    string interval;\\n    uint32 swapsExecuted;\\n    uint32 swapsLeft;\\n    uint256 tokenId;\\n    string swapped;\\n    string averagePrice;\\n    string remaining;\\n    string rate;\\n  }\\n\\n  function generateSVG(SVGParams memory params) internal pure returns (string memory svg) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          _generateSVGDefs(),\\n          _generateSVGBorderText(params.tokenA, params.tokenB, params.tokenASymbol, params.tokenBSymbol),\\n          _generateSVGCardMantle(params.tokenASymbol, params.tokenBSymbol, params.interval),\\n          _generageSVGProgressArea(params.swapsExecuted, params.swapsLeft),\\n          _generateSVGPositionData(params.tokenId, params.swapped, params.averagePrice, params.remaining, params.rate),\\n          '</svg>'\\n        )\\n      );\\n  }\\n\\n  function _generateSVGDefs() private pure returns (string memory svg) {\\n    svg = string(\\n      abi.encodePacked(\\n        '<svg width=\\\"290\\\" height=\\\"560\\\" viewBox=\\\"0 0 290 560\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">',\\n        '<defs><linearGradient x1=\\\"118.1%\\\" y1=\\\"10.5%\\\" x2=\\\"-18.1%\\\" y2=\\\"89.5%\\\" gradientUnits=\\\"userSpaceOnUse\\\" id=\\\"LinearGradient\\\"><stop stop-color=\\\"rgba(13, 5, 20, 1)\\\" offset=\\\"0\\\"></stop><stop stop-color=\\\"rgba(47, 19, 66, 1)\\\" offset=\\\"0.7\\\"></stop><stop stop-color=\\\"rgba(35, 17, 51, 1)\\\" offset=\\\"1\\\"></stop></linearGradient><clipPath id=\\\"corners\\\"><rect width=\\\"290\\\" height=\\\"560\\\" rx=\\\"40\\\" ry=\\\"40\\\" /></clipPath><path id=\\\"text-path-a\\\" d=\\\"M40 12 H250 A28 28 0 0 1 278 40 V520 A28 28 0 0 1 250 548 H40 A28 28 0 0 1 12 520 V40 A28 28 0 0 1 40 12 z\\\" /><mask id=\\\"none\\\" maskContentUnits=\\\"objectBoundingBox\\\"><rect width=\\\"1\\\" height=\\\"1\\\" fill=\\\"white\\\" /></mask><linearGradient id=\\\"grad-symbol\\\"><stop offset=\\\"0.8\\\" stop-color=\\\"white\\\" stop-opacity=\\\"1\\\" /><stop offset=\\\".95\\\" stop-color=\\\"white\\\" stop-opacity=\\\"0\\\" /></linearGradient><mask id=\\\"fade-symbol\\\" maskContentUnits=\\\"userSpaceOnUse\\\"><rect width=\\\"290px\\\" height=\\\"200px\\\" fill=\\\"url(#grad-symbol)\\\" /></mask></defs>',\\n        '<g clip-path=\\\"url(#corners)\\\">',\\n        '<rect width=\\\"290\\\" height=\\\"560\\\" x=\\\"0\\\" y=\\\"0\\\" fill=\\\"url(#LinearGradient)\\\"></rect>',\\n        '<path d=\\\"M290 0L248.61 0L290 61.48z\\\" fill=\\\"rgba(255, 255, 255, .1)\\\"></path>',\\n        '<path d=\\\"M248.61 0L290 61.48L290 189.35999999999999L200.75 0z\\\" fill=\\\"rgba(255, 255, 255, .075)\\\"></path>',\\n        '<path d=\\\"M200.75 0L290 189.35999999999999L290 294.91999999999996L112.52 0z\\\" fill=\\\"rgba(255, 255, 255, .05)\\\"></path>',\\n        '<path d=\\\"M112.51999999999998 0L290 294.91999999999996L290 357.79999999999995L32.78999999999998 0z\\\" fill=\\\"rgba(255, 255, 255, .025)\\\"></path>',\\n        '<path d=\\\"M0 560L40.27 560L0 402.35z\\\" fill=\\\"rgba(0, 0, 0, .1)\\\"></path>',\\n        '<path d=\\\"M0 402.35L40.27 560L137.96 560L0 221.89000000000001z\\\" fill=\\\"rgba(0, 0, 0, .075)\\\"></path>',\\n        '<path d=\\\"M0 221.89L137.96 560L153.85600000000002 560L0 183.92z\\\" fill=\\\"rgba(0, 0, 0, .05)\\\"></path>',\\n        '<path d=\\\"M0 183.91999999999996L153.85000000000002 560L156.66000000000003 560L0 151.61999999999995z\\\" fill=\\\"rgba(0, 0, 0, .025)\\\"></path>',\\n        '</g>'\\n      )\\n    );\\n  }\\n\\n  function _generateSVGBorderText(\\n    string memory _tokenA,\\n    string memory _tokenB,\\n    string memory _tokenASymbol,\\n    string memory _tokenBSymbol\\n  ) private pure returns (string memory svg) {\\n    string memory _tokenAText = string(abi.encodePacked(_tokenA, unicode' \\u2022 ', _tokenASymbol));\\n    string memory _tokenBText = string(abi.encodePacked(_tokenB, unicode' \\u2022 ', _tokenBSymbol));\\n    svg = string(\\n      abi.encodePacked(\\n        '<text text-rendering=\\\"optimizeSpeed\\\"><textPath startOffset=\\\"-100%\\\" fill=\\\"white\\\" font-family=\\\"\\\\'Courier New\\\\', monospace\\\" font-size=\\\"10px\\\" xlink:href=\\\"#text-path-a\\\">',\\n        _tokenAText,\\n        '<animate additive=\\\"sum\\\" attributeName=\\\"startOffset\\\" from=\\\"0%\\\" to=\\\"100%\\\" begin=\\\"0s\\\" dur=\\\"30s\\\" repeatCount=\\\"indefinite\\\" /></textPath><textPath startOffset=\\\"0%\\\" fill=\\\"white\\\" font-family=\\\"\\\\'Courier New\\\\', monospace\\\" font-size=\\\"10px\\\" xlink:href=\\\"#text-path-a\\\">',\\n        _tokenAText,\\n        '<animate additive=\\\"sum\\\" attributeName=\\\"startOffset\\\" from=\\\"0%\\\" to=\\\"100%\\\" begin=\\\"0s\\\" dur=\\\"30s\\\" repeatCount=\\\"indefinite\\\" /></textPath><textPath startOffset=\\\"50%\\\" fill=\\\"white\\\" font-family=\\\"\\\\'Courier New\\\\', monospace\\\" font-size=\\\"10px\\\" xlink:href=\\\"#text-path-a\\\">',\\n        _tokenBText,\\n        '<animate additive=\\\"sum\\\" attributeName=\\\"startOffset\\\" from=\\\"0%\\\" to=\\\"100%\\\" begin=\\\"0s\\\" dur=\\\"30s\\\" repeatCount=\\\"indefinite\\\" /></textPath><textPath startOffset=\\\"-50%\\\" fill=\\\"white\\\" font-family=\\\"\\\\'Courier New\\\\', monospace\\\" font-size=\\\"10px\\\" xlink:href=\\\"#text-path-a\\\">',\\n        _tokenBText,\\n        '<animate additive=\\\"sum\\\" attributeName=\\\"startOffset\\\" from=\\\"0%\\\" to=\\\"100%\\\" begin=\\\"0s\\\" dur=\\\"30s\\\" repeatCount=\\\"indefinite\\\" /></textPath></text>'\\n      )\\n    );\\n  }\\n\\n  function _generateSVGCardMantle(\\n    string memory _tokenASymbol,\\n    string memory _tokenBSymbol,\\n    string memory _interval\\n  ) private pure returns (string memory svg) {\\n    svg = string(\\n      abi.encodePacked(\\n        '<g mask=\\\"url(#fade-symbol)\\\">'\\n        '<rect fill=\\\"none\\\" x=\\\"0px\\\" y=\\\"0px\\\" width=\\\"290px\\\" height=\\\"200px\\\" />'\\n        '<text y=\\\"70px\\\" x=\\\"32px\\\" fill=\\\"white\\\" font-family=\\\"\\\\'Courier New\\\\', monospace\\\" font-weight=\\\"200\\\" font-size=\\\"35px\\\">',\\n        _tokenASymbol,\\n        '/',\\n        _tokenBSymbol,\\n        '</text>',\\n        '<text y=\\\"115px\\\" x=\\\"32px\\\" fill=\\\"white\\\" font-family=\\\"\\\\'Courier New\\\\', monospace\\\" font-weight=\\\"200\\\" font-size=\\\"28px\\\">',\\n        _interval,\\n        '</text>'\\n        '</g>'\\n      )\\n    );\\n  }\\n\\n  function _generageSVGProgressArea(uint32 _swapsExecuted, uint32 _swapsLeft) private pure returns (string memory svg) {\\n    uint256 _positionNow = 170 + ((314 - 170) / (_swapsExecuted + _swapsLeft)) * _swapsExecuted;\\n    svg = string(\\n      abi.encodePacked(\\n        '<rect x=\\\"16\\\" y=\\\"16\\\" width=\\\"258\\\" height=\\\"528\\\" rx=\\\"26\\\" ry=\\\"26\\\" fill=\\\"rgba(0,0,0,0)\\\" stroke=\\\"rgba(255,255,255,0.2)\\\" />',\\n        '<g mask=\\\"url(#none)\\\" style=\\\"transform:translate(80px,169px)\\\"><rect x=\\\"-16px\\\" y=\\\"-16px\\\" width=\\\"180px\\\" height=\\\"180px\\\" fill=\\\"none\\\" /><path d=\\\"M1 1 L1 145\\\" stroke=\\\"rgba(0,0,0,0.3)\\\" stroke-width=\\\"32px\\\" fill=\\\"none\\\" stroke-linecap=\\\"round\\\" /></g>',\\n        '<g mask=\\\"url(#none)\\\" style=\\\"transform:translate(80px,169px)\\\"><rect x=\\\"-16px\\\" y=\\\"-16px\\\" width=\\\"180px\\\" height=\\\"180px\\\" fill=\\\"none\\\" /><path d=\\\"M1 1 L1 145\\\" stroke=\\\"rgba(255,255,255,1)\\\" fill=\\\"none\\\" stroke-linecap=\\\"round\\\" /></g>',\\n        '<circle cx=\\\"81px\\\" cy=\\\"170px\\\" r=\\\"4px\\\" fill=\\\"#dddddd\\\" />',\\n        '<circle cx=\\\"81px\\\" cy=\\\"',\\n        _positionNow.toString(),\\n        'px\\\" r=\\\"5px\\\" fill=\\\"white\\\" />',\\n        '<circle cx=\\\"81px\\\" cy=\\\"314px\\\" r=\\\"4px\\\" fill=\\\"#dddddd\\\" /><text x=\\\"100px\\\" y=\\\"174px\\\" font-family=\\\"\\\\'Courier New\\\\', monospace\\\" font-size=\\\"12px\\\" fill=\\\"white\\\"><tspan fill=\\\"rgba(255,255,255,0.6)\\\">Executed*: </tspan>',\\n        _swapsExecuted.toString(),\\n        ' swaps</text><text x=\\\"40px\\\" y=\\\"',\\n        (_positionNow + 4).toString(),\\n        'px\\\" font-family=\\\"\\\\'Courier New\\\\', monospace\\\" font-size=\\\"12px\\\" fill=\\\"white\\\">Now</text><text x=\\\"100px\\\" y=\\\"318px\\\" font-family=\\\"\\\\'Courier New\\\\', monospace\\\" font-size=\\\"12px\\\" fill=\\\"white\\\"><tspan fill=\\\"rgba(255,255,255,0.6)\\\">Left: </tspan>',\\n        _swapsLeft.toString(),\\n        ' swaps</text>'\\n      )\\n    );\\n  }\\n\\n  function _generateSVGPositionData(\\n    uint256 _tokenId,\\n    string memory _swapped,\\n    string memory _averagePrice,\\n    string memory _remaining,\\n    string memory _rate\\n  ) private pure returns (string memory svg) {\\n    svg = string(\\n      abi.encodePacked(\\n        _generateData('Id', _tokenId.toString(), 364),\\n        _generateData('Swapped*', _swapped, 394),\\n        _generateData('Avg Price', _averagePrice, 424),\\n        _generateData('Remaining', _remaining, 454),\\n        _generateData('Rate', _rate, 484),\\n        '<g style=\\\"transform:translate(25px, 514px)\\\">',\\n        '<text x=\\\"12px\\\" y=\\\"17px\\\" font-family=\\\"\\\\'Courier New\\\\', monospace\\\" font-size=\\\"10px\\\" fill=\\\"white\\\">',\\n        '<tspan fill=\\\"rgba(255,255,255,0.8)\\\">* since start or last edit/withdraw</tspan>',\\n        '</text>',\\n        '</g>'\\n      )\\n    );\\n  }\\n\\n  function _generateData(\\n    string memory _title,\\n    string memory _data,\\n    uint256 _yCoord\\n  ) private pure returns (string memory svg) {\\n    uint256 _strLength = bytes(_title).length + bytes(_data).length + 2;\\n    svg = string(\\n      abi.encodePacked(\\n        '<g style=\\\"transform:translate(29px, ',\\n        _yCoord.toString(),\\n        'px)\\\">',\\n        '<rect width=\\\"',\\n        uint256(7 * (_strLength + 4)).toString(),\\n        'px\\\" height=\\\"26px\\\" rx=\\\"8px\\\" ry=\\\"8px\\\" fill=\\\"rgba(0,0,0,0.6)\\\" />',\\n        '<text x=\\\"12px\\\" y=\\\"17px\\\" font-family=\\\"\\\\'Courier New\\\\', monospace\\\" font-size=\\\"12px\\\" fill=\\\"white\\\">',\\n        '<tspan fill=\\\"rgba(255,255,255,0.6)\\\">',\\n        _title,\\n        ': </tspan>',\\n        _data,\\n        '</text>',\\n        '</g>'\\n      )\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xa5c121489fc17cc3455a6e248b27b1a6b02c9e1dd00b0c104528587249745f90\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e9dc637514610030575b600080fd5b61004361003e366004611865565b610059565b6040516100509190613915565b60405180910390f35b60606000836001600160a01b0316630fc63d106040518163ffffffff1660e01b815260040160206040518083038186803b15801561009657600080fd5b505afa1580156100aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ce9190611842565b90506000846001600160a01b0316635f64b55b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561010b57600080fd5b505afa15801561011f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101439190611842565b90506000856001600160a01b0316630ad82b2f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561018057600080fd5b505afa158015610194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b89190611842565b604051635b6fd01d60e01b8152600481018790529091506000906001600160a01b03881690635b6fd01d906024016101006040518083038186803b1580156101ff57600080fd5b505afa158015610213573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610237919061192e565b905061055a604051806101e00160405280896001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b03168152602001866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156102ae57600080fd5b505afa1580156102c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e691906119e9565b60ff168152602001856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561032757600080fd5b505afa15801561033b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035f91906119e9565b60ff168152602001866001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156103a057600080fd5b505afa1580156103b4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103dc9190810190611890565b8152602001856001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561041a57600080fd5b505afa15801561042e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104569190810190611890565b81526040808501519051630eb9121760e31b815263ffffffff90911660048201526020909101906001600160a01b038616906375c890b89060240160006040518083038186803b1580156104a957600080fd5b505afa1580156104bd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104e59190810190611890565b8152602001836060015163ffffffff1681526020018360a0015163ffffffff168152602001888152602001836080015181526020018360c0015181526020018360e001516001600160a01b03168152602001866001600160a01b031684600001516001600160a01b0316141515815250610567565b9450505050505b92915050565b6060600061057483610628565b905060006105bc8460a001518560c001516105928760000151610671565b61059f8860200151610671565b6105ac8960400151610671565b8960e001518a61014001516107f6565b905060006105d16105cc866108a7565b610ac6565b90506105ff8383836040516020016105eb93929190611ced565b604051602081830303815290604052610ac6565b60405160200161060f91906138d0565b6040516020818303038152906040529350505050919050565b60608160e0015161063c8360a00151610c3c565b6106498460c00151610c3c565b60405160200161065b93929190612be5565b6040516020818303038152906040529050919050565b60408051602880825260608281019093526000919060208201818036833701905050905060005b60148110156107cd5760006106ae826013613b64565b6106b9906008613af8565b6106c4906002613a40565b6106d7906001600160a01b0387166139a4565b60f81b9050600060108260f81c6106ee91906139db565b60f81b905060008160f81c60106107059190613b43565b8360f81c6107139190613b7b565b60f81b905061072182610e4b565b8561072d866002613af8565b8151811061074b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061076b81610e4b565b85610777866002613af8565b610782906001613948565b815181106107a057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535050505080806107c590613beb565b915050610698565b50806040516020016107df9190611db4565b604051602081830303815290604052915050919050565b6060600061080389610c3c565b61080c89610c3c565b886108168c610c3c565b6040516020016108299493929190613003565b60405160208183030381529060405290506000866108468a610c3c565b878761085188610e86565b604051602001610865959493929190612e61565b60405160208183030381529060405290508181604051602001610889929190611a26565b60405160208183030381529060405292505050979650505050505050565b6060806060600080856101c00151156108eb576108c78660a00151610c3c565b9350856060015191506108dd8660c00151610c3c565b925085608001519050610918565b6108f88660c00151610c3c565b93508560800151915061090e8660a00151610c3c565b9250856060015190505b60006040518061018001604052806109338960200151610671565b81526020016109458960400151610671565b81526020016109578960a00151610c3c565b81526020016109698960c00151610c3c565b81526020018860e00151815260200188610100015163ffffffff16815260200188610120015163ffffffff16815260200188610140015181526020016109b489610160015185610fa8565b866040516020016109c6929190611c71565b6040516020818303038152906040528152602001610a1960008a610100015163ffffffff16116109f7576000610a13565b89610100015163ffffffff168a6101600151610a1391906139a4565b85610fa8565b86604051602001610a2b929190611c71565b6040516020818303038152906040528152602001610a4e89610180015186610fa8565b87604051602001610a60929190611c71565b6040516020818303038152906040528152602001610a8c896101a001516001600160a01b031686610fa8565b87604051602001610a9e929190611c71565b6040516020818303038152906040528152509050610abb816111a3565b979650505050505050565b6060815160001415610ae657505060408051602081019091526000815290565b6000604051806060016040528060408152602001613cd56040913990506000600384516002610b159190613948565b610b1f91906139a4565b610b2a906004613af8565b90506000610b39826020613948565b67ffffffffffffffff811115610b5f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610b89576020820181803683370190505b509050818152600183018586518101602084015b81831015610bf75760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401610b9d565b600389510660018114610c115760028114610c2257610c2e565b613d3d60f01b600119830152610c2e565b603d60f81b6000198301525b509398975050505050505050565b6060816000805b82518160ff161015610cad57828160ff1681518110610c7257634e487b7160e01b600052603260045260246000fd5b6020910101516001600160f81b031916601160f91b1415610c9b5781610c9781613c06565b9250505b80610ca581613c06565b915050610c43565b5060ff811615610e435760008160ff168351610cc99190613948565b67ffffffffffffffff811115610cef57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610d19576020820181803683370190505b5090506000805b84518160ff161015610e3857848160ff1681518110610d4f57634e487b7160e01b600052603260045260246000fd5b6020910101516001600160f81b031916601160f91b1415610db257601760fa1b8383610d7a81613beb565b945081518110610d9a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053505b848160ff1681518110610dd557634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b0319168383610def81613beb565b945081518110610e0f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535080610e3081613c06565b915050610d20565b509095945050505050565b509192915050565b6000600a60f883901c1015610e7257610e6960f883901c603061397f565b60f81b92915050565b610e6960f883901c605761397f565b919050565b606081610eaa5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610ed45780610ebe81613beb565b9150610ecd9050600a836139a4565b9150610eae565b60008167ffffffffffffffff811115610efd57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610f27576020820181803683370190505b5090505b8415610fa057610f3c600183613b64565b9150610f49600a86613c26565b610f54906030613948565b60f81b818381518110610f7757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350610f99600a866139a4565b9450610f2b565b949350505050565b606082610fd257506040805180820190915260068152650302e303030360d41b6020820152610561565b6000610fdf83600a613a4c565b841090508360005b811561100d5780610ff781613c06565b91506110069050600a836139a4565b9150610fe7565b611018600182613b7b565b9050600080611027888461122b565b91509150801561103f578261103b81613c06565b9350505b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915285156110f95760058460ff16101561109a5761109588600261397f565b6110af565b6110a48489613b7b565b6110af90600661397f565b60ff166020820152600260808201526110c88489613b7b565b6110d390600161397f565b60ff1660a082015260208101516110ec90600190613b7b565b60ff166040820152611182565b61110488600461397f565b60ff168460ff16106111565761111a8885613b7b565b61112590600161397f565b60ff16602082018190526005608083015261114290600190613b7b565b60ff1660a082015260046040820152611182565b600660208201526005604082015261116e8885613b7b565b61117990600161397f565b60ff1660608201525b82815285151560c0820152611196816112b8565b9998505050505050505050565b60606111ad611533565b6111c98360000151846020015185604001518660600151611558565b6111e08460400151856060015186608001516115d8565b6111f28560a001518660c00151611607565b6112178660e001518761010001518861012001518961014001518a61016001516116a3565b60405160200161065b959493929190611bf5565b600080600060058460ff16111561125f57611247600585613b7b565b61125290600a613a4c565b61125c90866139a4565b94505b6000600461126e600a88613c26565b11905061127c600a876139a4565b955080156112925761128f866001613948565b95505b85620186a014156112af576112a8600a876139a4565b9550600191505b50939492505050565b60606000826020015160ff1667ffffffffffffffff8111156112ea57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611314576020820181803683370190505b5090508260c001511561139c57600360fc1b8160008151811061134757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350601760f91b8160018151811061138457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053505b608083015160ff165b60a08401516113b590600161397f565b60ff1681101561140d57603060f81b8282815181106113e457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508061140581613beb565b9150506113a5565b505b825115610561576000836060015160ff1611801561143a5750826060015160ff16836040015160ff16145b1561149957601760f91b8184604001805180919061145790613bce565b60ff1660ff1681525060ff168151811061148157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053505b82516000906114aa90600a90613c26565b6114b5906030613948565b90508060f81b82856040015160ff16815181106114e257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600a8460000181815161150c91906139a4565b90525083511561152d576040840180519061152682613bce565b60ff169052505b5061140f565b606060405160200161154490611dde565b604051602081830303815290604052905090565b60606000858460405160200161156f929190611cad565b604051602081830303815290604052905060008584604051602001611595929190611cad565b6040516020818303038152906040529050818282836040516020016115bd94939291906127b4565b60405160208183030381529060405292505050949350505050565b60608383836040516020016115ef93929190612c65565b60405160208183030381529060405290509392505050565b60606000836116168482613960565b6116219060906139b8565b61162b9190613b17565b6116369060aa613960565b63ffffffff16905061164781610e86565b6116568563ffffffff16610e86565b611669611664846004613948565b610e86565b6116788663ffffffff16610e86565b60405160200161168b94939291906132dc565b60405160208183030381529060405291505092915050565b60606116d460405180604001604052806002815260200161125960f21b8152506116cc88610e86565b61016c6117b4565b6117016040518060400160405280600881526020016729bbb0b83832b21560c11b8152508761018a6117b4565b61172f6040518060400160405280600981526020016841766720507269636560b81b815250876101a86117b4565b61175d6040518060400160405280600981526020016852656d61696e696e6760b81b815250876101c66117b4565b611786604051806040016040528060048152602001635261746560e01b815250876101e46117b4565b60405160200161179a959493929190611a55565b604051602081830303815290604052905095945050505050565b60606000835185516117c69190613948565b6117d1906002613948565b90506117dc83610e86565b6117f56117ea836004613948565b611664906007613af8565b868660405160200161180a9493929190613124565b6040516020818303038152906040529150509392505050565b8051610e8181613c7c565b805163ffffffff81168114610e8157600080fd5b600060208284031215611853578081fd5b815161185e81613c7c565b9392505050565b60008060408385031215611877578081fd5b823561188281613c7c565b946020939093013593505050565b6000602082840312156118a1578081fd5b815167ffffffffffffffff808211156118b8578283fd5b818401915084601f8301126118cb578283fd5b8151818111156118dd576118dd613c66565b604051601f8201601f19908116603f0116810190838211818310171561190557611905613c66565b8160405282815287602084870101111561191d578586fd5b610abb836020830160208801613b9e565b6000610100808385031215611941578182fd5b6040519081019067ffffffffffffffff8211818310171561196457611964613c66565b816040528351915061197582613c7c565b81815261198460208501611823565b60208201526119956040850161182e565b60408201526119a66060850161182e565b6060820152608084015160808201526119c160a0850161182e565b60a082015260c084015160c08201526119dc60e08501611823565b60e0820152949350505050565b6000602082840312156119fa578081fd5b815160ff8116811461185e578182fd5b60008151611a1c818560208601613b9e565b9290920192915050565b60008351611a38818460208801613b9e565b835190830190611a4c818360208801613b9e565b01949350505050565b600086516020611a688285838c01613b9e565b875191840191611a7b8184848c01613b9e565b8751920191611a8d8184848b01613b9e565b8651920191611a9f8184848a01613b9e565b8551920191611ab18184848901613b9e565b7f3c67207374796c653d227472616e73666f726d3a7472616e736c61746528323592019182526b383c16101a989a383c14911f60a11b908201527f3c7465787420783d22313270782220793d22313770782220666f6e742d66616d602c8201527f696c793d2227436f7572696572204e6577272c206d6f6e6f7370616365222066604c8201527f6f6e742d73697a653d2231307078222066696c6c3d227768697465223e000000606c8201527f3c747370616e2066696c6c3d2272676261283235352c3235352c3235352c302e60898201527f3829223e2a2073696e6365207374617274206f72206c61737420656469742f7760a98201526e34ba34323930bb9e17ba39b830b71f60891b60c9820152661e17ba32bc3a1f60c91b60d8820152611be960df82015b631e17b39f60e11b815260040190565b98975050505050505050565b60008651611c07818460208b01613b9e565b865190830190611c1b818360208b01613b9e565b8651910190611c2e818360208a01613b9e565b8551910190611c41818360208901613b9e565b8451910190611c54818360208801613b9e565b651e17b9bb339f60d11b9101908152600601979650505050505050565b60008351611c83818460208801613b9e565b600160fd1b9083019081528351611ca1816001840160208801613b9e565b01600101949350505050565b60008351611cbf818460208801613b9e565b64010714051160dd1b9083019081528351611ce1816005840160208801613b9e565b01600501949350505050565b683d913730b6b2911d1160b91b81528351600090611d12816009850160208901613b9e565b71111610113232b9b1b934b83a34b7b7111d1160711b6009918401918201528451611d4481601b840160208901613b9e565b6c1116101134b6b0b3b2911d101160991b601b92909101918201527f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000060288201528351611d98816042840160208801613b9e565b61227d60f01b6042929091019182015260440195945050505050565b61060f60f31b815260008251611dd1816002850160208701613b9e565b9190910160020192915050565b7f3c7376672077696474683d2232393022206865696768743d223536302220766981527f6577426f783d2230203020323930203536302220786d6c6e733d22687474703a60208201527f2f2f7777772e77332e6f72672f323030302f7376672220786d6c6e733a786c6960408201527f6e6b3d22687474703a2f2f7777772e77332e6f72672f313939392f786c696e6b606082015261111f60f11b60808201527f3c646566733e3c6c696e6561724772616469656e742078313d223131382e312560828201527f222079313d2231302e3525222078323d222d31382e3125222079323d2238392e60a28201527f352522206772616469656e74556e6974733d227573657253706163654f6e557360c28201527f65222069643d224c696e6561724772616469656e74223e3c73746f702073746f60e28201527f702d636f6c6f723d22726762612831332c20352c2032302c20312922206f66666101028201527f7365743d2230223e3c2f73746f703e3c73746f702073746f702d636f6c6f723d6101228201527f22726762612834372c2031392c2036362c20312922206f66667365743d22302e6101428201527f37223e3c2f73746f703e3c73746f702073746f702d636f6c6f723d22726762616101628201527f2833352c2031372c2035312c20312922206f66667365743d2231223e3c2f73746101828201527f6f703e3c2f6c696e6561724772616469656e743e3c636c6970506174682069646101a28201527f3d22636f726e657273223e3c726563742077696474683d2232393022206865696101c28201527f6768743d22353630222072783d223430222072793d22343022202f3e3c2f636c6101e28201527f6970506174683e3c706174682069643d22746578742d706174682d612220643d6102028201527f224d3430203132204832353020413238203238203020302031203237382034306102228201527f20563532302041323820323820302030203120323530203534382048343020416102428201527f32382032382030203020312031322035323020563430204132382032382030206102628201527f302031203430203132207a22202f3e3c6d61736b2069643d226e6f6e6522206d6102828201527f61736b436f6e74656e74556e6974733d226f626a656374426f756e64696e67426102a28201527f6f78223e3c726563742077696474683d223122206865696768743d22312220666102c28201527f696c6c3d22776869746522202f3e3c2f6d61736b3e3c6c696e656172477261646102e28201527f69656e742069643d22677261642d73796d626f6c223e3c73746f70206f6666736103028201527f65743d22302e38222073746f702d636f6c6f723d227768697465222073746f706103228201527f2d6f7061636974793d223122202f3e3c73746f70206f66667365743d222e39356103428201527f222073746f702d636f6c6f723d227768697465222073746f702d6f70616369746103628201527f793d223022202f3e3c2f6c696e6561724772616469656e743e3c6d61736b20696103828201527f643d22666164652d73796d626f6c22206d61736b436f6e74656e74556e6974736103a28201527f3d227573657253706163654f6e557365223e3c726563742077696474683d22326103c28201527f3930707822206865696768743d223230307078222066696c6c3d2275726c28236103e28201527f677261642d73796d626f6c2922202f3e3c2f6d61736b3e3c2f646566733e00006104028201527f3c6720636c69702d706174683d2275726c2823636f726e65727329223e0000006104208201527f3c726563742077696474683d2232393022206865696768743d2235363022207861043d8201527f3d22302220793d2230222066696c6c3d2275726c28234c696e6561724772616461045d8201526d34b2b73a14911f1e17b932b1ba1f60911b61047d8201527f3c7061746820643d224d32393020304c3234382e363120304c3239302036312e61048b8201527f34387a222066696c6c3d2272676261283235352c203235352c203235352c202e6104ab8201526a1894911f1e17b830ba341f60a91b6104cb8201527f3c7061746820643d224d3234382e363120304c3239302036312e34384c3239306104d68201527f203138392e33353939393939393939393939394c3230302e373520307a2220666104f68201527f696c6c3d2272676261283235352c203235352c203235352c202e30373529223e610516820152661e17b830ba341f60c91b6105368201527f3c7061746820643d224d3230302e373520304c323930203138392e333539393961053d8201527f3939393939393939394c323930203239342e393139393939393939393939393661055d8201527f4c3131322e353220307a222066696c6c3d2272676261283235352c203235352c61057d8201527210191a9a961017181a94911f1e17b830ba341f60691b61059d8201527f3c7061746820643d224d3131322e353139393939393939393939393820304c326105b08201527f3930203239342e39313939393939393939393939364c323930203335372e37396105d08201527f3939393939393939393939354c33322e373839393939393939393939393820306105f08201527f7a222066696c6c3d2272676261283235352c203235352c203235352c202e30326106108201526a1a94911f1e17b830ba341f60a91b6106308201527f3c7061746820643d224d30203536304c34302e3237203536304c30203430322e61063b8201527f33357a222066696c6c3d227267626128302c20302c20302c202e3129223e3c2f61065b820152643830ba341f60d91b61067b8201527f3c7061746820643d224d30203430322e33354c34302e3237203536304c3133376106808201527f2e3936203536304c30203232312e38393030303030303030303030317a2220666106a08201527f696c6c3d227267626128302c20302c20302c202e30373529223e3c2f706174686106c0820152601f60f91b6106e08201526000610561611bd961270a6106e185017f3c7061746820643d224d30203232312e38394c3133372e3936203536304c313581527f332e3835363030303030303030303032203536304c30203138332e39327a222060208201527f66696c6c3d227267626128302c20302c20302c202e303529223e3c2f706174686040820152601f60f91b606082015260610190565b7f3c7061746820643d224d30203138332e39313939393939393939393939364c3181527f35332e3835303030303030303030303032203536304c3135362e36363030303060208201527f3030303030303033203536304c30203135312e3631393939393939393939393960408201527f357a222066696c6c3d227267626128302c20302c20302c202e30323529223e3c60608201526517b830ba341f60d11b608082015260860190565b7f3c7465787420746578742d72656e646572696e673d226f7074696d697a65537081527f656564223e3c74657874506174682073746172744f66667365743d222d31303060208201527f25222066696c6c3d2277686974652220666f6e742d66616d696c793d2227436f60408201527f7572696572204e6577272c206d6f6e6f73706163652220666f6e742d73697a6560608201527f3d22313070782220786c696e6b3a687265663d2223746578742d706174682d61608082015261111f60f11b60a08201526000855161288f8160a2850160208a01613b9e565b600080516020613cb583398151915260a291840191820152600080516020613d1583398151915260c2820152600080516020613c9583398151915260e2820152600080516020613d358339815191526101028201527f74683e3c74657874506174682073746172744f66667365743d223025222066696101228201527f6c6c3d2277686974652220666f6e742d66616d696c793d2227436f75726965726101428201527f204e6577272c206d6f6e6f73706163652220666f6e742d73697a653d223130706101628201527f782220786c696e6b3a687265663d2223746578742d706174682d61223e000000610182820152610abb612b7f612b79612a8e612a8861299d61019f87018c611a0a565b600080516020613cb58339815191528152600080516020613d158339815191526020820152600080516020613c958339815191526040820152600080516020613d3583398151915260608201527f74683e3c74657874506174682073746172744f66667365743d2235302522206660808201527f696c6c3d2277686974652220666f6e742d66616d696c793d2227436f7572696560a08201527f72204e6577272c206d6f6e6f73706163652220666f6e742d73697a653d22313060c08201527f70782220786c696e6b3a687265663d2223746578742d706174682d61223e000060e082015260fe0190565b89611a0a565b600080516020613cb58339815191528152600080516020613d158339815191526020820152600080516020613c958339815191526040820152600080516020613d3583398151915260608201527f74683e3c74657874506174682073746172744f66667365743d222d353025222060808201527f66696c6c3d2277686974652220666f6e742d66616d696c793d2227436f75726960a08201527f6572204e6577272c206d6f6e6f73706163652220666f6e742d73697a653d223160c08201527f3070782220786c696e6b3a687265663d2223746578742d706174682d61223e0060e082015260ff0190565b86611a0a565b600080516020613cb58339815191528152600080516020613d158339815191526020820152600080516020613c958339815191526040820152600080516020613d358339815191526060820152693a341f1e17ba32bc3a1f60b11b6080820152608a0190565b72026b2b0b7102334b730b731b2902221a090169606d1b815260008451612c13816013850160208901613b9e565b6201016960ed1b6013918401918201528451612c36816016840160208901613b9e565b602f60f81b601692909101918201528351612c58816017840160208801613b9e565b0160170195945050505050565b7f3c67206d61736b3d2275726c2823666164652d73796d626f6c29223e3c72656381527f742066696c6c3d226e6f6e652220783d223070782220793d223070782220776960208201527f6474683d22323930707822206865696768743d22323030707822202f3e3c746560408201527f787420793d22373070782220783d2233327078222066696c6c3d22776869746560608201527f2220666f6e742d66616d696c793d2227436f7572696572204e6577272c206d6f60808201527f6e6f73706163652220666f6e742d7765696768743d223230302220666f6e742d60a08201526b39b4bd329e91199ab83c111f60a11b60c082015260008451612d708160cc850160208901613b9e565b602f60f81b60cc918401918201528451612d918160cd840160208901613b9e565b610abb612e4a612e44612db660cd85870101661e17ba32bc3a1f60c91b815260070190565b7f3c7465787420793d2231313570782220783d2233327078222066696c6c3d227781527f686974652220666f6e742d66616d696c793d2227436f7572696572204e65772760208201527f2c206d6f6e6f73706163652220666f6e742d7765696768743d2232303022206660408201526f37b73a16b9b4bd329e91191c383c111f60811b606082015260700190565b87611a0a565b6a1e17ba32bc3a1f1e17b39f60a91b8152600b0190565b60006901020b2323932b9b99d160b51b8083528751612e8781600a860160208c01613b9e565b612e3760f11b600a918501918201528751612ea981600c840160208c01613b9e565b01600c810191909152855190612ec6826016830160208a01613b9e565b8181019150507002e3729bbb0b81034b73a32b93b30b61d1607d1b60168201528451612ef9816027840160208901613b9e565b6b02e372a37b5b2b71024a21d160a51b602792909101918201528351612f26816033840160208801613b9e565b611196612f42603383850101632e372e3760e11b815260040190565b7fe29aa0efb88f20444953434c41494d45523a204475652064696c6967656e636581527f20697320696d7065726174697665207768656e20617373657373696e6720746860208201527f6973204e46542e204d616b65207375726520746f6b656e20616464726573736560408201527f73206d617463682074686520657870656374656420746f6b656e732c2061732060608201527f746f6b656e2073796d626f6c73206d617920626520696d6974617465642e00006080820152609e0190565b7f54686973204e465420726570726573656e7473206120706f736974696f6e206981527403710309026b2b0b7102334b730b731b2902221a09605d1b602082015260008551613059816035850160208a01613b9e565b602d60f81b603591840191820152855161307a816036840160208a01613b9e565b660103830b4b917160cd1b603692909101918201527f546865206f776e6572206f662074686973204e46542063616e206d6f64696679603d8201527f206f722072656465656d2074686520706f736974696f6e2e5c6e000000000000605d8201526f02e372830b4b91020b2323932b9b99d160851b60778201528451613107816087840160208901613b9e565b612e3760f11b60879290910191820152610abb6089820185611a0a565b7f3c67207374796c653d227472616e73666f726d3a7472616e736c6174652832398152630383c16160e51b602082015260008551613169816024850160208a01613b9e565b64383c14911f60d91b6024918401918201526c1e3932b1ba103bb4b23a341e9160991b602982015285516131a4816036840160208a01613b9e565b7f707822206865696768743d2232367078222072783d22387078222072793d2238910160368101919091527f7078222066696c6c3d227267626128302c302c302c302e362922202f3e00000060568201527f3c7465787420783d22313270782220793d22313770782220666f6e742d66616d60738201527f696c793d2227436f7572696572204e6577272c206d6f6e6f737061636522206660938201527f6f6e742d73697a653d2231327078222066696c6c3d227768697465223e00000060b38201527f3c747370616e2066696c6c3d2272676261283235352c3235352c3235352c302e60d0820152631b14911f60e11b60f0820152610abb611bd96132c9612e446132b360f486018a611a0a565b691d101e17ba39b830b71f60b11b8152600a0190565b661e17ba32bc3a1f60c91b815260070190565b7f3c7265637420783d2231362220793d223136222077696474683d22323538222081527f6865696768743d22353238222072783d223236222072793d223236222066696c60208201527f6c3d227267626128302c302c302c302922207374726f6b653d227267626128326040820152721a9a96191a9a96191a9a96181719149110179f60691b60608201527f3c67206d61736b3d2275726c28236e6f6e652922207374796c653d227472616e60738201527f73666f726d3a7472616e736c61746528383070782c313639707829223e3c726560938201527f637420783d222d313670782220793d222d31367078222077696474683d22313860b38201527f30707822206865696768743d223138307078222066696c6c3d226e6f6e65222060d38201527f2f3e3c7061746820643d224d312031204c312031343522207374726f6b653d2260f38201527f7267626128302c302c302c302e332922207374726f6b652d77696474683d22336101138201527f327078222066696c6c3d226e6f6e6522207374726f6b652d6c696e656361703d6101338201526d113937bab7321110179f1e17b39f60911b61015382015260006138c66138ad6138a761378d61378761375e61375861365c61363361362d61360b6135c36101618e017f3c67206d61736b3d2275726c28236e6f6e652922207374796c653d227472616e81527f73666f726d3a7472616e736c61746528383070782c313639707829223e3c726560208201527f637420783d222d313670782220793d222d31367078222077696474683d22313860408201527f30707822206865696768743d223138307078222066696c6c3d226e6f6e65222060608201527f2f3e3c7061746820643d224d312031204c312031343522207374726f6b653d2260808201527f72676261283235352c3235352c3235352c3129222066696c6c3d226e6f6e652260a08201527f207374726f6b652d6c696e656361703d22726f756e6422202f3e3c2f673e000060c082015260de0190565b7f3c636972636c652063783d2238317078222063793d2231373070782220723d228152751a383c11103334b6361e9111b232323232321110179f60511b602082015260360190565b751e31b4b931b6329031bc1e911c18b83c111031bc9e9160511b815260160190565b8f611a0a565b7f70782220723d22357078222066696c6c3d22776869746522202f3e00000000008152601b0190565b7f3c636972636c652063783d2238317078222063793d2233313470782220723d2281527f347078222066696c6c3d222364646464646422202f3e3c7465787420783d223160208201527f303070782220793d2231373470782220666f6e742d66616d696c793d2227436f60408201527f7572696572204e6577272c206d6f6e6f73706163652220666f6e742d73697a6560608201527f3d2231327078222066696c6c3d227768697465223e3c747370616e2066696c6c60808201527f3d2272676261283235352c3235352c3235352c302e3629223e4578656375746560a08201526b32151d101e17ba39b830b71f60a11b60c082015260cc0190565b8b611a0a565b7f2073776170733c2f746578743e3c7465787420783d22343070782220793d22008152601f0190565b88611a0a565b7f70782220666f6e742d66616d696c793d2227436f7572696572204e6577272c2081527f6d6f6e6f73706163652220666f6e742d73697a653d2231327078222066696c6c60208201527f3d227768697465223e4e6f773c2f746578743e3c7465787420783d223130307060408201527f782220793d2233313870782220666f6e742d66616d696c793d2227436f75726960608201527f6572204e6577272c206d6f6e6f73706163652220666f6e742d73697a653d223160808201527f327078222066696c6c3d227768697465223e3c747370616e2066696c6c3d227260a08201527f676261283235352c3235352c3235352c302e3629223e4c6566743a203c2f747360c0820152633830b71f60e11b60e082015260e40190565b85611a0a565b6c1039bbb0b8399e17ba32bc3a1f60991b8152600d0190565b9695505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161390881601d850160208701613b9e565b91909101601d0192915050565b6020815260008251806020840152613934816040850160208701613b9e565b601f01601f19169190910160400192915050565b6000821982111561395b5761395b613c3a565b500190565b600063ffffffff808316818516808303821115611a4c57611a4c613c3a565b600060ff821660ff84168060ff0382111561399c5761399c613c3a565b019392505050565b6000826139b3576139b3613c50565b500490565b600063ffffffff808416806139cf576139cf613c50565b92169190910492915050565b600060ff8316806139ee576139ee613c50565b8060ff84160491505092915050565b600181815b80851115613a38578160001904821115613a1e57613a1e613c3a565b80851615613a2b57918102915b93841c9390800290613a02565b509250929050565b600061185e8383613a57565b600061185e60ff8416835b600082613a6657506001610561565b81613a7357506000610561565b8160018114613a895760028114613a9357613aaf565b6001915050610561565b60ff841115613aa457613aa4613c3a565b50506001821b610561565b5060208310610133831016604e8410600b8410161715613ad2575081810a610561565b613adc83836139fd565b8060001904821115613af057613af0613c3a565b029392505050565b6000816000190483118215151615613b1257613b12613c3a565b500290565b600063ffffffff80831681851681830481118215151615613b3a57613b3a613c3a565b02949350505050565b600060ff821660ff84168160ff0481118215151615613af057613af0613c3a565b600082821015613b7657613b76613c3a565b500390565b600060ff821660ff841680821015613b9557613b95613c3a565b90039392505050565b60005b83811015613bb9578181015183820152602001613ba1565b83811115613bc8576000848401525b50505050565b600060ff821680613be157613be1613c3a565b6000190192915050565b6000600019821415613bff57613bff613c3a565b5060010190565b600060ff821660ff811415613c1d57613c1d613c3a565b60010192915050565b600082613c3557613c35613c50565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613c9157600080fd5b5056fe3d22313030252220626567696e3d22307322206475723d2233307322207265703c616e696d6174652061646469746976653d2273756d222061747472696275744142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f654e616d653d2273746172744f6666736574222066726f6d3d2230252220746f656174436f756e743d22696e646566696e69746522202f3e3c2f746578745061a2646970667358221220b24c6d1fc3f586c20a5df528136ee4fc9d0a6d3e36a010eb0ec69249a9de88a764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "Describes NFT token positions",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Produces a string containing the data URI for a JSON metadata string",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}