{
  "address": "0x5f6AD3A83088188e81ff80295F7686e868400C29",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IDCAGlobalParameters",
          "name": "_globalParameters",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "IdenticalTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PairAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_pairs",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalParameters",
      "outputs": [
        {
          "internalType": "contract IDCAGlobalParameters",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isPair",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "pairByTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa153d5e3e81f72f4df727682784e73da6f689f15a0ab10ce8db79fc643c70b19",
  "receipt": {
    "to": null,
    "from": "0xd63455f6723772654Dddb596bA518D9179d5d932",
    "contractAddress": "0x5f6AD3A83088188e81ff80295F7686e868400C29",
    "transactionIndex": 15,
    "gasUsed": "5378356",
    "logsBloom": "0x
    "blockHash": "0x20f648087904bb4060638a84bbf20decbb457e539f5f2ecd0b5aaf97b1faa823",
    "transactionHash": "0xa153d5e3e81f72f4df727682784e73da6f689f15a0ab10ce8db79fc643c70b19",
    "logs": [],
    "blockNumber": 8979131,
    "cumulativeGasUsed": "13545984",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x893ec5FD762D570C0A0fEA8b93Ed33Cdb0963f95"
  ],
  "solcInputHash": "d392bc89274cb27025074d3e3e3f4973",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IDCAGlobalParameters\",\"name\":\"_globalParameters\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IdenticalTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PairAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_pairs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalParameters\",\"outputs\":[{\"internalType\":\"contract IDCAGlobalParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isPair\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"pairByTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DCAFactory/DCAFactory.sol\":\"DCAFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x2d9f9af8b84d252e0e7ee716e4cb3ad1b58f3ec6619e4f54f40d4b5e28f75eb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x4878ef6c288f4cef3c2a288d32cc548c648831cc55503ad3d9a581ed3b93aad9\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"contracts/DCAFactory/DCAFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.4;\\n\\nimport './DCAFactoryPairsHandler.sol';\\n\\ncontract DCAFactory is DCAFactoryPairsHandler, IDCAFactory {\\n  constructor(IDCAGlobalParameters _globalParameters) DCAFactoryPairsHandler(_globalParameters) {}\\n}\\n\",\"keccak256\":\"0x5d6e783035f39d85bc4b57de1ce54b85a6d4511f323ac35531bf1e4a319b6dec\",\"license\":\"BUSL-1.1\"},\"contracts/DCAFactory/DCAFactoryPairsHandler.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '../DCAPair/DCAPair.sol';\\nimport '../interfaces/IERC20Detailed.sol';\\nimport '../interfaces/IDCAFactory.sol';\\nimport '../interfaces/IDCAGlobalParameters.sol';\\nimport '../libraries/CommonErrors.sol';\\n\\nabstract contract DCAFactoryPairsHandler is IDCAFactoryPairsHandler {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  mapping(address => mapping(address => address)) internal _pairByTokens; // tokenA => tokenB => pair\\n  EnumerableSet.AddressSet internal _allPairs;\\n  IDCAGlobalParameters public override globalParameters;\\n\\n  constructor(IDCAGlobalParameters _globalParameters) {\\n    if (address(_globalParameters) == address(0)) revert CommonErrors.ZeroAddress();\\n    globalParameters = _globalParameters;\\n  }\\n\\n  function _sortTokens(address _tokenA, address _tokenB) internal pure returns (address __tokenA, address __tokenB) {\\n    (__tokenA, __tokenB) = _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA);\\n  }\\n\\n  function allPairs() external view override returns (address[] memory _pairs) {\\n    uint256 _length = _allPairs.length();\\n    _pairs = new address[](_length);\\n    for (uint256 i; i < _length; i++) {\\n      _pairs[i] = _allPairs.at(i);\\n    }\\n  }\\n\\n  function isPair(address _address) external view override returns (bool _isPair) {\\n    _isPair = _allPairs.contains(_address);\\n  }\\n\\n  function pairByTokens(address _tokenA, address _tokenB) external view override returns (address _pair) {\\n    (address __tokenA, address __tokenB) = _sortTokens(_tokenA, _tokenB);\\n    _pair = _pairByTokens[__tokenA][__tokenB];\\n  }\\n\\n  function createPair(address _tokenA, address _tokenB) external override returns (address _pair) {\\n    if (_tokenA == address(0) || _tokenB == address(0)) revert CommonErrors.ZeroAddress();\\n    if (_tokenA == _tokenB) revert IdenticalTokens();\\n    (address __tokenA, address __tokenB) = _sortTokens(_tokenA, _tokenB);\\n    if (_pairByTokens[__tokenA][__tokenB] != address(0)) revert PairAlreadyExists();\\n    globalParameters.oracle().addSupportForPair(__tokenA, __tokenB); // Note: this call will revert if the oracle doesn't support this particular pair\\n    _pair = address(new DCAPair(globalParameters, IERC20Detailed(__tokenA), IERC20Detailed(__tokenB)));\\n    _pairByTokens[__tokenA][__tokenB] = _pair;\\n    _allPairs.add(_pair);\\n    emit PairCreated(__tokenA, __tokenB, _pair);\\n  }\\n}\\n\",\"keccak256\":\"0x1638f4c9b3c1007fa1550b65022e6e77c328fcef5a45ebf63575b76190098ff7\",\"license\":\"BUSL-1.1\"},\"contracts/DCAPair/DCAPair.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.4;\\npragma abicoder v2;\\n\\nimport './DCAPairParameters.sol';\\nimport './DCAPairPositionHandler.sol';\\nimport './DCAPairSwapHandler.sol';\\nimport './DCAPairLoanHandler.sol';\\n\\ncontract DCAPair is DCAPairParameters, DCAPairSwapHandler, DCAPairPositionHandler, DCAPairLoanHandler, IDCAPair {\\n  constructor(\\n    IDCAGlobalParameters _globalParameters,\\n    IERC20Detailed _tokenA,\\n    IERC20Detailed _tokenB\\n  ) DCAPairParameters(_globalParameters, _tokenA, _tokenB) DCAPairPositionHandler(_tokenA, _tokenB) {}\\n}\\n\",\"keccak256\":\"0x89f9f85a563835eb7ec952e5b724ff8ffda94555829f2748dd6e08e509958ff1\",\"license\":\"BUSL-1.1\"},\"contracts/DCAPair/DCAPairLoanHandler.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\nimport '../interfaces/IDCAPairLoanCallee.sol';\\nimport '../libraries/CommonErrors.sol';\\n\\nimport './DCAPairParameters.sol';\\n\\nabstract contract DCAPairLoanHandler is ReentrancyGuard, DCAPairParameters, IDCAPairLoanHandler {\\n  using SafeERC20 for IERC20Detailed;\\n\\n  function availableToBorrow() external view override returns (uint256 _amountToBorrowTokenA, uint256 _amountToBorrowTokenB) {\\n    _amountToBorrowTokenA = _balances[address(tokenA)];\\n    _amountToBorrowTokenB = _balances[address(tokenB)];\\n  }\\n\\n  function loan(\\n    uint256 _amountToBorrowTokenA,\\n    uint256 _amountToBorrowTokenB,\\n    address _to,\\n    bytes calldata _data\\n  ) external override nonReentrant {\\n    if (_amountToBorrowTokenA == 0 && _amountToBorrowTokenB == 0) revert ZeroLoan();\\n\\n    IDCAGlobalParameters.LoanParameters memory _loanParameters = globalParameters.loanParameters();\\n\\n    if (_loanParameters.isPaused) revert CommonErrors.Paused();\\n\\n    uint256 _beforeBalanceTokenA = _balances[address(tokenA)];\\n    uint256 _beforeBalanceTokenB = _balances[address(tokenB)];\\n\\n    if (_amountToBorrowTokenA > _beforeBalanceTokenA || _amountToBorrowTokenB > _beforeBalanceTokenB)\\n      revert CommonErrors.InsufficientLiquidity();\\n\\n    // Calculate fees\\n    uint256 _feeTokenA = _amountToBorrowTokenA > 0 ? _getFeeFromAmount(_loanParameters.loanFee, _amountToBorrowTokenA) : 0;\\n    uint256 _feeTokenB = _amountToBorrowTokenB > 0 ? _getFeeFromAmount(_loanParameters.loanFee, _amountToBorrowTokenB) : 0;\\n\\n    if (_amountToBorrowTokenA > 0) tokenA.safeTransfer(_to, _amountToBorrowTokenA);\\n    if (_amountToBorrowTokenB > 0) tokenB.safeTransfer(_to, _amountToBorrowTokenB);\\n\\n    // Make call\\n    IDCAPairLoanCallee(_to).DCAPairLoanCall(\\n      msg.sender,\\n      tokenA,\\n      tokenB,\\n      _amountToBorrowTokenA,\\n      _amountToBorrowTokenB,\\n      _feeTokenA,\\n      _feeTokenB,\\n      _data\\n    );\\n\\n    uint256 _afterBalanceTokenA = tokenA.balanceOf(address(this));\\n    uint256 _afterBalanceTokenB = tokenB.balanceOf(address(this));\\n\\n    // Make sure that they sent the tokens back\\n    if (_afterBalanceTokenA < (_beforeBalanceTokenA + _feeTokenA) || _afterBalanceTokenB < (_beforeBalanceTokenB + _feeTokenB))\\n      revert CommonErrors.LiquidityNotReturned();\\n\\n    // Send fees and extra\\n    tokenA.safeTransfer(_loanParameters.feeRecipient, _afterBalanceTokenA - _beforeBalanceTokenA);\\n    tokenB.safeTransfer(_loanParameters.feeRecipient, _afterBalanceTokenB - _beforeBalanceTokenB);\\n\\n    // Emit event\\n    emit Loaned(msg.sender, _to, _amountToBorrowTokenA, _amountToBorrowTokenB, _loanParameters.loanFee);\\n  }\\n}\\n\",\"keccak256\":\"0x80c9c2a76d2d06dad4be3c59494f887353f3d1677c8ad25263acfcccf1eb8ab1\",\"license\":\"BUSL-1.1\"},\"contracts/DCAPair/DCAPairParameters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\nimport '../interfaces/IDCAGlobalParameters.sol';\\nimport '../interfaces/IERC20Detailed.sol';\\nimport '../interfaces/IDCAPair.sol';\\nimport '../libraries/CommonErrors.sol';\\n\\nimport './utils/Math.sol';\\n\\nabstract contract DCAPairParameters is IDCAPairParameters {\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  // Internal constants\\n  uint112 internal immutable _magnitudeA;\\n  uint112 internal immutable _magnitudeB;\\n  uint24 internal immutable _feePrecision;\\n\\n  // Basic setup\\n  IDCAGlobalParameters public override globalParameters;\\n  IERC20Detailed public override tokenA;\\n  IERC20Detailed public override tokenB;\\n\\n  // Tracking\\n  mapping(uint32 => mapping(address => mapping(uint32 => int256))) public override swapAmountDelta; // swap interval => from token => swap number => delta\\n  mapping(uint32 => uint32) public override performedSwaps; // swap interval => performed swaps\\n  mapping(uint32 => mapping(address => mapping(uint32 => uint256))) internal _accumRatesPerUnit; // swap interval => from token => swap number => accum\\n  mapping(address => uint256) internal _balances;\\n  EnumerableSet.UintSet internal _activeSwapIntervals;\\n\\n  constructor(\\n    IDCAGlobalParameters _globalParameters,\\n    IERC20Detailed _tokenA,\\n    IERC20Detailed _tokenB\\n  ) {\\n    if (address(_globalParameters) == address(0) || address(_tokenA) == address(0) || address(_tokenB) == address(0))\\n      revert CommonErrors.ZeroAddress();\\n    globalParameters = _globalParameters;\\n    _feePrecision = globalParameters.FEE_PRECISION();\\n    tokenA = _tokenA;\\n    tokenB = _tokenB;\\n    _magnitudeA = uint112(10**_tokenA.decimals());\\n    _magnitudeB = uint112(10**_tokenB.decimals());\\n  }\\n\\n  function isSwapIntervalActive(uint32 _activeSwapInterval) external view override returns (bool _isIntervalActive) {\\n    _isIntervalActive = _activeSwapIntervals.contains(_activeSwapInterval);\\n  }\\n\\n  function _getFeeFromAmount(uint32 _feeAmount, uint256 _amount) internal view returns (uint256) {\\n    return (_amount * _feeAmount) / _feePrecision / 100;\\n  }\\n}\\n\",\"keccak256\":\"0x8ce1891f6c5edd9c59dd7620d5c706c325cb63ba9db1ad263ed4532e5e09ca84\",\"license\":\"BUSL-1.1\"},\"contracts/DCAPair/DCAPairPositionHandler.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\nimport './DCAPairParameters.sol';\\n\\nabstract contract DCAPairPositionHandler is ReentrancyGuard, DCAPairParameters, IDCAPairPositionHandler, ERC721 {\\n  struct DCA {\\n    uint32 lastWithdrawSwap;\\n    uint32 lastSwap;\\n    uint32 swapInterval;\\n    uint160 rate;\\n    bool fromTokenA;\\n    uint248 swappedBeforeModified;\\n  }\\n\\n  using SafeERC20 for IERC20Detailed;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  mapping(uint256 => DCA) internal _userPositions;\\n  uint256 internal _idCounter;\\n\\n  constructor(IERC20Detailed _tokenA, IERC20Detailed _tokenB)\\n    ERC721(string(abi.encodePacked('DCA: ', _tokenA.symbol(), ' - ', _tokenB.symbol())), 'DCA')\\n  {}\\n\\n  function userPosition(uint256 _dcaId) external view override returns (UserPosition memory _userPosition) {\\n    DCA memory _position = _userPositions[_dcaId];\\n    _userPosition.from = _position.fromTokenA ? tokenA : tokenB;\\n    _userPosition.to = _position.fromTokenA ? tokenB : tokenA;\\n    _userPosition.swapInterval = _position.swapInterval;\\n    _userPosition.swapsExecuted = _position.swapInterval > 0 ? performedSwaps[_position.swapInterval] - _position.lastWithdrawSwap : 0;\\n    _userPosition.swapped = _calculateSwapped(_dcaId);\\n    _userPosition.swapsLeft = _position.lastSwap > performedSwaps[_position.swapInterval]\\n      ? _position.lastSwap - performedSwaps[_position.swapInterval]\\n      : 0;\\n    _userPosition.remaining = _calculateUnswapped(_dcaId);\\n    _userPosition.rate = _position.rate;\\n  }\\n\\n  function deposit(\\n    address _tokenAddress,\\n    uint160 _rate,\\n    uint32 _amountOfSwaps,\\n    uint32 _swapInterval\\n  ) external override nonReentrant returns (uint256) {\\n    if (_tokenAddress != address(tokenA) && _tokenAddress != address(tokenB)) revert InvalidToken();\\n    if (_amountOfSwaps == 0) revert ZeroSwaps();\\n    if (!_activeSwapIntervals.contains(_swapInterval) && !globalParameters.isSwapIntervalAllowed(_swapInterval)) revert InvalidInterval();\\n    IERC20Detailed _from = _tokenAddress == address(tokenA) ? tokenA : tokenB;\\n    uint256 _amount = _rate * _amountOfSwaps;\\n    _from.safeTransferFrom(msg.sender, address(this), _amount);\\n    _balances[_tokenAddress] += _amount;\\n    _idCounter += 1;\\n    _safeMint(msg.sender, _idCounter);\\n    _activeSwapIntervals.add(_swapInterval);\\n    (uint32 _startingSwap, uint32 _lastSwap) = _addPosition(_idCounter, _tokenAddress, _rate, _amountOfSwaps, 0, _swapInterval);\\n    emit Deposited(msg.sender, _idCounter, _tokenAddress, _rate, _startingSwap, _swapInterval, _lastSwap);\\n    return _idCounter;\\n  }\\n\\n  function withdrawSwapped(uint256 _dcaId) external override nonReentrant returns (uint256 _swapped) {\\n    _assertPositionExistsAndCanBeOperatedByCaller(_dcaId);\\n\\n    _swapped = _calculateSwapped(_dcaId);\\n\\n    _userPositions[_dcaId].lastWithdrawSwap = performedSwaps[_userPositions[_dcaId].swapInterval];\\n    _userPositions[_dcaId].swappedBeforeModified = 0;\\n\\n    IERC20Detailed _to = _getTo(_dcaId);\\n    _balances[address(_to)] -= _swapped;\\n    _to.safeTransfer(msg.sender, _swapped);\\n\\n    emit Withdrew(msg.sender, _dcaId, address(_to), _swapped);\\n  }\\n\\n  function withdrawSwappedMany(uint256[] calldata _dcaIds)\\n    external\\n    override\\n    nonReentrant\\n    returns (uint256 _swappedTokenA, uint256 _swappedTokenB)\\n  {\\n    for (uint256 i; i < _dcaIds.length; i++) {\\n      uint256 _dcaId = _dcaIds[i];\\n      _assertPositionExistsAndCanBeOperatedByCaller(_dcaId);\\n      uint256 _swappedDCA = _calculateSwapped(_dcaId);\\n      if (_userPositions[_dcaId].fromTokenA) {\\n        _swappedTokenB += _swappedDCA;\\n      } else {\\n        _swappedTokenA += _swappedDCA;\\n      }\\n      _userPositions[_dcaId].lastWithdrawSwap = performedSwaps[_userPositions[_dcaId].swapInterval];\\n      _userPositions[_dcaId].swappedBeforeModified = 0;\\n    }\\n\\n    if (_swappedTokenA > 0) {\\n      _balances[address(tokenA)] -= _swappedTokenA;\\n      tokenA.safeTransfer(msg.sender, _swappedTokenA);\\n    }\\n\\n    if (_swappedTokenB > 0) {\\n      _balances[address(tokenB)] -= _swappedTokenB;\\n      tokenB.safeTransfer(msg.sender, _swappedTokenB);\\n    }\\n    emit WithdrewMany(msg.sender, _dcaIds, _swappedTokenA, _swappedTokenB);\\n  }\\n\\n  function terminate(uint256 _dcaId) external override nonReentrant {\\n    _assertPositionExistsAndCanBeOperatedByCaller(_dcaId);\\n\\n    uint256 _swapped = _calculateSwapped(_dcaId);\\n    uint256 _unswapped = _calculateUnswapped(_dcaId);\\n\\n    IERC20Detailed _from = _getFrom(_dcaId);\\n    IERC20Detailed _to = _getTo(_dcaId);\\n    _removePosition(_dcaId);\\n    _burn(_dcaId);\\n\\n    if (_swapped > 0) {\\n      _balances[address(_to)] -= _swapped;\\n      _to.safeTransfer(msg.sender, _swapped);\\n    }\\n\\n    if (_unswapped > 0) {\\n      _balances[address(_from)] -= _unswapped;\\n      _from.safeTransfer(msg.sender, _unswapped);\\n    }\\n\\n    emit Terminated(msg.sender, _dcaId, _unswapped, _swapped);\\n  }\\n\\n  function modifyRate(uint256 _dcaId, uint160 _newRate) external override nonReentrant {\\n    _assertPositionExistsAndCanBeOperatedByCaller(_dcaId);\\n    uint32 _swapsLeft = _userPositions[_dcaId].lastSwap - performedSwaps[_userPositions[_dcaId].swapInterval];\\n    if (_swapsLeft == 0) revert PositionCompleted();\\n\\n    _modifyRateAndSwaps(_dcaId, _newRate, _swapsLeft);\\n  }\\n\\n  function modifySwaps(uint256 _dcaId, uint32 _newSwaps) external override nonReentrant {\\n    _modifyRateAndSwaps(_dcaId, _userPositions[_dcaId].rate, _newSwaps);\\n  }\\n\\n  function modifyRateAndSwaps(\\n    uint256 _dcaId,\\n    uint160 _newRate,\\n    uint32 _newAmountOfSwaps\\n  ) external override nonReentrant {\\n    _modifyRateAndSwaps(_dcaId, _newRate, _newAmountOfSwaps);\\n  }\\n\\n  function addFundsToPosition(\\n    uint256 _dcaId,\\n    uint256 _amount,\\n    uint32 _newSwaps\\n  ) external override nonReentrant {\\n    if (_amount == 0) revert ZeroAmount();\\n    if (_newSwaps == 0) revert ZeroSwaps();\\n\\n    uint256 _unswapped = _calculateUnswapped(_dcaId);\\n    uint256 _total = _unswapped + _amount;\\n\\n    _modifyPosition(_dcaId, _total, _unswapped, uint160(_total / _newSwaps), _newSwaps);\\n  }\\n\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    return globalParameters.nftDescriptor().tokenURI(this, tokenId);\\n  }\\n\\n  /** Helper function to modify a position */\\n  function _modifyRateAndSwaps(\\n    uint256 _dcaId,\\n    uint160 _newRate,\\n    uint32 _newAmountOfSwaps\\n  ) internal {\\n    _modifyPosition(_dcaId, _newRate * _newAmountOfSwaps, _calculateUnswapped(_dcaId), _newRate, _newAmountOfSwaps);\\n  }\\n\\n  function _modifyPosition(\\n    uint256 _dcaId,\\n    uint256 _totalNecessary,\\n    uint256 _unswapped,\\n    uint160 _newRate,\\n    uint32 _newAmountOfSwaps\\n  ) internal {\\n    _assertPositionExistsAndCanBeOperatedByCaller(_dcaId);\\n    IERC20Detailed _from = _getFrom(_dcaId);\\n\\n    uint256 _swapped = _calculateSwapped(_dcaId);\\n    if (_swapped > type(uint248).max) revert MandatoryWithdraw(); // You should withdraw before modifying, to avoid losing funds\\n\\n    uint32 _swapInterval = _userPositions[_dcaId].swapInterval;\\n    _removePosition(_dcaId);\\n    (uint32 _startingSwap, uint32 _lastSwap) = _addPosition(\\n      _dcaId,\\n      address(_from),\\n      _newRate,\\n      _newAmountOfSwaps,\\n      uint248(_swapped),\\n      _swapInterval\\n    );\\n\\n    if (_totalNecessary > _unswapped) {\\n      // We need to ask for more funds\\n      _from.safeTransferFrom(msg.sender, address(this), _totalNecessary - _unswapped);\\n      _balances[address(_from)] += _totalNecessary - _unswapped;\\n    } else if (_totalNecessary < _unswapped) {\\n      // We need to return to the owner the amount that won't be used anymore\\n      _balances[address(_from)] -= _unswapped - _totalNecessary;\\n      _from.safeTransfer(msg.sender, _unswapped - _totalNecessary);\\n    }\\n\\n    emit Modified(msg.sender, _dcaId, _newRate, _startingSwap, _lastSwap);\\n  }\\n\\n  function _assertPositionExistsAndCanBeOperatedByCaller(uint256 _dcaId) internal view {\\n    if (_userPositions[_dcaId].rate == 0) revert InvalidPosition();\\n    if (!_isApprovedOrOwner(msg.sender, _dcaId)) revert UnauthorizedCaller();\\n  }\\n\\n  function _addPosition(\\n    uint256 _dcaId,\\n    address _from,\\n    uint160 _rate,\\n    uint32 _amountOfSwaps,\\n    uint248 _swappedBeforeModified,\\n    uint32 _swapInterval\\n  ) internal returns (uint32 _startingSwap, uint32 _lastSwap) {\\n    if (_rate == 0) revert ZeroRate();\\n    uint32 _performedSwaps = performedSwaps[_swapInterval];\\n    _startingSwap = _performedSwaps + 1;\\n    _lastSwap = _performedSwaps + _amountOfSwaps;\\n    swapAmountDelta[_swapInterval][_from][_startingSwap] += int160(_rate);\\n    swapAmountDelta[_swapInterval][_from][_lastSwap + 1] -= int160(_rate);\\n    _userPositions[_dcaId] = DCA(_performedSwaps, _lastSwap, _swapInterval, _rate, _from == address(tokenA), _swappedBeforeModified);\\n  }\\n\\n  function _removePosition(uint256 _dcaId) internal {\\n    uint32 _swapInterval = _userPositions[_dcaId].swapInterval;\\n    uint32 _lastSwap = _userPositions[_dcaId].lastSwap;\\n    uint32 _performedSwaps = performedSwaps[_swapInterval];\\n\\n    if (_lastSwap > _performedSwaps) {\\n      int160 _rate = int160(_userPositions[_dcaId].rate);\\n      address _from = address(_getFrom(_dcaId));\\n      swapAmountDelta[_swapInterval][_from][_performedSwaps + 1] -= _rate;\\n      swapAmountDelta[_swapInterval][_from][_lastSwap + 1] += _rate;\\n    }\\n    delete _userPositions[_dcaId];\\n  }\\n\\n  /** Return the amount of tokens swapped in TO */\\n  function _calculateSwapped(uint256 _dcaId) internal view returns (uint256 _swapped) {\\n    DCA memory _userDCA = _userPositions[_dcaId];\\n    address _from = _userDCA.fromTokenA ? address(tokenA) : address(tokenB);\\n    uint256 _accumRatesLastSwap = _accumRatesPerUnit[_userDCA.swapInterval][_from][\\n      performedSwaps[_userDCA.swapInterval] < _userDCA.lastSwap ? performedSwaps[_userDCA.swapInterval] : _userDCA.lastSwap\\n    ];\\n\\n    uint256 _accumPerUnit = _accumRatesLastSwap - _accumRatesPerUnit[_userDCA.swapInterval][_from][_userDCA.lastWithdrawSwap];\\n    uint256 _magnitude = _userDCA.fromTokenA ? _magnitudeA : _magnitudeB;\\n    (bool _ok, uint256 _mult) = Math.tryMul(_accumPerUnit, _userDCA.rate);\\n    uint256 _swappedInCurrentPosition = _ok ? _mult / _magnitude : (_accumPerUnit / _magnitude) * _userDCA.rate;\\n    _swapped = _swappedInCurrentPosition + _userDCA.swappedBeforeModified;\\n  }\\n\\n  /** Returns how many FROM remains unswapped  */\\n  function _calculateUnswapped(uint256 _dcaId) internal view returns (uint256 _unswapped) {\\n    uint32 _performedSwaps = performedSwaps[_userPositions[_dcaId].swapInterval];\\n    uint32 _lastSwap = _userPositions[_dcaId].lastSwap;\\n\\n    if (_lastSwap <= _performedSwaps) return 0;\\n    _unswapped = (_lastSwap - _performedSwaps) * _userPositions[_dcaId].rate;\\n  }\\n\\n  function _getFrom(uint256 _dcaId) internal view returns (IERC20Detailed _from) {\\n    _from = _userPositions[_dcaId].fromTokenA ? tokenA : tokenB;\\n  }\\n\\n  function _getTo(uint256 _dcaId) internal view returns (IERC20Detailed _to) {\\n    _to = _userPositions[_dcaId].fromTokenA ? tokenB : tokenA;\\n  }\\n}\\n\",\"keccak256\":\"0xe20f09ff0d2bf5e9c77b78cfd1b1938c1e8372434f4349da99ec4c0fb49464b4\",\"license\":\"BUSL-1.1\"},\"contracts/DCAPair/DCAPairSwapHandler.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.4;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\nimport '../interfaces/IDCAPairSwapCallee.sol';\\nimport '../libraries/CommonErrors.sol';\\n\\nimport './DCAPairParameters.sol';\\n\\nabstract contract DCAPairSwapHandler is ReentrancyGuard, DCAPairParameters, IDCAPairSwapHandler {\\n  using SafeERC20 for IERC20Detailed;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  mapping(uint32 => mapping(address => uint256)) public override swapAmountAccumulator; // swap interval => from token => swap amount accum\\n\\n  mapping(uint32 => uint32) public override nextSwapAvailable; // swap interval => timestamp\\n\\n  function _addNewRatePerUnit(\\n    uint32 _swapInterval,\\n    address _address,\\n    uint32 _performedSwap,\\n    uint256 _ratePerUnit\\n  ) internal {\\n    uint256 _accumRatesPerUnitPreviousSwap = _accumRatesPerUnit[_swapInterval][_address][_performedSwap - 1];\\n    _accumRatesPerUnit[_swapInterval][_address][_performedSwap] = _accumRatesPerUnitPreviousSwap + _ratePerUnit;\\n  }\\n\\n  function _registerSwap(\\n    uint32 _swapInterval,\\n    address _token,\\n    uint256 _internalAmountUsedToSwap,\\n    uint256 _ratePerUnit,\\n    uint32 _swapToRegister\\n  ) internal {\\n    swapAmountAccumulator[_swapInterval][_token] = _internalAmountUsedToSwap;\\n    _addNewRatePerUnit(_swapInterval, _token, _swapToRegister, _ratePerUnit);\\n    delete swapAmountDelta[_swapInterval][_token][_swapToRegister];\\n  }\\n\\n  function _getAmountToSwap(\\n    uint32 _swapInterval,\\n    address _address,\\n    uint32 _swapToPerform\\n  ) internal view returns (uint256 _swapAmountAccumulator) {\\n    unchecked {\\n      _swapAmountAccumulator =\\n        swapAmountAccumulator[_swapInterval][_address] +\\n        uint256(swapAmountDelta[_swapInterval][_address][_swapToPerform]);\\n    }\\n  }\\n\\n  function _convertTo(\\n    uint256 _fromTokenMagnitude,\\n    uint256 _amountFrom,\\n    uint256 _rateFromTo\\n  ) internal pure returns (uint256 _amountTo) {\\n    _amountTo = (_amountFrom * _rateFromTo) / _fromTokenMagnitude;\\n  }\\n\\n  function _getNextSwapsToPerform() internal view virtual returns (SwapInformation[] memory _swapsToPerform, uint8 _amountOfSwapsToPerform) {\\n    uint256 _activeSwapIntervalsLength = _activeSwapIntervals.length();\\n    _swapsToPerform = new SwapInformation[](_activeSwapIntervalsLength);\\n    for (uint256 i; i < _activeSwapIntervalsLength; i++) {\\n      uint32 _swapInterval = uint32(_activeSwapIntervals.at(i));\\n      if (nextSwapAvailable[_swapInterval] <= _getTimestamp()) {\\n        uint32 _swapToPerform = performedSwaps[_swapInterval] + 1;\\n        _swapsToPerform[_amountOfSwapsToPerform++] = SwapInformation({\\n          interval: _swapInterval,\\n          swapToPerform: _swapToPerform,\\n          amountToSwapTokenA: _getAmountToSwap(_swapInterval, address(tokenA), _swapToPerform),\\n          amountToSwapTokenB: _getAmountToSwap(_swapInterval, address(tokenB), _swapToPerform)\\n        });\\n      }\\n    }\\n  }\\n\\n  function secondsUntilNextSwap() external view override returns (uint32 _secondsUntil) {\\n    _secondsUntil = type(uint32).max;\\n    uint32 _timestamp = _getTimestamp();\\n    for (uint256 i; i < _activeSwapIntervals.length(); i++) {\\n      uint32 _swapInterval = uint32(_activeSwapIntervals.at(i));\\n      if (nextSwapAvailable[_swapInterval] <= _timestamp) {\\n        _secondsUntil = 0;\\n        break;\\n      } else {\\n        uint32 _diff = nextSwapAvailable[_swapInterval] - _timestamp;\\n        if (_diff < _secondsUntil) {\\n          _secondsUntil = _diff;\\n        }\\n      }\\n    }\\n  }\\n\\n  function getNextSwapInfo() external view override returns (NextSwapInformation memory _nextSwapInformation) {\\n    IDCAGlobalParameters.SwapParameters memory _swapParameters = globalParameters.swapParameters();\\n    (_nextSwapInformation, , ) = _getNextSwapInfo(_swapParameters.swapFee, _swapParameters.oracle);\\n  }\\n\\n  function _getNextSwapInfo(uint32 _swapFee, ITimeWeightedOracle _oracle)\\n    internal\\n    view\\n    virtual\\n    returns (\\n      NextSwapInformation memory _nextSwapInformation,\\n      uint256 _ratePerUnitBToAWithFee,\\n      uint256 _ratePerUnitAToBWithFee\\n    )\\n  {\\n    uint256 _amountToSwapTokenA;\\n    uint256 _amountToSwapTokenB;\\n    {\\n      (SwapInformation[] memory _swapsToPerform, uint8 _amountOfSwaps) = _getNextSwapsToPerform();\\n      for (uint256 i; i < _amountOfSwaps; i++) {\\n        _amountToSwapTokenA += _swapsToPerform[i].amountToSwapTokenA;\\n        _amountToSwapTokenB += _swapsToPerform[i].amountToSwapTokenB;\\n      }\\n      _nextSwapInformation.swapsToPerform = _swapsToPerform;\\n      _nextSwapInformation.amountOfSwaps = _amountOfSwaps;\\n    }\\n    _nextSwapInformation.ratePerUnitBToA = _oracle.quote(address(tokenB), _magnitudeB, address(tokenA));\\n    _nextSwapInformation.ratePerUnitAToB = (uint256(_magnitudeB) * _magnitudeA) / _nextSwapInformation.ratePerUnitBToA;\\n\\n    _ratePerUnitBToAWithFee = _nextSwapInformation.ratePerUnitBToA - _getFeeFromAmount(_swapFee, _nextSwapInformation.ratePerUnitBToA);\\n    _ratePerUnitAToBWithFee = _nextSwapInformation.ratePerUnitAToB - _getFeeFromAmount(_swapFee, _nextSwapInformation.ratePerUnitAToB);\\n\\n    uint256 _finalNeededTokenA = _convertTo(_magnitudeB, _amountToSwapTokenB, _ratePerUnitBToAWithFee);\\n    uint256 _finalNeededTokenB = _convertTo(_magnitudeA, _amountToSwapTokenA, _ratePerUnitAToBWithFee);\\n\\n    uint256 _amountOfTokenAIfTokenBSwapped = _convertTo(_magnitudeB, _amountToSwapTokenB, _nextSwapInformation.ratePerUnitBToA);\\n    if (_amountOfTokenAIfTokenBSwapped < _amountToSwapTokenA) {\\n      _nextSwapInformation.tokenToBeProvidedBySwapper = tokenB;\\n      _nextSwapInformation.tokenToRewardSwapperWith = tokenA;\\n      _nextSwapInformation.platformFeeTokenA = _getFeeFromAmount(_swapFee, _amountOfTokenAIfTokenBSwapped);\\n      _nextSwapInformation.platformFeeTokenB = _getFeeFromAmount(_swapFee, _amountToSwapTokenB);\\n      _nextSwapInformation.amountToBeProvidedBySwapper = _finalNeededTokenB + _nextSwapInformation.platformFeeTokenB - _amountToSwapTokenB;\\n      _nextSwapInformation.amountToRewardSwapperWith = _amountToSwapTokenA - _finalNeededTokenA - _nextSwapInformation.platformFeeTokenA;\\n      _nextSwapInformation.availableToBorrowTokenA = _balances[address(tokenA)] - _nextSwapInformation.amountToRewardSwapperWith;\\n      _nextSwapInformation.availableToBorrowTokenB = _balances[address(tokenB)];\\n    } else if (_amountOfTokenAIfTokenBSwapped > _amountToSwapTokenA) {\\n      _nextSwapInformation.tokenToBeProvidedBySwapper = tokenA;\\n      _nextSwapInformation.tokenToRewardSwapperWith = tokenB;\\n      _nextSwapInformation.platformFeeTokenA = _getFeeFromAmount(_swapFee, _amountToSwapTokenA);\\n      _nextSwapInformation.platformFeeTokenB = _getFeeFromAmount(\\n        _swapFee,\\n        (_amountToSwapTokenA * _magnitudeB) / _nextSwapInformation.ratePerUnitBToA\\n      );\\n      _nextSwapInformation.amountToBeProvidedBySwapper = _finalNeededTokenA + _nextSwapInformation.platformFeeTokenA - _amountToSwapTokenA;\\n      _nextSwapInformation.amountToRewardSwapperWith = _amountToSwapTokenB - _finalNeededTokenB - _nextSwapInformation.platformFeeTokenB;\\n      _nextSwapInformation.availableToBorrowTokenA = _balances[address(tokenA)];\\n      _nextSwapInformation.availableToBorrowTokenB = _balances[address(tokenB)] - _nextSwapInformation.amountToRewardSwapperWith;\\n    } else {\\n      _nextSwapInformation.platformFeeTokenA = _getFeeFromAmount(_swapFee, _amountToSwapTokenA);\\n      _nextSwapInformation.platformFeeTokenB = _getFeeFromAmount(_swapFee, _amountToSwapTokenB);\\n      _nextSwapInformation.availableToBorrowTokenA = _balances[address(tokenA)];\\n      _nextSwapInformation.availableToBorrowTokenB = _balances[address(tokenB)];\\n    }\\n  }\\n\\n  function swap() external override {\\n    swap(0, 0, msg.sender, '');\\n  }\\n\\n  function swap(\\n    uint256 _amountToBorrowTokenA,\\n    uint256 _amountToBorrowTokenB,\\n    address _to,\\n    bytes memory _data\\n  ) public override nonReentrant {\\n    IDCAGlobalParameters.SwapParameters memory _swapParameters = globalParameters.swapParameters();\\n    if (_swapParameters.isPaused) revert CommonErrors.Paused();\\n\\n    NextSwapInformation memory _nextSwapInformation;\\n\\n    {\\n      uint256 _ratePerUnitBToAWithFee;\\n      uint256 _ratePerUnitAToBWithFee;\\n      (_nextSwapInformation, _ratePerUnitBToAWithFee, _ratePerUnitAToBWithFee) = _getNextSwapInfo(\\n        _swapParameters.swapFee,\\n        _swapParameters.oracle\\n      );\\n      if (_nextSwapInformation.amountOfSwaps == 0) revert NoSwapsToExecute();\\n\\n      uint32 _timestamp = _getTimestamp();\\n      for (uint256 i; i < _nextSwapInformation.amountOfSwaps; i++) {\\n        uint32 _swapInterval = _nextSwapInformation.swapsToPerform[i].interval;\\n        uint32 _swapToPerform = _nextSwapInformation.swapsToPerform[i].swapToPerform;\\n        if (_nextSwapInformation.swapsToPerform[i].amountToSwapTokenA > 0 || _nextSwapInformation.swapsToPerform[i].amountToSwapTokenB > 0) {\\n          _registerSwap(\\n            _swapInterval,\\n            address(tokenA),\\n            _nextSwapInformation.swapsToPerform[i].amountToSwapTokenA,\\n            _ratePerUnitAToBWithFee,\\n            _swapToPerform\\n          );\\n          _registerSwap(\\n            _swapInterval,\\n            address(tokenB),\\n            _nextSwapInformation.swapsToPerform[i].amountToSwapTokenB,\\n            _ratePerUnitBToAWithFee,\\n            _swapToPerform\\n          );\\n          performedSwaps[_swapInterval] = _swapToPerform;\\n          nextSwapAvailable[_swapInterval] = ((_timestamp / _swapInterval) + 1) * _swapInterval;\\n        } else {\\n          _activeSwapIntervals.remove(_swapInterval);\\n        }\\n      }\\n    }\\n\\n    if (\\n      _amountToBorrowTokenA > _nextSwapInformation.availableToBorrowTokenA ||\\n      _amountToBorrowTokenB > _nextSwapInformation.availableToBorrowTokenB\\n    ) revert CommonErrors.InsufficientLiquidity();\\n\\n    uint256 _finalAmountToHaveTokenA = _nextSwapInformation.availableToBorrowTokenA - _nextSwapInformation.platformFeeTokenA;\\n    uint256 _finalAmountToHaveTokenB = _nextSwapInformation.availableToBorrowTokenB - _nextSwapInformation.platformFeeTokenB;\\n\\n    {\\n      // scope for _amountToSendToken{A,B}, avoids stack too deep errors\\n      uint256 _amountToSendTokenA = _amountToBorrowTokenA;\\n      uint256 _amountToSendTokenB = _amountToBorrowTokenB;\\n\\n      if (_nextSwapInformation.tokenToRewardSwapperWith == tokenA) {\\n        _amountToSendTokenA += _nextSwapInformation.amountToRewardSwapperWith;\\n        _finalAmountToHaveTokenB += _nextSwapInformation.amountToBeProvidedBySwapper;\\n      } else {\\n        _amountToSendTokenB += _nextSwapInformation.amountToRewardSwapperWith;\\n        _finalAmountToHaveTokenA += _nextSwapInformation.amountToBeProvidedBySwapper;\\n      }\\n\\n      // Optimistically transfer tokens\\n      if (_amountToSendTokenA > 0) tokenA.safeTransfer(_to, _amountToSendTokenA);\\n      if (_amountToSendTokenB > 0) tokenB.safeTransfer(_to, _amountToSendTokenB);\\n    }\\n\\n    if (_data.length > 0) {\\n      // Make call\\n      IDCAPairSwapCallee(_to).DCAPairSwapCall(\\n        msg.sender,\\n        tokenA,\\n        tokenB,\\n        _amountToBorrowTokenA,\\n        _amountToBorrowTokenB,\\n        _nextSwapInformation.tokenToRewardSwapperWith == tokenA,\\n        _nextSwapInformation.amountToRewardSwapperWith,\\n        _nextSwapInformation.amountToBeProvidedBySwapper,\\n        _data\\n      );\\n    }\\n\\n    uint256 _balanceTokenA = tokenA.balanceOf(address(this));\\n    uint256 _balanceTokenB = tokenB.balanceOf(address(this));\\n\\n    // Make sure that they sent the tokens back\\n    if (\\n      _balanceTokenA < (_finalAmountToHaveTokenA + _nextSwapInformation.platformFeeTokenA) ||\\n      _balanceTokenB < (_finalAmountToHaveTokenB + _nextSwapInformation.platformFeeTokenB)\\n    ) revert CommonErrors.LiquidityNotReturned();\\n\\n    // Update balances\\n    _balances[address(tokenA)] = _finalAmountToHaveTokenA;\\n    _balances[address(tokenB)] = _finalAmountToHaveTokenB;\\n\\n    // Send fees and extra\\n    tokenA.safeTransfer(_swapParameters.feeRecipient, _balanceTokenA - _finalAmountToHaveTokenA);\\n    tokenB.safeTransfer(_swapParameters.feeRecipient, _balanceTokenB - _finalAmountToHaveTokenB);\\n\\n    // Emit event\\n    emit Swapped(msg.sender, _to, _amountToBorrowTokenA, _amountToBorrowTokenB, _swapParameters.swapFee, _nextSwapInformation);\\n  }\\n\\n  function _getTimestamp() internal view virtual returns (uint32 _blockTimestamp) {\\n    _blockTimestamp = uint32(block.timestamp);\\n  }\\n}\\n\",\"keccak256\":\"0x74169935febdb3ea7354abfbdcf7d4beec1219747eb2701efbf1059c2e2c973c\",\"license\":\"BUSL-1.1\"},\"contracts/DCAPair/utils/Math.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.4;\\n\\nlibrary Math {\\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n      // benefit is lost if 'b' is also tested.\\n      // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n      if (a == 0) return (true, 0);\\n      uint256 c = a * b;\\n      if (c / a != b) return (false, 0);\\n      return (true, c);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x46ac9128f30bf3ef0fe73e3905d2d8a45e23a5aead139a8c432934ab77d82a52\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDCAFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\nimport './IDCAGlobalParameters.sol';\\n\\ninterface IDCAFactoryPairsHandler {\\n  error IdenticalTokens();\\n  error PairAlreadyExists();\\n\\n  event PairCreated(address indexed _tokenA, address indexed _tokenB, address _pair);\\n\\n  function globalParameters() external view returns (IDCAGlobalParameters);\\n\\n  function pairByTokens(address _tokenA, address _tokenB) external view returns (address _pair);\\n\\n  function allPairs() external view returns (address[] memory _pairs);\\n\\n  function isPair(address _address) external view returns (bool _isPair);\\n\\n  function createPair(address _tokenA, address _tokenB) external returns (address pair);\\n}\\n\\ninterface IDCAFactory is IDCAFactoryPairsHandler {}\\n\",\"keccak256\":\"0xff9baefe89a31a0dc6c1ce4c9ca2ff40489db52866f7bbae8dfbbad947f76448\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IDCAGlobalParameters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\nimport './ITimeWeightedOracle.sol';\\nimport './IDCATokenDescriptor.sol';\\n\\ninterface IDCAGlobalParameters {\\n  struct SwapParameters {\\n    address feeRecipient;\\n    bool isPaused;\\n    uint32 swapFee;\\n    ITimeWeightedOracle oracle;\\n  }\\n\\n  struct LoanParameters {\\n    address feeRecipient;\\n    bool isPaused;\\n    uint32 loanFee;\\n  }\\n\\n  event FeeRecipientSet(address _feeRecipient);\\n  event NFTDescriptorSet(IDCATokenDescriptor _descriptor);\\n  event OracleSet(ITimeWeightedOracle _oracle);\\n  event SwapFeeSet(uint32 _feeSet);\\n  event LoanFeeSet(uint32 _feeSet);\\n  event SwapIntervalsAllowed(uint32[] _swapIntervals, string[] _descriptions);\\n  event SwapIntervalsForbidden(uint32[] _swapIntervals);\\n\\n  error HighFee();\\n  error InvalidParams();\\n  error ZeroInterval();\\n  error EmptyDescription();\\n\\n  /* Public getters */\\n  function feeRecipient() external view returns (address);\\n\\n  function swapFee() external view returns (uint32);\\n\\n  function loanFee() external view returns (uint32);\\n\\n  function nftDescriptor() external view returns (IDCATokenDescriptor);\\n\\n  function oracle() external view returns (ITimeWeightedOracle);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function FEE_PRECISION() external view returns (uint24);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MAX_FEE() external view returns (uint32);\\n\\n  function allowedSwapIntervals() external view returns (uint32[] memory __allowedSwapIntervals);\\n\\n  function intervalDescription(uint32 _swapInterval) external view returns (string memory);\\n\\n  function isSwapIntervalAllowed(uint32 _swapInterval) external view returns (bool);\\n\\n  function paused() external view returns (bool);\\n\\n  function swapParameters() external view returns (SwapParameters memory);\\n\\n  function loanParameters() external view returns (LoanParameters memory);\\n\\n  /* Public setters */\\n  function setFeeRecipient(address _feeRecipient) external;\\n\\n  function setSwapFee(uint32 _fee) external;\\n\\n  function setLoanFee(uint32 _fee) external;\\n\\n  function setNFTDescriptor(IDCATokenDescriptor _descriptor) external;\\n\\n  function setOracle(ITimeWeightedOracle _oracle) external;\\n\\n  function addSwapIntervalsToAllowedList(uint32[] calldata _swapIntervals, string[] calldata _descriptions) external;\\n\\n  function removeSwapIntervalsFromAllowedList(uint32[] calldata _swapIntervals) external;\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0xa42670c088a9691c65ac4e5112705fb9e7a40a4bb1dad49acdf549a6dc10a774\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IDCAPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\nimport './IDCAGlobalParameters.sol';\\nimport './IERC20Detailed.sol';\\n\\ninterface IDCAPairParameters {\\n  /* Public getters */\\n  function globalParameters() external view returns (IDCAGlobalParameters);\\n\\n  function tokenA() external view returns (IERC20Detailed);\\n\\n  function tokenB() external view returns (IERC20Detailed);\\n\\n  function swapAmountDelta(\\n    uint32,\\n    address,\\n    uint32\\n  ) external view returns (int256);\\n\\n  function isSwapIntervalActive(uint32) external view returns (bool);\\n\\n  function performedSwaps(uint32) external view returns (uint32);\\n}\\n\\ninterface IDCAPairPositionHandler is IDCAPairParameters {\\n  struct UserPosition {\\n    IERC20Detailed from;\\n    IERC20Detailed to;\\n    uint32 swapInterval;\\n    uint32 swapsExecuted; // Since deposit or last withdraw\\n    uint256 swapped; // Since deposit or last withdraw\\n    uint32 swapsLeft;\\n    uint256 remaining;\\n    uint160 rate;\\n  }\\n\\n  event Terminated(address indexed _user, uint256 _dcaId, uint256 _returnedUnswapped, uint256 _returnedSwapped);\\n  event Deposited(\\n    address indexed _user,\\n    uint256 _dcaId,\\n    address _fromToken,\\n    uint160 _rate,\\n    uint32 _startingSwap,\\n    uint32 _swapInterval,\\n    uint32 _lastSwap\\n  );\\n  event Withdrew(address indexed _user, uint256 _dcaId, address _token, uint256 _amount);\\n  event WithdrewMany(address indexed _user, uint256[] _dcaIds, uint256 _swappedTokenA, uint256 _swappedTokenB);\\n  event Modified(address indexed _user, uint256 _dcaId, uint160 _rate, uint32 _startingSwap, uint32 _lastSwap);\\n\\n  error InvalidToken();\\n  error InvalidInterval();\\n  error InvalidPosition();\\n  error UnauthorizedCaller();\\n  error ZeroRate();\\n  error ZeroSwaps();\\n  error ZeroAmount();\\n  error PositionCompleted();\\n  error MandatoryWithdraw();\\n\\n  function userPosition(uint256) external view returns (UserPosition memory _position);\\n\\n  function deposit(\\n    address _tokenAddress,\\n    uint160 _rate,\\n    uint32 _amountOfSwaps,\\n    uint32 _swapInterval\\n  ) external returns (uint256 _dcaId);\\n\\n  function withdrawSwapped(uint256 _dcaId) external returns (uint256 _swapped);\\n\\n  function withdrawSwappedMany(uint256[] calldata _dcaIds) external returns (uint256 _swappedTokenA, uint256 _swappedTokenB);\\n\\n  function modifyRate(uint256 _dcaId, uint160 _newRate) external;\\n\\n  function modifySwaps(uint256 _dcaId, uint32 _newSwaps) external;\\n\\n  function modifyRateAndSwaps(\\n    uint256 _dcaId,\\n    uint160 _newRate,\\n    uint32 _newSwaps\\n  ) external;\\n\\n  function addFundsToPosition(\\n    uint256 _dcaId,\\n    uint256 _amount,\\n    uint32 _newSwaps\\n  ) external;\\n\\n  function terminate(uint256 _dcaId) external;\\n}\\n\\ninterface IDCAPairSwapHandler {\\n  struct SwapInformation {\\n    uint32 interval;\\n    uint32 swapToPerform;\\n    uint256 amountToSwapTokenA;\\n    uint256 amountToSwapTokenB;\\n  }\\n\\n  struct NextSwapInformation {\\n    SwapInformation[] swapsToPerform;\\n    uint8 amountOfSwaps;\\n    uint256 availableToBorrowTokenA;\\n    uint256 availableToBorrowTokenB;\\n    uint256 ratePerUnitBToA;\\n    uint256 ratePerUnitAToB;\\n    uint256 platformFeeTokenA;\\n    uint256 platformFeeTokenB;\\n    uint256 amountToBeProvidedBySwapper;\\n    uint256 amountToRewardSwapperWith;\\n    IERC20Detailed tokenToBeProvidedBySwapper;\\n    IERC20Detailed tokenToRewardSwapperWith;\\n  }\\n\\n  event Swapped(\\n    address indexed _sender,\\n    address indexed _to,\\n    uint256 _amountBorrowedTokenA,\\n    uint256 _amountBorrowedTokenB,\\n    uint32 _fee,\\n    NextSwapInformation _nextSwapInformation\\n  );\\n\\n  error NoSwapsToExecute();\\n\\n  function nextSwapAvailable(uint32) external view returns (uint32);\\n\\n  function swapAmountAccumulator(uint32, address) external view returns (uint256);\\n\\n  function getNextSwapInfo() external view returns (NextSwapInformation memory _nextSwapInformation);\\n\\n  function swap() external;\\n\\n  function swap(\\n    uint256 _amountToBorrowTokenA,\\n    uint256 _amountToBorrowTokenB,\\n    address _to,\\n    bytes calldata _data\\n  ) external;\\n\\n  function secondsUntilNextSwap() external view returns (uint32);\\n}\\n\\ninterface IDCAPairLoanHandler {\\n  event Loaned(address indexed _sender, address indexed _to, uint256 _amountBorrowedTokenA, uint256 _amountBorrowedTokenB, uint32 _loanFee);\\n\\n  error ZeroLoan();\\n\\n  function availableToBorrow() external view returns (uint256 _amountToBorrowTokenA, uint256 _amountToBorrowTokenB);\\n\\n  function loan(\\n    uint256 _amountToBorrowTokenA,\\n    uint256 _amountToBorrowTokenB,\\n    address _to,\\n    bytes calldata _data\\n  ) external;\\n}\\n\\ninterface IDCAPair is IDCAPairParameters, IDCAPairSwapHandler, IDCAPairPositionHandler, IDCAPairLoanHandler {}\\n\",\"keccak256\":\"0x4c5bf2a9933f41348df17008dc0a2c84b12bd46c158358f23d8b40665ccd96ca\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IDCAPairLoanCallee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\nimport './IERC20Detailed.sol';\\n\\ninterface IDCAPairLoanCallee {\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DCAPairLoanCall(\\n    address _sender,\\n    IERC20Detailed _tokenA,\\n    IERC20Detailed _tokenB,\\n    uint256 _amountBorrowedTokenA,\\n    uint256 _amountBorrowedTokenB,\\n    uint256 _feeTokenA,\\n    uint256 _feeTokenB,\\n    bytes calldata _data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x81e173d2c4027919bcb6cf2cb25094d7d23b92e35e186f9ce2cc501f80136589\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IDCAPairSwapCallee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\nimport './IERC20Detailed.sol';\\n\\ninterface IDCAPairSwapCallee {\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DCAPairSwapCall(\\n    address _sender,\\n    IERC20Detailed _tokenA,\\n    IERC20Detailed _tokenB,\\n    uint256 _amountBorrowedTokenA,\\n    uint256 _amountBorrowedTokenB,\\n    bool _isRewardTokenA,\\n    uint256 _rewardAmount,\\n    uint256 _amountToProvide,\\n    bytes calldata _data\\n  ) external;\\n}\\n\",\"keccak256\":\"0xd689f8ea598cd6b9530c69f499db1f8b1233801866dad025267d61b1ae19592f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IDCATokenDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\nimport './IDCAPair.sol';\\n\\ninterface IDCATokenDescriptor {\\n  function tokenURI(IDCAPairPositionHandler _positionHandler, uint256 _tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x02d47009390b1163d86af7b9dd69b31a5ff86d11f3ec3e3cccf6a5ed48013328\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IERC20Detailed is IERC20 {\\n  function decimals() external view returns (uint8);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x86fb39cf10020e4372633e2e28b3fc5b78ea9d455e4decc56248b2fc65847517\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ITimeWeightedOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol';\\n\\ninterface ITimeWeightedOracle {\\n  event AddedSupportForPair(address _tokenA, address _tokenB);\\n\\n  /** Returns whether this oracle can support this pair of tokens */\\n  function canSupportPair(address _tokenA, address _tokenB) external view returns (bool);\\n\\n  /** Returns a quote, based on the given tokens and amount */\\n  function quote(\\n    address _tokenIn,\\n    uint128 _amountIn,\\n    address _tokenOut\\n  ) external view returns (uint256 _amountOut);\\n\\n  /**\\n   * Let the oracle take some actions to configure this pair of tokens for future uses.\\n   * Will revert if pair cannot be supported.\\n   */\\n  function addSupportForPair(address _tokenA, address _tokenB) external;\\n}\\n\\ninterface IUniswapV3OracleAggregator is ITimeWeightedOracle {\\n  event AddedFeeTier(uint24 _feeTier);\\n  event PeriodChanged(uint32 _period);\\n\\n  /* Public getters */\\n  function factory() external view returns (IUniswapV3Factory);\\n\\n  function supportedFeeTiers() external view returns (uint24[] memory);\\n\\n  function poolsUsedForPair(address _tokenA, address _tokenB) external view returns (address[] memory);\\n\\n  function period() external view returns (uint16);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MINIMUM_PERIOD() external view returns (uint16);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MAXIMUM_PERIOD() external view returns (uint16);\\n\\n  /* Public setters */\\n  function addFeeTier(uint24) external;\\n\\n  function setPeriod(uint16) external;\\n}\\n\",\"keccak256\":\"0xa4d11329f1af41227caf2693d7826428bc917802239c18f29a7d49fd476d25bc\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\nlibrary CommonErrors {\\n  error ZeroAddress();\\n  error Paused();\\n  error InsufficientLiquidity();\\n  error LiquidityNotReturned();\\n}\\n\",\"keccak256\":\"0xdb5b09a418d0e3590014e48c1e4f46b6b6be6b7ac3de4e58351adc4a34197d74\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516160b63803806160b683398101604081905261002f9161007d565b806001600160a01b0381166100575760405163d92e233d60e01b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055506100ab565b60006020828403121561008e578081fd5b81516001600160a01b03811681146100a4578182fd5b9392505050565b615ffc806100ba6000396000f3fe60806040523480156200001157600080fd5b50600436106200005e5760003560e01c80630ad82b2f14620000635780631d5aa6d81462000094578063c97682f814620000ab578063c9c6539614620000c4578063e5e31b1314620000db575b600080fd5b60035462000077906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b62000077620000a536600462000683565b62000103565b620000b562000142565b6040516200008b9190620006df565b62000077620000d536600462000683565b62000215565b620000f2620000ec36600462000664565b620004c8565b60405190151581526020016200008b565b6000806000620001148585620004dd565b6001600160a01b03918216600090815260208181526040808320938516835292905220541695945050505050565b6060600062000152600162000510565b90508067ffffffffffffffff8111156200017c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015620001a6578160200160208202803683370190505b50915060005b818110156200021057620001c26001826200051b565b838281518110620001e357634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101528062000207816200072e565b915050620001ac565b505090565b60006001600160a01b03831615806200023557506001600160a01b038216155b15620002545760405163d92e233d60e01b815260040160405180910390fd5b816001600160a01b0316836001600160a01b031614156200028857604051635c6d7b7360e01b815260040160405180910390fd5b600080620002978585620004dd565b6001600160a01b0380831660009081526020818152604080832084861684529091529020549294509092501615620002e25760405163c9bb25eb60e01b815260040160405180910390fd5b600360009054906101000a90046001600160a01b03166001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156200033157600080fd5b505afa15801562000346573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200036c9190620006c0565b604051637332a43760e01b81526001600160a01b03848116600483015283811660248301529190911690637332a43790604401600060405180830381600087803b158015620003ba57600080fd5b505af1158015620003cf573d6000803e3d6000fd5b50506003546040516001600160a01b0390911692508491508390620003f49062000656565b6001600160a01b03938416815291831660208301529091166040820152606001604051809103906000f08015801562000431573d6000803e3d6000fd5b506001600160a01b038381166000908152602081815260408083208685168452909152902080546001600160a01b03191691831691909117905592506200047a60018462000530565b506040516001600160a01b03848116825280831691908416907fa92a2b95c8d8436f6ac4c673c61487364f877efb9534d4296fad8ef904546c949060200160405180910390a3505092915050565b6000620004d760018362000547565b92915050565b600080826001600160a01b0316846001600160a01b0316106200050257828462000505565b83835b909590945092505050565b6000620004d7825490565b60006200052983836200056a565b9392505050565b600062000529836001600160a01b03841662000604565b6001600160a01b0381166000908152600183016020526040812054151562000529565b81546000908210620005cd5760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b606482015260840160405180910390fd5b826000018281548110620005f157634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60008181526001830160205260408120546200064d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620004d7565b506000620004d7565b615857806200077083390190565b60006020828403121562000676578081fd5b8135620005298162000756565b6000806040838503121562000696578081fd5b8235620006a38162000756565b91506020830135620006b58162000756565b809150509250929050565b600060208284031215620006d2578081fd5b8151620005298162000756565b6020808252825182820181905260009190848201906040850190845b81811015620007225783516001600160a01b031683529284019291840191600101620006fb565b50909695505050505050565b60006000198214156200074f57634e487b7160e01b81526011600452602481fd5b5060010190565b6001600160a01b03811681146200076c57600080fd5b5056fe60e06040523480156200001157600080fd5b506040516200585738038062005857833981016040819052620000349162000497565b8181816001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200007057600080fd5b505afa15801562000085573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000af9190810190620004ea565b816001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620000e957600080fd5b505afa158015620000fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001289190810190620004ea565b6040516020016200013b929190620005ed565b60408051601f19818403018152828201909152600382526244434160e81b60208301526001600055908686866001600160a01b03831615806200018557506001600160a01b038216155b806200019857506001600160a01b038116155b15620001b75760405163d92e233d60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0385169081179091556040805163e63a391f60e01b8152905163e63a391f91600480820192602092909190829003018186803b1580156200020c57600080fd5b505afa15801562000221573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200024791906200059e565b6001600160e81b031960e89190911b1660c052600280546001600160a01b038085166001600160a01b0319928316811790935560038054918516919092161790556040805163313ce56760e01b8152905163313ce56791600480820192602092909190829003018186803b158015620002bf57600080fd5b505afa158015620002d4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002fa9190620005ca565b6200030790600a62000689565b6001600160701b03166080816001600160701b031660901b81525050806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200035d57600080fd5b505afa15801562000372573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003989190620005ca565b620003a590600a62000689565b60901b6001600160901b03191660a05250508251620003cd9150600c906020850190620003f1565b508051620003e390600d906020840190620003f1565b5050505050505050620007ff565b828054620003ff906200077d565b90600052602060002090601f0160209004810192826200042357600085556200046e565b82601f106200043e57805160ff19168380011785556200046e565b828001600101855582156200046e579182015b828111156200046e57825182559160200191906001019062000451565b506200047c92915062000480565b5090565b5b808211156200047c576000815560010162000481565b600080600060608486031215620004ac578283fd5b8351620004b981620007e6565b6020850151909350620004cc81620007e6565b6040850151909250620004df81620007e6565b809150509250925092565b600060208284031215620004fc578081fd5b81516001600160401b038082111562000513578283fd5b818401915084601f83011262000527578283fd5b8151818111156200053c576200053c620007d0565b604051601f8201601f19908116603f01168101908382118183101715620005675762000567620007d0565b8160405282815287602084870101111562000580578586fd5b620005938360208301602088016200074a565b979650505050505050565b600060208284031215620005b0578081fd5b815162ffffff81168114620005c3578182fd5b9392505050565b600060208284031215620005dc578081fd5b815160ff81168114620005c3578182fd5b6402221a09d160dd1b8152600083516200060f8160058501602088016200074a565b6201016960ed1b6005918401918201528351620006348160088401602088016200074a565b01600801949350505050565b600181815b8085111562000681578160001904821115620006655762000665620007ba565b808516156200067357918102915b93841c939080029062000645565b509250929050565b6000620005c360ff841683600082620006a55750600162000744565b81620006b45750600062000744565b8160018114620006cd5760028114620006d857620006f8565b600191505062000744565b60ff841115620006ec57620006ec620007ba565b50506001821b62000744565b5060208310610133831016604e8410600b84101617156200071d575081810a62000744565b62000729838362000640565b8060001904821115620007405762000740620007ba565b0290505b92915050565b60005b83811015620007675781810151838201526020016200074d565b8381111562000777576000848401525b50505050565b600181811c908216806200079257607f821691505b60208210811415620007b457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620007fc57600080fd5b50565b60805160901c60a05160901c60c05160e81c614fee620008696000396000612d660152600081816124d6015281816125980152818161261301528181612683015281816127d80152612f350152600081816125740152818161264b0152612f5b0152614fee6000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c80635f64b55b11610125578063a57351f9116100ad578063c96ed6391161007c578063c96ed63914610521578063e111e3e714610534578063e985e9c514610547578063eb391aa81461055a578063f8fd31001461056d57600080fd5b8063a57351f9146104c8578063b0d2847c146104d0578063b88d4fde146104fb578063c87b56dd1461050e57600080fd5b80637e29e8a4116100f45780637e29e8a41461046a5780638119c06514610492578063833e46181461049a57806395d89b41146104ad578063a22cb465146104b557600080fd5b80635f64b55b1461041e5780636352211e1461043157806370a08231146104445780637a828b281461045757600080fd5b806323b872dd116101a857806332e8af461161017757806332e8af46146103865780633d783717146103c55780633fcf01e6146103d857806342842e0e146103eb5780635b6fd01d146103fe57600080fd5b806323b872dd1461032557806326742bed146103385780632a52803e1461034b5780632f84cbf51461037157600080fd5b8063095ea7b3116101ef578063095ea7b31461029e5780630ad82b2f146102b15780630b74e852146102c45780630f7d0f2b146102d75780630fc63d101461031257600080fd5b806301ffc9a714610221578063022c0d9f1461024957806306fdde031461025e578063081812fc14610273575b600080fd5b61023461022f366004614441565b61059b565b60405190151581526020015b60405180910390f35b61025c610257366004614723565b6105ed565b005b610266610d39565b6040516102409190614ae4565b6102866102813660046145fd565b610dcb565b6040516001600160a01b039091168152602001610240565b61025c6102ac36600461438a565b610e60565b600154610286906001600160a01b031681565b61025c6102d236600461462d565b610f76565b6102fd6102e53660046147bd565b60056020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610240565b600254610286906001600160a01b031681565b61025c610333366004614258565b611028565b61025c610346366004614651565b611059565b6102fd6103593660046147bd565b600b6020526000908152604090205463ffffffff1681565b61037961108c565b6040516102409190614bd1565b6103b76103943660046147f6565b600460209081526000938452604080852082529284528284209052825290205481565b604051908152602001610240565b61025c6103d3366004614692565b61112e565b61025c6103e6366004614799565b611550565b61025c6103f9366004614258565b6115ac565b61041161040c3660046145fd565b6115c7565b6040516102409190614be4565b600354610286906001600160a01b031681565b61028661043f3660046145fd565b6117e5565b6103b7610452366004614204565b61185c565b61025c6104653660046145fd565b6118e3565b61047d6104783660046143b5565b611a39565b60408051928352602083019190915201610240565b61025c611c38565b6102346104a83660046147bd565b611c56565b610266611c6c565b61025c6104c3366004614302565b611c7b565b6102fd611d40565b6103b76104de3660046147d9565b600a60209081526000928352604080842090915290825290205481565b61025c610509366004614298565b611ded565b61026661051c3660046145fd565b611e25565b61025c61052f36600461476c565b611f26565b6103b76105423660046145fd565b611fd3565b610234610555366004614220565b612103565b6103b761056836600461432f565b612131565b6002546001600160a01b0390811660009081526007602052604080822054600354909316825290205461047d565b60006001600160e01b031982166380ac58cd60e01b14806105cc57506001600160e01b03198216635b5e139f60e01b145b806105e757506301ffc9a760e01b6001600160e01b03198316145b92915050565b600260005414156106195760405162461bcd60e51b815260040161061090614b9a565b60405180910390fd5b60026000908155600154604080516303956f4760e21b815290516001600160a01b0390921691630e55bd1c91600480820192608092909190829003018186803b15801561066557600080fd5b505afa158015610679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069d9190614579565b90508060200151156106c2576040516313d0ff5960e31b815260040160405180910390fd5b6106ca61413d565b6000806106df846040015185606001516123ee565b6020830151929550909350915060ff1661070c576040516346f8d7b160e11b815260040160405180910390fd5b4260005b846020015160ff1681101561092e5760008560000151828151811061074557634e487b7160e01b600052603260045260246000fd5b602002602001015160000151905060008660000151838151811061077957634e487b7160e01b600052603260045260246000fd5b60200260200101516020015190506000876000015184815181106107ad57634e487b7160e01b600052603260045260246000fd5b60200260200101516040015111806107f457506000876000015184815181106107e657634e487b7160e01b600052603260045260246000fd5b602002602001015160600151115b1561090357600254875180516108439285926001600160a01b03909116918790811061083057634e487b7160e01b600052603260045260246000fd5b60200260200101516040015188856128fb565b6003548751805161088d9285926001600160a01b03909116918790811061087a57634e487b7160e01b600052603260045260246000fd5b60200260200101516060015189856128fb565b63ffffffff8281166000908152600560205260409020805463ffffffff1916918316919091179055816108c08186614d7a565b6108cb906001614d3e565b6108d59190614deb565b63ffffffff8381166000908152600b60205260409020805463ffffffff191692909116919091179055610919565b610917600863ffffffff8085169061296e16565b505b5050808061092690614ef0565b915050610710565b5050505080604001518611806109475750806060015185115b156109655760405163bb55fd2760e01b815260040160405180910390fd5b60008160c00151826040015161097b9190614e4d565b905060008260e0015183606001516109939190614e4d565b600254610160850151919250899189916001600160a01b03918216911614156109e0576101208501516109c69083614d26565b9150846101000151836109d99190614d26565b9250610a06565b6101208501516109f09082614d26565b905084610100015184610a039190614d26565b93505b8115610a2357600254610a23906001600160a01b03168984612981565b8015610a4057600354610a40906001600160a01b03168983612981565b5050845115610b1a57856001600160a01b0316633d33803c33600260009054906101000a90046001600160a01b0316600360009054906101000a90046001600160a01b03168c8c600260009054906101000a90046001600160a01b03166001600160a01b03168a61016001516001600160a01b0316148a61012001518b61010001518e6040518a63ffffffff1660e01b8152600401610ae7999897969594939291906149c9565b600060405180830381600087803b158015610b0157600080fd5b505af1158015610b15573d6000803e3d6000fd5b505050505b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610b5e57600080fd5b505afa158015610b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b969190614615565b6003546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610bdf57600080fd5b505afa158015610bf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c179190614615565b90508460c0015184610c299190614d26565b821080610c43575060e0850151610c409084614d26565b81105b15610c615760405163d562e29f60e01b815260040160405180910390fd5b6002546001600160a01b039081166000908152600760205260408082208790556003549092168152208390558551610cb090610c9d8685614e4d565b6002546001600160a01b03169190612981565b8551610cd390610cc08584614e4d565b6003546001600160a01b03169190612981565b876001600160a01b0316336001600160a01b03167f985cca3348e25076ac7404c08e594a15b8529496ecbf6b08af7fa24c5d4e742b8c8c8a604001518a604051610d209493929190614c61565b60405180910390a3505060016000555050505050505050565b6060600c8054610d4890614eb5565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7490614eb5565b8015610dc15780601f10610d9657610100808354040283529160200191610dc1565b820191906000526020600020905b815481529060010190602001808311610da457829003601f168201915b5050505050905090565b6000818152600e60205260408120546001600160a01b0316610e445760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610610565b506000908152601060205260409020546001600160a01b031690565b6000610e6b826117e5565b9050806001600160a01b0316836001600160a01b03161415610ed95760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610610565b336001600160a01b0382161480610ef55750610ef58133612103565b610f675760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610610565b610f7183836129e4565b505050565b60026000541415610f995760405162461bcd60e51b815260040161061090614b9a565b6002600055610fa782612a52565b60008281526012602081815260408084205463ffffffff600160401b820481168652600584529185205487865293909252610fed92811691640100000000900416614e64565b905063ffffffff81166110135760405163d43195c360e01b815260040160405180910390fd5b61101e838383612ab8565b5050600160005550565b6110323382612ae5565b61104e5760405162461bcd60e51b815260040161061090614b49565b610f71838383612bbc565b6002600054141561107c5760405162461bcd60e51b815260040161061090614b9a565b600260005561101e838383612ab8565b61109461413d565b600154604080516303956f4760e21b815290516000926001600160a01b031691630e55bd1c916004808301926080929190829003018186803b1580156110d957600080fd5b505afa1580156110ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111119190614579565b9050611125816040015182606001516123ee565b50909392505050565b600260005414156111515760405162461bcd60e51b815260040161061090614b9a565b600260005584158015611162575083155b156111805760405163125f2a8360e21b815260040160405180910390fd5b6001546040805163b1d0a33760e01b815290516000926001600160a01b03169163b1d0a337916004808301926060929190829003018186803b1580156111c557600080fd5b505afa1580156111d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fd9190614508565b9050806020015115611222576040516313d0ff5960e31b815260040160405180910390fd5b6002546001600160a01b039081166000908152600760205260408082205460035490931682529020548188118061125857508087115b156112765760405163bb55fd2760e01b815260040160405180910390fd5b6000808911611286576000611294565b61129484604001518a612d5c565b905060008089116112a65760006112b4565b6112b485604001518a612d5c565b905089156112d3576002546112d3906001600160a01b0316898c612981565b88156112f0576003546112f0906001600160a01b0316898b612981565b876001600160a01b031663f62c404133600260009054906101000a90046001600160a01b0316600360009054906101000a90046001600160a01b03168e8e88888f8f6040518a63ffffffff1660e01b815260040161135699989796959493929190614a2e565b600060405180830381600087803b15801561137057600080fd5b505af1158015611384573d6000803e3d6000fd5b50506002546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b1580156113ce57600080fd5b505afa1580156113e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114069190614615565b6003546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561144f57600080fd5b505afa158015611463573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114879190614615565b90506114938487614d26565b8210806114a857506114a58386614d26565b81105b156114c65760405163d562e29f60e01b815260040160405180910390fd5b86516114d690610c9d8885614e4d565b86516114e690610cc08784614e4d565b60408781015181518e8152602081018e905263ffffffff9091168183015290516001600160a01b038c169133917f891529dc768bd9c3ee9afa282dfdaf4ddffed309e6dae2af016a804e1d0547339181900360600190a35050600160005550505050505050505050565b600260005414156115735760405162461bcd60e51b815260040161061090614b9a565b60026000908155828152601260205260409020546115a3908390600160601b90046001600160a01b031683612ab8565b50506001600055565b610f7183838360405180602001604052806000815250611ded565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810191909152600082815260126020908152604091829020825160c081018452815463ffffffff80821683526401000000008204811694830194909452600160401b810490931693810193909352600160601b9091046001600160a01b031660608301526001015460ff81161515608083018190526101009091046001600160f81b031660a08301526116a0576003546001600160a01b03166116ad565b6002546001600160a01b03165b6001600160a01b0316825260808101516116d2576002546001600160a01b03166116df565b6003546001600160a01b03165b6001600160a01b031660208301526040808201805163ffffffff90811692850192909252511661171057600061173a565b805160408083015163ffffffff90811660009081526005602052919091205461173a929116614e64565b63ffffffff16606083015261174e83612daa565b608083015260408082015163ffffffff90811660009081526005602090815292902054918301519181169116116117865760006117b5565b60408082015163ffffffff90811660009081526005602090815292902054918301516117b59290911690614e64565b63ffffffff1660a08301526117c983613005565b60c0830152606001516001600160a01b031660e0820152919050565b6000818152600e60205260408120546001600160a01b0316806105e75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610610565b60006001600160a01b0382166118c75760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610610565b506001600160a01b03166000908152600f602052604090205490565b600260005414156119065760405162461bcd60e51b815260040161061090614b9a565b600260005561191481612a52565b600061191f82612daa565b9050600061192c83613005565b905060006119398461309f565b90506000611946856130da565b905061195185613115565b61195a85613272565b83156119a2576001600160a01b03811660009081526007602052604081208054869290611988908490614e4d565b909155506119a290506001600160a01b0382163386612981565b82156119ea576001600160a01b038216600090815260076020526040812080548592906119d0908490614e4d565b909155506119ea90506001600160a01b0383163385612981565b604080518681526020810185905290810185905233907f9b863fe095959050c7ed1d85b45c0922e5667da8f82299a3eebf4cbc584f79ec9060600160405180910390a250506001600055505050565b60008060026000541415611a5f5760405162461bcd60e51b815260040161061090614b9a565b600260009081555b83811015611b4a576000858583818110611a9157634e487b7160e01b600052603260045260246000fd5b905060200201359050611aa381612a52565b6000611aae82612daa565b60008381526012602052604090206001015490915060ff1615611adc57611ad58185614d26565b9350611ae9565b611ae68186614d26565b94505b5060008181526012602081815260408084208054600160401b810463ffffffff9081168752600585529286205496909552929091529290921663ffffffff19909116178155600101805460ff16905580611b4281614ef0565b915050611a67565b508115611b97576002546001600160a01b031660009081526007602052604081208054849290611b7b908490614e4d565b9091555050600254611b97906001600160a01b03163384612981565b8015611be3576003546001600160a01b031660009081526007602052604081208054839290611bc7908490614e4d565b9091555050600354611be3906001600160a01b03163383612981565b336001600160a01b03167f4fd01d816751d768469443eeebd391cbef7fae3c437c75730c0e1b9a3c174eee85858585604051611c229493929190614aa0565b60405180910390a2600160005590939092509050565b611c5460008033604051806020016040528060008152506105ed565b565b60006105e7600863ffffffff8085169061330d16565b6060600d8054610d4890614eb5565b6001600160a01b038216331415611cd45760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610610565b3360008181526011602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b63ffffffff4260005b611d536008613325565b811015611de8576000611d6760088361332f565b63ffffffff8082166000908152600b6020526040902054919250808516911611611d95576000935050505090565b63ffffffff8082166000908152600b60205260408120549091611dba91869116614e64565b90508463ffffffff168163ffffffff161015611dd4578094505b505080611de081614ef0565b915050611d49565b505090565b611df73383612ae5565b611e135760405162461bcd60e51b815260040161061090614b49565b611e1f8484848461333b565b50505050565b60015460408051630442675760e41b815290516060926001600160a01b0316916344267570916004808301926020929190829003018186803b158015611e6a57600080fd5b505afa158015611e7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea29190614479565b60405163e9dc637560e01b8152306004820152602481018490526001600160a01b03919091169063e9dc63759060440160006040518083038186803b158015611eea57600080fd5b505afa158015611efe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105e79190810190614495565b60026000541415611f495760405162461bcd60e51b815260040161061090614b9a565b600260005581611f6c57604051631f2a200560e01b815260040160405180910390fd5b63ffffffff8116611f9057604051633c92196b60e11b815260040160405180910390fd5b6000611f9b84613005565b90506000611fa98483614d26565b9050611fc7858284611fc163ffffffff881683614d66565b8761336e565b50506001600055505050565b600060026000541415611ff85760405162461bcd60e51b815260040161061090614b9a565b600260005561200682612a52565b61200f82612daa565b60008381526012602081815260408084208054600160401b810463ffffffff9081168752600585529286205489875294909352921663ffffffff19909116178155600101805460ff169055909150612066836130da565b6001600160a01b038116600090815260076020526040812080549293508492909190612093908490614e4d565b909155506120ad90506001600160a01b0382163384612981565b604080518481526001600160a01b038316602082015290810183905233907f7d3fe0088fc0b393d0c7629c8d9df3043bd33e8fc1a953dfa251ab201c6ebc389060600160405180910390a2506001600055919050565b6001600160a01b03918216600090815260116020908152604080832093909416825291909152205460ff1690565b6000600260005414156121565760405162461bcd60e51b815260040161061090614b9a565b60026000819055546001600160a01b0386811691161480159061218757506003546001600160a01b03868116911614155b156121a55760405163c1ab6dc160e01b815260040160405180910390fd5b63ffffffff83166121c957604051633c92196b60e11b815260040160405180910390fd5b6121dd600863ffffffff8085169061330d16565b1580156122685750600154604051639eceefe160e01b815263ffffffff841660048201526001600160a01b0390911690639eceefe19060240160206040518083038186803b15801561222e57600080fd5b505afa158015612242573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122669190614425565b155b15612286576040516305fabb6160e41b815260040160405180910390fd5b6002546000906001600160a01b038781169116146122af576003546001600160a01b03166122bc565b6002546001600160a01b03165b905060006122d063ffffffff861687614d9d565b6001600160a01b0390811691506122eb90831633308461351c565b6001600160a01b03871660009081526007602052604081208054839290612313908490614d26565b9250508190555060016013600082825461232d9190614d26565b9250508190555061234033601354613554565b612354600863ffffffff8087169061357216565b506000806123696013548a8a8a60008b61357e565b601354604080519182526001600160a01b038d811660208401528c169082015263ffffffff8084166060830152808a166080830152821660a0820152919350915033907f7bd589f2fd6a39318e78fbbbadbcd21ce8c1306fc0ecb4d7a49a7e4be9c67e639060c00160405180910390a250506013546001600055979650505050505050565b6123f661413d565b600080600080600080612407613785565b9150915060005b8160ff1681101561249d5782818151811061243957634e487b7160e01b600052603260045260246000fd5b602002602001015160400151856124509190614d26565b945082818151811061247257634e487b7160e01b600052603260045260246000fd5b602002602001015160600151846124899190614d26565b93508061249581614ef0565b91505061240e565b5090865260ff16602086015260035460025460405163a513355f60e01b81526001600160a01b0392831660048201526001600160701b037f000000000000000000000000000000000000000000000000000000000000000016602482015290821660448201529087169063a513355f9060640160206040518083038186803b15801561252857600080fd5b505afa15801561253c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125609190614615565b608086018190526125bd6001600160701b037f00000000000000000000000000000000000000000000000000000000000000008116907f000000000000000000000000000000000000000000000000000000000000000016614dcc565b6125c79190614d66565b60a086015260808501516125dc908890612d5c565b85608001516125eb9190614e4d565b93506125fb878660a00151612d5c565b8560a0015161260a9190614e4d565b925060006126427f00000000000000000000000000000000000000000000000000000000000000006001600160701b03168387613924565b9050600061267a7f00000000000000000000000000000000000000000000000000000000000000006001600160701b03168587613924565b905060006126b67f00000000000000000000000000000000000000000000000000000000000000006001600160701b0316858a60800151613924565b90508481101561278b576003546001600160a01b039081166101408a0152600254166101608901526126e88a82612d5c565b60c08901526126f78a85612d5c565b60e08901819052849061270a9084614d26565b6127149190614e4d565b61010089015260c08801516127298487614e4d565b6127339190614e4d565b61012089018190526002546001600160a01b03166000908152600760205260409020546127609190614e4d565b6040808a01919091526003546001600160a01b031660009081526007602052205460608901526128ef565b8481111561289c576002546001600160a01b039081166101408a0152600354166101608901526127bb8a86612d5c565b60c0890152608088015161280d908b906127fe6001600160701b037f00000000000000000000000000000000000000000000000000000000000000001689614dcc565b6128089190614d66565b612d5c565b60e089015260c088015185906128239085614d26565b61282d9190614e4d565b61010089015260e08801516128428386614e4d565b61284c9190614e4d565b61012089019081526002546001600160a01b03908116600090815260076020818152604080842054818f0152945160035490941683525291909120546128929190614e4d565b60608901526128ef565b6128a68a86612d5c565b60c08901526128b58a85612d5c565b60e08901526002546001600160a01b03908116600090815260076020818152604080842054818e0152600354909416835252205460608901525b50505050509250925092565b63ffffffff85166000908152600a602090815260408083206001600160a01b038816845290915290208390556129338585838561393b565b63ffffffff94851660009081526004602090815260408083206001600160a01b03909716835295815285822092909616815294525050812055565b600061297a83836139cf565b9392505050565b6040516001600160a01b038316602482015260448101829052610f7190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613aed565b600081815260106020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612a19826117e5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081815260126020526040902054600160601b90046001600160a01b0316612a8e5760405163673f032f60e11b815260040160405180910390fd5b612a983382612ae5565b612ab557604051635c427cd960e01b815260040160405180910390fd5b50565b610f7183612acc63ffffffff841685614d9d565b6001600160a01b0316612ade86613005565b858561336e565b6000818152600e60205260408120546001600160a01b0316612b5e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610610565b6000612b69836117e5565b9050806001600160a01b0316846001600160a01b03161480612ba45750836001600160a01b0316612b9984610dcb565b6001600160a01b0316145b80612bb45750612bb48185612103565b949350505050565b826001600160a01b0316612bcf826117e5565b6001600160a01b031614612c375760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610610565b6001600160a01b038216612c995760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610610565b612ca46000826129e4565b6001600160a01b0383166000908152600f60205260408120805460019290612ccd908490614e4d565b90915550506001600160a01b0382166000908152600f60205260408120805460019290612cfb908490614d26565b90915550506000818152600e602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000606462ffffff7f000000000000000000000000000000000000000000000000000000000000000016612d9663ffffffff861685614dcc565b612da09190614d66565b61297a9190614d66565b6000818152601260209081526040808320815160c081018352815463ffffffff80821683526401000000008204811695830195909552600160401b810490941692810192909252600160601b9092046001600160a01b0316606082015260019091015460ff81161515608083018190526101009091046001600160f81b031660a08301528290612e45576003546001600160a01b0316612e52565b6002546001600160a01b03165b6040808401805163ffffffff9081166000908152600660209081528482206001600160a01b03871683528152848220818901519451841683526005909152938120549495509384928216911610612ead578460200151612ecc565b60408086015163ffffffff908116600090815260056020529190912054165b63ffffffff908116825260208083019390935260409182016000908120548784015183168252600685528382206001600160a01b03881683528552838220885190931682529190935290822054909250612f269083614e4d565b905060008460800151612f59577f0000000000000000000000000000000000000000000000000000000000000000612f7b565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160701b03169050600080612fa08488606001516001600160a01b0316613bbf565b91509150600082612fd25760608801516001600160a01b0316612fc38587614d66565b612fcd9190614dcc565b612fdc565b612fdc8483614d66565b90508760a001516001600160f81b031681612ff79190614d26565b9a9950505050505050505050565b60008181526012602081815260408084205463ffffffff600160401b8204811686526005845291852054868652939092529182169164010000000090910416818111613055575060009392505050565b600084815260126020526040902054600160601b90046001600160a01b031661307e8383614e64565b63ffffffff1661308e9190614d9d565b6001600160a01b0316949350505050565b60008181526012602052604081206001015460ff166130c9576003546001600160a01b03166105e7565b50506002546001600160a01b031690565b60008181526012602052604081206001015460ff16613104576002546001600160a01b03166105e7565b50506003546001600160a01b031690565b60008181526012602090815260408083205463ffffffff600160401b820481168086526005909452919093205491926401000000009004811691168082111561325857600084815260126020526040812054600160601b90046001600160a01b0316906131818661309f565b63ffffffff861660009081526004602090815260408083206001600160a01b03851684529091528120919250601384900b91906131bf866001614d3e565b63ffffffff1663ffffffff16815260200190815260200160002060008282546131e89190614e0e565b909155505063ffffffff851660009081526004602090815260408083206001600160a01b03851684529091528120601384900b91613227876001614d3e565b63ffffffff1663ffffffff16815260200190815260200160002060008282546132509190614ce5565b909155505050505b505050600090815260126020526040812081815560010155565b600061327d826117e5565b905061328a6000836129e4565b6001600160a01b0381166000908152600f602052604081208054600192906132b3908490614e4d565b90915550506000828152600e602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000818152600183016020526040812054151561297a565b60006105e7825490565b600061297a8383613c15565b613346848484612bbc565b61335284848484613ca9565b611e1f5760405162461bcd60e51b815260040161061090614af7565b61337785612a52565b60006133828661309f565b9050600061338f87612daa565b90506001600160f81b038111156133b957604051630930608960e11b815260040160405180910390fd5b600087815260126020526040902054600160401b900463ffffffff166133de88613115565b6000806133ef8a868989888861357e565b91509150878911156134595761341c333061340a8b8d614e4d565b6001600160a01b03891692919061351c565b613426888a614e4d565b6001600160a01b0386166000908152600760205260408120805490919061344e908490614d26565b909155506134b89050565b878910156134b85761346b8989614e4d565b6001600160a01b03861660009081526007602052604081208054909190613493908490614e4d565b909155506134b89050336134a78b8b614e4d565b6001600160a01b0388169190612981565b604080518b81526001600160a01b038916602082015263ffffffff8481168284015283166060820152905133917ffa7c989fea93eb42545a9e7a74f2b8d966813e216a1dd7b59562af10dba259b4919081900360800190a250505050505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611e1f9085906323b872dd60e01b906084016129ad565b61356e828260405180602001604052806000815250613db6565b5050565b600061297a8383613de9565b6000806001600160a01b0386166135a8576040516314cee7cd60e11b815260040160405180910390fd5b63ffffffff808416600090815260056020526040902054166135cb816001614d3e565b92506135d78682614d3e565b63ffffffff80861660009081526004602090815260408083206001600160a01b038e16845282528083209388168352929052908120805492945060138a900b92909190613625908490614ce5565b909155505063ffffffff841660009081526004602090815260408083206001600160a01b038c1684529091528120601389900b91613664856001614d3e565b63ffffffff1663ffffffff168152602001908152602001600020600082825461368d9190614e0e565b90915550506040805160c08101825263ffffffff928316815283831660208083019182529684168284019081526001600160a01b039a8b16606084019081526002549c8c169c8c169c909c14608084019081526001600160f81b03998a1660a0850190815260009e8f52601290995293909c209151825491519c519b51909a16600160601b026bffffffffffffffffffffffff9b8516600160401b029b909b1667ffffffffffffffff9c85166401000000000267ffffffffffffffff199092169a90941699909917989098179990991617969096178555955190519091166101000290151560ff161760019290920191909155509091565b60606000806137946008613325565b90508067ffffffffffffffff8111156137bd57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561380f57816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816137db5790505b50925060005b8181101561391e57600061382a60088361332f565b90504263ffffffff8281166000908152600b602052604090205491811691161161390b5763ffffffff808216600090815260056020526040812054909161387391166001614d3e565b6040805160808101825263ffffffff80861682528316602082015260025492935091908201906138ae9085906001600160a01b031685613e38565b81526003546020909101906138ce9085906001600160a01b031685613e38565b905286866138db81614f0b565b975060ff16815181106138fe57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250505b508061391681614ef0565b915050613815565b50509091565b6000836139318385614dcc565b612bb49190614d66565b63ffffffff841660009081526006602090815260408083206001600160a01b0387168452909152812081613970600186614e64565b63ffffffff16815260208101919091526040016000205490506139938282614d26565b63ffffffff95861660009081526006602090815260408083206001600160a01b0390981683529681528682209590971681529390955250502055565b60008181526001830160205260408120548015613adc5760006139f3600183614e4d565b8554909150600090613a0790600190614e4d565b90506000866000018281548110613a2e57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110613a5f57634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260018901909152604090208490558654879080613aa057634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506105e7565b60009150506105e7565b5092915050565b6000613b42826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613e8b9092919063ffffffff16565b805190915015610f715780806020019051810190613b609190614425565b610f715760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610610565b60008083613bd35750600190506000613c0e565b83830283858281613bf457634e487b7160e01b600052601260045260246000fd5b0414613c07576000809250925050613c0e565b6001925090505b9250929050565b81546000908210613c735760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b6064820152608401610610565b826000018281548110613c9657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60006001600160a01b0384163b15613dab57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613ced90339089908890889060040161498c565b602060405180830381600087803b158015613d0757600080fd5b505af1925050508015613d37575060408051601f3d908101601f19168201909252613d349181019061445d565b60015b613d91573d808015613d65576040519150601f19603f3d011682016040523d82523d6000602084013e613d6a565b606091505b508051613d895760405162461bcd60e51b815260040161061090614af7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612bb4565b506001949350505050565b613dc08383613e9a565b613dcd6000848484613ca9565b610f715760405162461bcd60e51b815260040161061090614af7565b6000818152600183016020526040812054613e30575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105e7565b5060006105e7565b63ffffffff92831660008181526004602090815260408083206001600160a01b0390961680845295825280832094909616825292835284812054918152600a835284812093815292909152919020540190565b6060612bb48484600085613fdc565b6001600160a01b038216613ef05760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610610565b6000818152600e60205260409020546001600160a01b031615613f555760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610610565b6001600160a01b0382166000908152600f60205260408120805460019290613f7e908490614d26565b90915550506000818152600e602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60608247101561403d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610610565b843b61408b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610610565b600080866001600160a01b031685876040516140a79190614970565b60006040518083038185875af1925050503d80600081146140e4576040519150601f19603f3d011682016040523d82523d6000602084013e6140e9565b606091505b50915091506140f9828286614104565b979650505050505050565b6060831561411357508161297a565b8251156141235782518084602001fd5b8160405162461bcd60e51b81526004016106109190614ae4565b60405180610180016040528060608152602001600060ff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b600082601f8301126141c3578081fd5b81356141d66141d182614cbd565b614c8c565b8181528460208386010111156141ea578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215614215578081fd5b813561297a81614f6d565b60008060408385031215614232578081fd5b823561423d81614f6d565b9150602083013561424d81614f6d565b809150509250929050565b60008060006060848603121561426c578081fd5b833561427781614f6d565b9250602084013561428781614f6d565b929592945050506040919091013590565b600080600080608085870312156142ad578081fd5b84356142b881614f6d565b935060208501356142c881614f6d565b925060408501359150606085013567ffffffffffffffff8111156142ea578182fd5b6142f6878288016141b3565b91505092959194509250565b60008060408385031215614314578182fd5b823561431f81614f6d565b9150602083013561424d81614f82565b60008060008060808587031215614344578182fd5b843561434f81614f6d565b9350602085013561435f81614f6d565b9250604085013561436f81614fa6565b9150606085013561437f81614fa6565b939692955090935050565b6000806040838503121561439c578182fd5b82356143a781614f6d565b946020939093013593505050565b600080602083850312156143c7578182fd5b823567ffffffffffffffff808211156143de578384fd5b818501915085601f8301126143f1578384fd5b8135818111156143ff578485fd5b8660208260051b8501011115614413578485fd5b60209290920196919550909350505050565b600060208284031215614436578081fd5b815161297a81614f82565b600060208284031215614452578081fd5b813561297a81614f90565b60006020828403121561446e578081fd5b815161297a81614f90565b60006020828403121561448a578081fd5b815161297a81614f6d565b6000602082840312156144a6578081fd5b815167ffffffffffffffff8111156144bc578182fd5b8201601f810184136144cc578182fd5b80516144da6141d182614cbd565b8181528560208385010111156144ee578384fd5b6144ff826020830160208601614e89565b95945050505050565b600060608284031215614519578081fd5b6040516060810181811067ffffffffffffffff8211171561453c5761453c614f57565b604052825161454a81614f6d565b8152602083015161455a81614f82565b6020820152604083015161456d81614fa6565b60408201529392505050565b60006080828403121561458a578081fd5b6040516080810181811067ffffffffffffffff821117156145ad576145ad614f57565b60405282516145bb81614f6d565b815260208301516145cb81614f82565b602082015260408301516145de81614fa6565b604082015260608301516145f181614f6d565b60608201529392505050565b60006020828403121561460e578081fd5b5035919050565b600060208284031215614626578081fd5b5051919050565b6000806040838503121561463f578182fd5b82359150602083013561424d81614f6d565b600080600060608486031215614665578081fd5b83359250602084013561467781614f6d565b9150604084013561468781614fa6565b809150509250925092565b6000806000806000608086880312156146a9578283fd5b853594506020860135935060408601356146c281614f6d565b9250606086013567ffffffffffffffff808211156146de578283fd5b818801915088601f8301126146f1578283fd5b8135818111156146ff578384fd5b896020828501011115614710578384fd5b9699959850939650602001949392505050565b60008060008060808587031215614738578182fd5b8435935060208501359250604085013561475181614f6d565b9150606085013567ffffffffffffffff8111156142ea578182fd5b600080600060608486031215614780578081fd5b8335925060208401359150604084013561468781614fa6565b600080604083850312156147ab578182fd5b82359150602083013561424d81614fa6565b6000602082840312156147ce578081fd5b813561297a81614fa6565b600080604083850312156147eb578182fd5b823561423d81614fa6565b60008060006060848603121561480a578081fd5b833561481581614fa6565b9250602084013561467781614f6d565b6000815180845260208085019450808401835b8381101561487d578151805163ffffffff9081168952848201511684890152604080820151908901526060908101519088015260809096019590820190600101614838565b509495945050505050565b600081518084526148a0816020860160208601614e89565b601f01601f19169290920160200192915050565b600061018082518185526148ca82860182614825565b91505060208301516148e1602086018260ff169052565b5060408301516040850152606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e085015261010080840151818601525061012080840151818601525061014080840151614951828701826001600160a01b03169052565b5050610160928301516001600160a01b03169390920192909252919050565b60008251614982818460208701614e89565b9190910192915050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906149bf90830184614888565b9695505050505050565b600061012060018060a01b03808d168452808c166020850152808b1660408501525088606084015287608084015286151560a08401528560c08401528460e084015280610100840152614a1e81840185614888565b9c9b505050505050505050505050565b6001600160a01b038a81168252898116602083015288166040820152606081018790526080810186905260a0810185905260c0810184905261010060e0820181905281018290526000610120838582850137828401810191909152601f909201601f1916010198975050505050505050565b6060808252810184905260006001600160fb1b03851115614abf578081fd5b8460051b80876080850137820160800190815260208201939093526040015292915050565b60208152600061297a6020830184614888565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208152600061297a60208301846148b4565b60006101008201905060018060a01b0380845116835280602085015116602084015250604083015163ffffffff8082166040850152806060860151166060850152608085015160808501528060a08601511660a0850152505060c083015160c083015260e0830151613ae660e08401826001600160a01b03169052565b84815283602082015263ffffffff831660408201526080606082015260006149bf60808301846148b4565b604051601f8201601f1916810167ffffffffffffffff81118282101715614cb557614cb5614f57565b604052919050565b600067ffffffffffffffff821115614cd757614cd7614f57565b50601f01601f191660200190565b600080821280156001600160ff1b0384900385131615614d0757614d07614f2b565b600160ff1b8390038412811615614d2057614d20614f2b565b50500190565b60008219821115614d3957614d39614f2b565b500190565b600063ffffffff808316818516808303821115614d5d57614d5d614f2b565b01949350505050565b600082614d7557614d75614f41565b500490565b600063ffffffff80841680614d9157614d91614f41565b92169190910492915050565b60006001600160a01b0382811684821681151582840482111615614dc357614dc3614f2b565b02949350505050565b6000816000190483118215151615614de657614de6614f2b565b500290565b600063ffffffff80831681851681830481118215151615614dc357614dc3614f2b565b60008083128015600160ff1b850184121615614e2c57614e2c614f2b565b6001600160ff1b0384018313811615614e4757614e47614f2b565b50500390565b600082821015614e5f57614e5f614f2b565b500390565b600063ffffffff83811690831681811015614e8157614e81614f2b565b039392505050565b60005b83811015614ea4578181015183820152602001614e8c565b83811115611e1f5750506000910152565b600181811c90821680614ec957607f821691505b60208210811415614eea57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415614f0457614f04614f2b565b5060010190565b600060ff821660ff811415614f2257614f22614f2b565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612ab557600080fd5b8015158114612ab557600080fd5b6001600160e01b031981168114612ab557600080fd5b63ffffffff81168114612ab557600080fdfea264697066735822122078a60ac89a2b8bf88cb46133f450ab5898b677790422ba50c2b8578db6f4092464736f6c63430008040033a264697066735822122095623cfde60cef894554e2a96c01dca30cfe5607be3ce54e1ee7a728fb46a91f64736f6c63430008040033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200005e5760003560e01c80630ad82b2f14620000635780631d5aa6d81462000094578063c97682f814620000ab578063c9c6539614620000c4578063e5e31b1314620000db575b600080fd5b60035462000077906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b62000077620000a536600462000683565b62000103565b620000b562000142565b6040516200008b9190620006df565b62000077620000d536600462000683565b62000215565b620000f2620000ec36600462000664565b620004c8565b60405190151581526020016200008b565b6000806000620001148585620004dd565b6001600160a01b03918216600090815260208181526040808320938516835292905220541695945050505050565b6060600062000152600162000510565b90508067ffffffffffffffff8111156200017c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015620001a6578160200160208202803683370190505b50915060005b818110156200021057620001c26001826200051b565b838281518110620001e357634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101528062000207816200072e565b915050620001ac565b505090565b60006001600160a01b03831615806200023557506001600160a01b038216155b15620002545760405163d92e233d60e01b815260040160405180910390fd5b816001600160a01b0316836001600160a01b031614156200028857604051635c6d7b7360e01b815260040160405180910390fd5b600080620002978585620004dd565b6001600160a01b0380831660009081526020818152604080832084861684529091529020549294509092501615620002e25760405163c9bb25eb60e01b815260040160405180910390fd5b600360009054906101000a90046001600160a01b03166001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156200033157600080fd5b505afa15801562000346573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200036c9190620006c0565b604051637332a43760e01b81526001600160a01b03848116600483015283811660248301529190911690637332a43790604401600060405180830381600087803b158015620003ba57600080fd5b505af1158015620003cf573d6000803e3d6000fd5b50506003546040516001600160a01b0390911692508491508390620003f49062000656565b6001600160a01b03938416815291831660208301529091166040820152606001604051809103906000f08015801562000431573d6000803e3d6000fd5b506001600160a01b038381166000908152602081815260408083208685168452909152902080546001600160a01b03191691831691909117905592506200047a60018462000530565b506040516001600160a01b03848116825280831691908416907fa92a2b95c8d8436f6ac4c673c61487364f877efb9534d4296fad8ef904546c949060200160405180910390a3505092915050565b6000620004d760018362000547565b92915050565b600080826001600160a01b0316846001600160a01b0316106200050257828462000505565b83835b909590945092505050565b6000620004d7825490565b60006200052983836200056a565b9392505050565b600062000529836001600160a01b03841662000604565b6001600160a01b0381166000908152600183016020526040812054151562000529565b81546000908210620005cd5760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b606482015260840160405180910390fd5b826000018281548110620005f157634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60008181526001830160205260408120546200064d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620004d7565b506000620004d7565b615857806200077083390190565b60006020828403121562000676578081fd5b8135620005298162000756565b6000806040838503121562000696578081fd5b8235620006a38162000756565b91506020830135620006b58162000756565b809150509250929050565b600060208284031215620006d2578081fd5b8151620005298162000756565b6020808252825182820181905260009190848201906040850190845b81811015620007225783516001600160a01b031683529284019291840191600101620006fb565b50909695505050505050565b60006000198214156200074f57634e487b7160e01b81526011600452602481fd5b5060010190565b6001600160a01b03811681146200076c57600080fd5b5056fe60e06040523480156200001157600080fd5b506040516200585738038062005857833981016040819052620000349162000497565b8181816001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200007057600080fd5b505afa15801562000085573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000af9190810190620004ea565b816001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620000e957600080fd5b505afa158015620000fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001289190810190620004ea565b6040516020016200013b929190620005ed565b60408051601f19818403018152828201909152600382526244434160e81b60208301526001600055908686866001600160a01b03831615806200018557506001600160a01b038216155b806200019857506001600160a01b038116155b15620001b75760405163d92e233d60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0385169081179091556040805163e63a391f60e01b8152905163e63a391f91600480820192602092909190829003018186803b1580156200020c57600080fd5b505afa15801562000221573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200024791906200059e565b6001600160e81b031960e89190911b1660c052600280546001600160a01b038085166001600160a01b0319928316811790935560038054918516919092161790556040805163313ce56760e01b8152905163313ce56791600480820192602092909190829003018186803b158015620002bf57600080fd5b505afa158015620002d4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002fa9190620005ca565b6200030790600a62000689565b6001600160701b03166080816001600160701b031660901b81525050806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200035d57600080fd5b505afa15801562000372573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003989190620005ca565b620003a590600a62000689565b60901b6001600160901b03191660a05250508251620003cd9150600c906020850190620003f1565b508051620003e390600d906020840190620003f1565b5050505050505050620007ff565b828054620003ff906200077d565b90600052602060002090601f0160209004810192826200042357600085556200046e565b82601f106200043e57805160ff19168380011785556200046e565b828001600101855582156200046e579182015b828111156200046e57825182559160200191906001019062000451565b506200047c92915062000480565b5090565b5b808211156200047c576000815560010162000481565b600080600060608486031215620004ac578283fd5b8351620004b981620007e6565b6020850151909350620004cc81620007e6565b6040850151909250620004df81620007e6565b809150509250925092565b600060208284031215620004fc578081fd5b81516001600160401b038082111562000513578283fd5b818401915084601f83011262000527578283fd5b8151818111156200053c576200053c620007d0565b604051601f8201601f19908116603f01168101908382118183101715620005675762000567620007d0565b8160405282815287602084870101111562000580578586fd5b620005938360208301602088016200074a565b979650505050505050565b600060208284031215620005b0578081fd5b815162ffffff81168114620005c3578182fd5b9392505050565b600060208284031215620005dc578081fd5b815160ff81168114620005c3578182fd5b6402221a09d160dd1b8152600083516200060f8160058501602088016200074a565b6201016960ed1b6005918401918201528351620006348160088401602088016200074a565b01600801949350505050565b600181815b8085111562000681578160001904821115620006655762000665620007ba565b808516156200067357918102915b93841c939080029062000645565b509250929050565b6000620005c360ff841683600082620006a55750600162000744565b81620006b45750600062000744565b8160018114620006cd5760028114620006d857620006f8565b600191505062000744565b60ff841115620006ec57620006ec620007ba565b50506001821b62000744565b5060208310610133831016604e8410600b84101617156200071d575081810a62000744565b62000729838362000640565b8060001904821115620007405762000740620007ba565b0290505b92915050565b60005b83811015620007675781810151838201526020016200074d565b8381111562000777576000848401525b50505050565b600181811c908216806200079257607f821691505b60208210811415620007b457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620007fc57600080fd5b50565b60805160901c60a05160901c60c05160e81c614fee620008696000396000612d660152600081816124d6015281816125980152818161261301528181612683015281816127d80152612f350152600081816125740152818161264b0152612f5b0152614fee6000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c80635f64b55b11610125578063a57351f9116100ad578063c96ed6391161007c578063c96ed63914610521578063e111e3e714610534578063e985e9c514610547578063eb391aa81461055a578063f8fd31001461056d57600080fd5b8063a57351f9146104c8578063b0d2847c146104d0578063b88d4fde146104fb578063c87b56dd1461050e57600080fd5b80637e29e8a4116100f45780637e29e8a41461046a5780638119c06514610492578063833e46181461049a57806395d89b41146104ad578063a22cb465146104b557600080fd5b80635f64b55b1461041e5780636352211e1461043157806370a08231146104445780637a828b281461045757600080fd5b806323b872dd116101a857806332e8af461161017757806332e8af46146103865780633d783717146103c55780633fcf01e6146103d857806342842e0e146103eb5780635b6fd01d146103fe57600080fd5b806323b872dd1461032557806326742bed146103385780632a52803e1461034b5780632f84cbf51461037157600080fd5b8063095ea7b3116101ef578063095ea7b31461029e5780630ad82b2f146102b15780630b74e852146102c45780630f7d0f2b146102d75780630fc63d101461031257600080fd5b806301ffc9a714610221578063022c0d9f1461024957806306fdde031461025e578063081812fc14610273575b600080fd5b61023461022f366004614441565b61059b565b60405190151581526020015b60405180910390f35b61025c610257366004614723565b6105ed565b005b610266610d39565b6040516102409190614ae4565b6102866102813660046145fd565b610dcb565b6040516001600160a01b039091168152602001610240565b61025c6102ac36600461438a565b610e60565b600154610286906001600160a01b031681565b61025c6102d236600461462d565b610f76565b6102fd6102e53660046147bd565b60056020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610240565b600254610286906001600160a01b031681565b61025c610333366004614258565b611028565b61025c610346366004614651565b611059565b6102fd6103593660046147bd565b600b6020526000908152604090205463ffffffff1681565b61037961108c565b6040516102409190614bd1565b6103b76103943660046147f6565b600460209081526000938452604080852082529284528284209052825290205481565b604051908152602001610240565b61025c6103d3366004614692565b61112e565b61025c6103e6366004614799565b611550565b61025c6103f9366004614258565b6115ac565b61041161040c3660046145fd565b6115c7565b6040516102409190614be4565b600354610286906001600160a01b031681565b61028661043f3660046145fd565b6117e5565b6103b7610452366004614204565b61185c565b61025c6104653660046145fd565b6118e3565b61047d6104783660046143b5565b611a39565b60408051928352602083019190915201610240565b61025c611c38565b6102346104a83660046147bd565b611c56565b610266611c6c565b61025c6104c3366004614302565b611c7b565b6102fd611d40565b6103b76104de3660046147d9565b600a60209081526000928352604080842090915290825290205481565b61025c610509366004614298565b611ded565b61026661051c3660046145fd565b611e25565b61025c61052f36600461476c565b611f26565b6103b76105423660046145fd565b611fd3565b610234610555366004614220565b612103565b6103b761056836600461432f565b612131565b6002546001600160a01b0390811660009081526007602052604080822054600354909316825290205461047d565b60006001600160e01b031982166380ac58cd60e01b14806105cc57506001600160e01b03198216635b5e139f60e01b145b806105e757506301ffc9a760e01b6001600160e01b03198316145b92915050565b600260005414156106195760405162461bcd60e51b815260040161061090614b9a565b60405180910390fd5b60026000908155600154604080516303956f4760e21b815290516001600160a01b0390921691630e55bd1c91600480820192608092909190829003018186803b15801561066557600080fd5b505afa158015610679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069d9190614579565b90508060200151156106c2576040516313d0ff5960e31b815260040160405180910390fd5b6106ca61413d565b6000806106df846040015185606001516123ee565b6020830151929550909350915060ff1661070c576040516346f8d7b160e11b815260040160405180910390fd5b4260005b846020015160ff1681101561092e5760008560000151828151811061074557634e487b7160e01b600052603260045260246000fd5b602002602001015160000151905060008660000151838151811061077957634e487b7160e01b600052603260045260246000fd5b60200260200101516020015190506000876000015184815181106107ad57634e487b7160e01b600052603260045260246000fd5b60200260200101516040015111806107f457506000876000015184815181106107e657634e487b7160e01b600052603260045260246000fd5b602002602001015160600151115b1561090357600254875180516108439285926001600160a01b03909116918790811061083057634e487b7160e01b600052603260045260246000fd5b60200260200101516040015188856128fb565b6003548751805161088d9285926001600160a01b03909116918790811061087a57634e487b7160e01b600052603260045260246000fd5b60200260200101516060015189856128fb565b63ffffffff8281166000908152600560205260409020805463ffffffff1916918316919091179055816108c08186614d7a565b6108cb906001614d3e565b6108d59190614deb565b63ffffffff8381166000908152600b60205260409020805463ffffffff191692909116919091179055610919565b610917600863ffffffff8085169061296e16565b505b5050808061092690614ef0565b915050610710565b5050505080604001518611806109475750806060015185115b156109655760405163bb55fd2760e01b815260040160405180910390fd5b60008160c00151826040015161097b9190614e4d565b905060008260e0015183606001516109939190614e4d565b600254610160850151919250899189916001600160a01b03918216911614156109e0576101208501516109c69083614d26565b9150846101000151836109d99190614d26565b9250610a06565b6101208501516109f09082614d26565b905084610100015184610a039190614d26565b93505b8115610a2357600254610a23906001600160a01b03168984612981565b8015610a4057600354610a40906001600160a01b03168983612981565b5050845115610b1a57856001600160a01b0316633d33803c33600260009054906101000a90046001600160a01b0316600360009054906101000a90046001600160a01b03168c8c600260009054906101000a90046001600160a01b03166001600160a01b03168a61016001516001600160a01b0316148a61012001518b61010001518e6040518a63ffffffff1660e01b8152600401610ae7999897969594939291906149c9565b600060405180830381600087803b158015610b0157600080fd5b505af1158015610b15573d6000803e3d6000fd5b505050505b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610b5e57600080fd5b505afa158015610b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b969190614615565b6003546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610bdf57600080fd5b505afa158015610bf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c179190614615565b90508460c0015184610c299190614d26565b821080610c43575060e0850151610c409084614d26565b81105b15610c615760405163d562e29f60e01b815260040160405180910390fd5b6002546001600160a01b039081166000908152600760205260408082208790556003549092168152208390558551610cb090610c9d8685614e4d565b6002546001600160a01b03169190612981565b8551610cd390610cc08584614e4d565b6003546001600160a01b03169190612981565b876001600160a01b0316336001600160a01b03167f985cca3348e25076ac7404c08e594a15b8529496ecbf6b08af7fa24c5d4e742b8c8c8a604001518a604051610d209493929190614c61565b60405180910390a3505060016000555050505050505050565b6060600c8054610d4890614eb5565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7490614eb5565b8015610dc15780601f10610d9657610100808354040283529160200191610dc1565b820191906000526020600020905b815481529060010190602001808311610da457829003601f168201915b5050505050905090565b6000818152600e60205260408120546001600160a01b0316610e445760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610610565b506000908152601060205260409020546001600160a01b031690565b6000610e6b826117e5565b9050806001600160a01b0316836001600160a01b03161415610ed95760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610610565b336001600160a01b0382161480610ef55750610ef58133612103565b610f675760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610610565b610f7183836129e4565b505050565b60026000541415610f995760405162461bcd60e51b815260040161061090614b9a565b6002600055610fa782612a52565b60008281526012602081815260408084205463ffffffff600160401b820481168652600584529185205487865293909252610fed92811691640100000000900416614e64565b905063ffffffff81166110135760405163d43195c360e01b815260040160405180910390fd5b61101e838383612ab8565b5050600160005550565b6110323382612ae5565b61104e5760405162461bcd60e51b815260040161061090614b49565b610f71838383612bbc565b6002600054141561107c5760405162461bcd60e51b815260040161061090614b9a565b600260005561101e838383612ab8565b61109461413d565b600154604080516303956f4760e21b815290516000926001600160a01b031691630e55bd1c916004808301926080929190829003018186803b1580156110d957600080fd5b505afa1580156110ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111119190614579565b9050611125816040015182606001516123ee565b50909392505050565b600260005414156111515760405162461bcd60e51b815260040161061090614b9a565b600260005584158015611162575083155b156111805760405163125f2a8360e21b815260040160405180910390fd5b6001546040805163b1d0a33760e01b815290516000926001600160a01b03169163b1d0a337916004808301926060929190829003018186803b1580156111c557600080fd5b505afa1580156111d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fd9190614508565b9050806020015115611222576040516313d0ff5960e31b815260040160405180910390fd5b6002546001600160a01b039081166000908152600760205260408082205460035490931682529020548188118061125857508087115b156112765760405163bb55fd2760e01b815260040160405180910390fd5b6000808911611286576000611294565b61129484604001518a612d5c565b905060008089116112a65760006112b4565b6112b485604001518a612d5c565b905089156112d3576002546112d3906001600160a01b0316898c612981565b88156112f0576003546112f0906001600160a01b0316898b612981565b876001600160a01b031663f62c404133600260009054906101000a90046001600160a01b0316600360009054906101000a90046001600160a01b03168e8e88888f8f6040518a63ffffffff1660e01b815260040161135699989796959493929190614a2e565b600060405180830381600087803b15801561137057600080fd5b505af1158015611384573d6000803e3d6000fd5b50506002546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b1580156113ce57600080fd5b505afa1580156113e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114069190614615565b6003546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561144f57600080fd5b505afa158015611463573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114879190614615565b90506114938487614d26565b8210806114a857506114a58386614d26565b81105b156114c65760405163d562e29f60e01b815260040160405180910390fd5b86516114d690610c9d8885614e4d565b86516114e690610cc08784614e4d565b60408781015181518e8152602081018e905263ffffffff9091168183015290516001600160a01b038c169133917f891529dc768bd9c3ee9afa282dfdaf4ddffed309e6dae2af016a804e1d0547339181900360600190a35050600160005550505050505050505050565b600260005414156115735760405162461bcd60e51b815260040161061090614b9a565b60026000908155828152601260205260409020546115a3908390600160601b90046001600160a01b031683612ab8565b50506001600055565b610f7183838360405180602001604052806000815250611ded565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810191909152600082815260126020908152604091829020825160c081018452815463ffffffff80821683526401000000008204811694830194909452600160401b810490931693810193909352600160601b9091046001600160a01b031660608301526001015460ff81161515608083018190526101009091046001600160f81b031660a08301526116a0576003546001600160a01b03166116ad565b6002546001600160a01b03165b6001600160a01b0316825260808101516116d2576002546001600160a01b03166116df565b6003546001600160a01b03165b6001600160a01b031660208301526040808201805163ffffffff90811692850192909252511661171057600061173a565b805160408083015163ffffffff90811660009081526005602052919091205461173a929116614e64565b63ffffffff16606083015261174e83612daa565b608083015260408082015163ffffffff90811660009081526005602090815292902054918301519181169116116117865760006117b5565b60408082015163ffffffff90811660009081526005602090815292902054918301516117b59290911690614e64565b63ffffffff1660a08301526117c983613005565b60c0830152606001516001600160a01b031660e0820152919050565b6000818152600e60205260408120546001600160a01b0316806105e75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610610565b60006001600160a01b0382166118c75760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610610565b506001600160a01b03166000908152600f602052604090205490565b600260005414156119065760405162461bcd60e51b815260040161061090614b9a565b600260005561191481612a52565b600061191f82612daa565b9050600061192c83613005565b905060006119398461309f565b90506000611946856130da565b905061195185613115565b61195a85613272565b83156119a2576001600160a01b03811660009081526007602052604081208054869290611988908490614e4d565b909155506119a290506001600160a01b0382163386612981565b82156119ea576001600160a01b038216600090815260076020526040812080548592906119d0908490614e4d565b909155506119ea90506001600160a01b0383163385612981565b604080518681526020810185905290810185905233907f9b863fe095959050c7ed1d85b45c0922e5667da8f82299a3eebf4cbc584f79ec9060600160405180910390a250506001600055505050565b60008060026000541415611a5f5760405162461bcd60e51b815260040161061090614b9a565b600260009081555b83811015611b4a576000858583818110611a9157634e487b7160e01b600052603260045260246000fd5b905060200201359050611aa381612a52565b6000611aae82612daa565b60008381526012602052604090206001015490915060ff1615611adc57611ad58185614d26565b9350611ae9565b611ae68186614d26565b94505b5060008181526012602081815260408084208054600160401b810463ffffffff9081168752600585529286205496909552929091529290921663ffffffff19909116178155600101805460ff16905580611b4281614ef0565b915050611a67565b508115611b97576002546001600160a01b031660009081526007602052604081208054849290611b7b908490614e4d565b9091555050600254611b97906001600160a01b03163384612981565b8015611be3576003546001600160a01b031660009081526007602052604081208054839290611bc7908490614e4d565b9091555050600354611be3906001600160a01b03163383612981565b336001600160a01b03167f4fd01d816751d768469443eeebd391cbef7fae3c437c75730c0e1b9a3c174eee85858585604051611c229493929190614aa0565b60405180910390a2600160005590939092509050565b611c5460008033604051806020016040528060008152506105ed565b565b60006105e7600863ffffffff8085169061330d16565b6060600d8054610d4890614eb5565b6001600160a01b038216331415611cd45760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610610565b3360008181526011602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b63ffffffff4260005b611d536008613325565b811015611de8576000611d6760088361332f565b63ffffffff8082166000908152600b6020526040902054919250808516911611611d95576000935050505090565b63ffffffff8082166000908152600b60205260408120549091611dba91869116614e64565b90508463ffffffff168163ffffffff161015611dd4578094505b505080611de081614ef0565b915050611d49565b505090565b611df73383612ae5565b611e135760405162461bcd60e51b815260040161061090614b49565b611e1f8484848461333b565b50505050565b60015460408051630442675760e41b815290516060926001600160a01b0316916344267570916004808301926020929190829003018186803b158015611e6a57600080fd5b505afa158015611e7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea29190614479565b60405163e9dc637560e01b8152306004820152602481018490526001600160a01b03919091169063e9dc63759060440160006040518083038186803b158015611eea57600080fd5b505afa158015611efe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105e79190810190614495565b60026000541415611f495760405162461bcd60e51b815260040161061090614b9a565b600260005581611f6c57604051631f2a200560e01b815260040160405180910390fd5b63ffffffff8116611f9057604051633c92196b60e11b815260040160405180910390fd5b6000611f9b84613005565b90506000611fa98483614d26565b9050611fc7858284611fc163ffffffff881683614d66565b8761336e565b50506001600055505050565b600060026000541415611ff85760405162461bcd60e51b815260040161061090614b9a565b600260005561200682612a52565b61200f82612daa565b60008381526012602081815260408084208054600160401b810463ffffffff9081168752600585529286205489875294909352921663ffffffff19909116178155600101805460ff169055909150612066836130da565b6001600160a01b038116600090815260076020526040812080549293508492909190612093908490614e4d565b909155506120ad90506001600160a01b0382163384612981565b604080518481526001600160a01b038316602082015290810183905233907f7d3fe0088fc0b393d0c7629c8d9df3043bd33e8fc1a953dfa251ab201c6ebc389060600160405180910390a2506001600055919050565b6001600160a01b03918216600090815260116020908152604080832093909416825291909152205460ff1690565b6000600260005414156121565760405162461bcd60e51b815260040161061090614b9a565b60026000819055546001600160a01b0386811691161480159061218757506003546001600160a01b03868116911614155b156121a55760405163c1ab6dc160e01b815260040160405180910390fd5b63ffffffff83166121c957604051633c92196b60e11b815260040160405180910390fd5b6121dd600863ffffffff8085169061330d16565b1580156122685750600154604051639eceefe160e01b815263ffffffff841660048201526001600160a01b0390911690639eceefe19060240160206040518083038186803b15801561222e57600080fd5b505afa158015612242573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122669190614425565b155b15612286576040516305fabb6160e41b815260040160405180910390fd5b6002546000906001600160a01b038781169116146122af576003546001600160a01b03166122bc565b6002546001600160a01b03165b905060006122d063ffffffff861687614d9d565b6001600160a01b0390811691506122eb90831633308461351c565b6001600160a01b03871660009081526007602052604081208054839290612313908490614d26565b9250508190555060016013600082825461232d9190614d26565b9250508190555061234033601354613554565b612354600863ffffffff8087169061357216565b506000806123696013548a8a8a60008b61357e565b601354604080519182526001600160a01b038d811660208401528c169082015263ffffffff8084166060830152808a166080830152821660a0820152919350915033907f7bd589f2fd6a39318e78fbbbadbcd21ce8c1306fc0ecb4d7a49a7e4be9c67e639060c00160405180910390a250506013546001600055979650505050505050565b6123f661413d565b600080600080600080612407613785565b9150915060005b8160ff1681101561249d5782818151811061243957634e487b7160e01b600052603260045260246000fd5b602002602001015160400151856124509190614d26565b945082818151811061247257634e487b7160e01b600052603260045260246000fd5b602002602001015160600151846124899190614d26565b93508061249581614ef0565b91505061240e565b5090865260ff16602086015260035460025460405163a513355f60e01b81526001600160a01b0392831660048201526001600160701b037f000000000000000000000000000000000000000000000000000000000000000016602482015290821660448201529087169063a513355f9060640160206040518083038186803b15801561252857600080fd5b505afa15801561253c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125609190614615565b608086018190526125bd6001600160701b037f00000000000000000000000000000000000000000000000000000000000000008116907f000000000000000000000000000000000000000000000000000000000000000016614dcc565b6125c79190614d66565b60a086015260808501516125dc908890612d5c565b85608001516125eb9190614e4d565b93506125fb878660a00151612d5c565b8560a0015161260a9190614e4d565b925060006126427f00000000000000000000000000000000000000000000000000000000000000006001600160701b03168387613924565b9050600061267a7f00000000000000000000000000000000000000000000000000000000000000006001600160701b03168587613924565b905060006126b67f00000000000000000000000000000000000000000000000000000000000000006001600160701b0316858a60800151613924565b90508481101561278b576003546001600160a01b039081166101408a0152600254166101608901526126e88a82612d5c565b60c08901526126f78a85612d5c565b60e08901819052849061270a9084614d26565b6127149190614e4d565b61010089015260c08801516127298487614e4d565b6127339190614e4d565b61012089018190526002546001600160a01b03166000908152600760205260409020546127609190614e4d565b6040808a01919091526003546001600160a01b031660009081526007602052205460608901526128ef565b8481111561289c576002546001600160a01b039081166101408a0152600354166101608901526127bb8a86612d5c565b60c0890152608088015161280d908b906127fe6001600160701b037f00000000000000000000000000000000000000000000000000000000000000001689614dcc565b6128089190614d66565b612d5c565b60e089015260c088015185906128239085614d26565b61282d9190614e4d565b61010089015260e08801516128428386614e4d565b61284c9190614e4d565b61012089019081526002546001600160a01b03908116600090815260076020818152604080842054818f0152945160035490941683525291909120546128929190614e4d565b60608901526128ef565b6128a68a86612d5c565b60c08901526128b58a85612d5c565b60e08901526002546001600160a01b03908116600090815260076020818152604080842054818e0152600354909416835252205460608901525b50505050509250925092565b63ffffffff85166000908152600a602090815260408083206001600160a01b038816845290915290208390556129338585838561393b565b63ffffffff94851660009081526004602090815260408083206001600160a01b03909716835295815285822092909616815294525050812055565b600061297a83836139cf565b9392505050565b6040516001600160a01b038316602482015260448101829052610f7190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613aed565b600081815260106020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612a19826117e5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081815260126020526040902054600160601b90046001600160a01b0316612a8e5760405163673f032f60e11b815260040160405180910390fd5b612a983382612ae5565b612ab557604051635c427cd960e01b815260040160405180910390fd5b50565b610f7183612acc63ffffffff841685614d9d565b6001600160a01b0316612ade86613005565b858561336e565b6000818152600e60205260408120546001600160a01b0316612b5e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610610565b6000612b69836117e5565b9050806001600160a01b0316846001600160a01b03161480612ba45750836001600160a01b0316612b9984610dcb565b6001600160a01b0316145b80612bb45750612bb48185612103565b949350505050565b826001600160a01b0316612bcf826117e5565b6001600160a01b031614612c375760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610610565b6001600160a01b038216612c995760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610610565b612ca46000826129e4565b6001600160a01b0383166000908152600f60205260408120805460019290612ccd908490614e4d565b90915550506001600160a01b0382166000908152600f60205260408120805460019290612cfb908490614d26565b90915550506000818152600e602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000606462ffffff7f000000000000000000000000000000000000000000000000000000000000000016612d9663ffffffff861685614dcc565b612da09190614d66565b61297a9190614d66565b6000818152601260209081526040808320815160c081018352815463ffffffff80821683526401000000008204811695830195909552600160401b810490941692810192909252600160601b9092046001600160a01b0316606082015260019091015460ff81161515608083018190526101009091046001600160f81b031660a08301528290612e45576003546001600160a01b0316612e52565b6002546001600160a01b03165b6040808401805163ffffffff9081166000908152600660209081528482206001600160a01b03871683528152848220818901519451841683526005909152938120549495509384928216911610612ead578460200151612ecc565b60408086015163ffffffff908116600090815260056020529190912054165b63ffffffff908116825260208083019390935260409182016000908120548784015183168252600685528382206001600160a01b03881683528552838220885190931682529190935290822054909250612f269083614e4d565b905060008460800151612f59577f0000000000000000000000000000000000000000000000000000000000000000612f7b565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160701b03169050600080612fa08488606001516001600160a01b0316613bbf565b91509150600082612fd25760608801516001600160a01b0316612fc38587614d66565b612fcd9190614dcc565b612fdc565b612fdc8483614d66565b90508760a001516001600160f81b031681612ff79190614d26565b9a9950505050505050505050565b60008181526012602081815260408084205463ffffffff600160401b8204811686526005845291852054868652939092529182169164010000000090910416818111613055575060009392505050565b600084815260126020526040902054600160601b90046001600160a01b031661307e8383614e64565b63ffffffff1661308e9190614d9d565b6001600160a01b0316949350505050565b60008181526012602052604081206001015460ff166130c9576003546001600160a01b03166105e7565b50506002546001600160a01b031690565b60008181526012602052604081206001015460ff16613104576002546001600160a01b03166105e7565b50506003546001600160a01b031690565b60008181526012602090815260408083205463ffffffff600160401b820481168086526005909452919093205491926401000000009004811691168082111561325857600084815260126020526040812054600160601b90046001600160a01b0316906131818661309f565b63ffffffff861660009081526004602090815260408083206001600160a01b03851684529091528120919250601384900b91906131bf866001614d3e565b63ffffffff1663ffffffff16815260200190815260200160002060008282546131e89190614e0e565b909155505063ffffffff851660009081526004602090815260408083206001600160a01b03851684529091528120601384900b91613227876001614d3e565b63ffffffff1663ffffffff16815260200190815260200160002060008282546132509190614ce5565b909155505050505b505050600090815260126020526040812081815560010155565b600061327d826117e5565b905061328a6000836129e4565b6001600160a01b0381166000908152600f602052604081208054600192906132b3908490614e4d565b90915550506000828152600e602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000818152600183016020526040812054151561297a565b60006105e7825490565b600061297a8383613c15565b613346848484612bbc565b61335284848484613ca9565b611e1f5760405162461bcd60e51b815260040161061090614af7565b61337785612a52565b60006133828661309f565b9050600061338f87612daa565b90506001600160f81b038111156133b957604051630930608960e11b815260040160405180910390fd5b600087815260126020526040902054600160401b900463ffffffff166133de88613115565b6000806133ef8a868989888861357e565b91509150878911156134595761341c333061340a8b8d614e4d565b6001600160a01b03891692919061351c565b613426888a614e4d565b6001600160a01b0386166000908152600760205260408120805490919061344e908490614d26565b909155506134b89050565b878910156134b85761346b8989614e4d565b6001600160a01b03861660009081526007602052604081208054909190613493908490614e4d565b909155506134b89050336134a78b8b614e4d565b6001600160a01b0388169190612981565b604080518b81526001600160a01b038916602082015263ffffffff8481168284015283166060820152905133917ffa7c989fea93eb42545a9e7a74f2b8d966813e216a1dd7b59562af10dba259b4919081900360800190a250505050505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611e1f9085906323b872dd60e01b906084016129ad565b61356e828260405180602001604052806000815250613db6565b5050565b600061297a8383613de9565b6000806001600160a01b0386166135a8576040516314cee7cd60e11b815260040160405180910390fd5b63ffffffff808416600090815260056020526040902054166135cb816001614d3e565b92506135d78682614d3e565b63ffffffff80861660009081526004602090815260408083206001600160a01b038e16845282528083209388168352929052908120805492945060138a900b92909190613625908490614ce5565b909155505063ffffffff841660009081526004602090815260408083206001600160a01b038c1684529091528120601389900b91613664856001614d3e565b63ffffffff1663ffffffff168152602001908152602001600020600082825461368d9190614e0e565b90915550506040805160c08101825263ffffffff928316815283831660208083019182529684168284019081526001600160a01b039a8b16606084019081526002549c8c169c8c169c909c14608084019081526001600160f81b03998a1660a0850190815260009e8f52601290995293909c209151825491519c519b51909a16600160601b026bffffffffffffffffffffffff9b8516600160401b029b909b1667ffffffffffffffff9c85166401000000000267ffffffffffffffff199092169a90941699909917989098179990991617969096178555955190519091166101000290151560ff161760019290920191909155509091565b60606000806137946008613325565b90508067ffffffffffffffff8111156137bd57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561380f57816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816137db5790505b50925060005b8181101561391e57600061382a60088361332f565b90504263ffffffff8281166000908152600b602052604090205491811691161161390b5763ffffffff808216600090815260056020526040812054909161387391166001614d3e565b6040805160808101825263ffffffff80861682528316602082015260025492935091908201906138ae9085906001600160a01b031685613e38565b81526003546020909101906138ce9085906001600160a01b031685613e38565b905286866138db81614f0b565b975060ff16815181106138fe57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250505b508061391681614ef0565b915050613815565b50509091565b6000836139318385614dcc565b612bb49190614d66565b63ffffffff841660009081526006602090815260408083206001600160a01b0387168452909152812081613970600186614e64565b63ffffffff16815260208101919091526040016000205490506139938282614d26565b63ffffffff95861660009081526006602090815260408083206001600160a01b0390981683529681528682209590971681529390955250502055565b60008181526001830160205260408120548015613adc5760006139f3600183614e4d565b8554909150600090613a0790600190614e4d565b90506000866000018281548110613a2e57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110613a5f57634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260018901909152604090208490558654879080613aa057634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506105e7565b60009150506105e7565b5092915050565b6000613b42826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613e8b9092919063ffffffff16565b805190915015610f715780806020019051810190613b609190614425565b610f715760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610610565b60008083613bd35750600190506000613c0e565b83830283858281613bf457634e487b7160e01b600052601260045260246000fd5b0414613c07576000809250925050613c0e565b6001925090505b9250929050565b81546000908210613c735760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b6064820152608401610610565b826000018281548110613c9657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60006001600160a01b0384163b15613dab57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613ced90339089908890889060040161498c565b602060405180830381600087803b158015613d0757600080fd5b505af1925050508015613d37575060408051601f3d908101601f19168201909252613d349181019061445d565b60015b613d91573d808015613d65576040519150601f19603f3d011682016040523d82523d6000602084013e613d6a565b606091505b508051613d895760405162461bcd60e51b815260040161061090614af7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612bb4565b506001949350505050565b613dc08383613e9a565b613dcd6000848484613ca9565b610f715760405162461bcd60e51b815260040161061090614af7565b6000818152600183016020526040812054613e30575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105e7565b5060006105e7565b63ffffffff92831660008181526004602090815260408083206001600160a01b0390961680845295825280832094909616825292835284812054918152600a835284812093815292909152919020540190565b6060612bb48484600085613fdc565b6001600160a01b038216613ef05760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610610565b6000818152600e60205260409020546001600160a01b031615613f555760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610610565b6001600160a01b0382166000908152600f60205260408120805460019290613f7e908490614d26565b90915550506000818152600e602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60608247101561403d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610610565b843b61408b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610610565b600080866001600160a01b031685876040516140a79190614970565b60006040518083038185875af1925050503d80600081146140e4576040519150601f19603f3d011682016040523d82523d6000602084013e6140e9565b606091505b50915091506140f9828286614104565b979650505050505050565b6060831561411357508161297a565b8251156141235782518084602001fd5b8160405162461bcd60e51b81526004016106109190614ae4565b60405180610180016040528060608152602001600060ff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b600082601f8301126141c3578081fd5b81356141d66141d182614cbd565b614c8c565b8181528460208386010111156141ea578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215614215578081fd5b813561297a81614f6d565b60008060408385031215614232578081fd5b823561423d81614f6d565b9150602083013561424d81614f6d565b809150509250929050565b60008060006060848603121561426c578081fd5b833561427781614f6d565b9250602084013561428781614f6d565b929592945050506040919091013590565b600080600080608085870312156142ad578081fd5b84356142b881614f6d565b935060208501356142c881614f6d565b925060408501359150606085013567ffffffffffffffff8111156142ea578182fd5b6142f6878288016141b3565b91505092959194509250565b60008060408385031215614314578182fd5b823561431f81614f6d565b9150602083013561424d81614f82565b60008060008060808587031215614344578182fd5b843561434f81614f6d565b9350602085013561435f81614f6d565b9250604085013561436f81614fa6565b9150606085013561437f81614fa6565b939692955090935050565b6000806040838503121561439c578182fd5b82356143a781614f6d565b946020939093013593505050565b600080602083850312156143c7578182fd5b823567ffffffffffffffff808211156143de578384fd5b818501915085601f8301126143f1578384fd5b8135818111156143ff578485fd5b8660208260051b8501011115614413578485fd5b60209290920196919550909350505050565b600060208284031215614436578081fd5b815161297a81614f82565b600060208284031215614452578081fd5b813561297a81614f90565b60006020828403121561446e578081fd5b815161297a81614f90565b60006020828403121561448a578081fd5b815161297a81614f6d565b6000602082840312156144a6578081fd5b815167ffffffffffffffff8111156144bc578182fd5b8201601f810184136144cc578182fd5b80516144da6141d182614cbd565b8181528560208385010111156144ee578384fd5b6144ff826020830160208601614e89565b95945050505050565b600060608284031215614519578081fd5b6040516060810181811067ffffffffffffffff8211171561453c5761453c614f57565b604052825161454a81614f6d565b8152602083015161455a81614f82565b6020820152604083015161456d81614fa6565b60408201529392505050565b60006080828403121561458a578081fd5b6040516080810181811067ffffffffffffffff821117156145ad576145ad614f57565b60405282516145bb81614f6d565b815260208301516145cb81614f82565b602082015260408301516145de81614fa6565b604082015260608301516145f181614f6d565b60608201529392505050565b60006020828403121561460e578081fd5b5035919050565b600060208284031215614626578081fd5b5051919050565b6000806040838503121561463f578182fd5b82359150602083013561424d81614f6d565b600080600060608486031215614665578081fd5b83359250602084013561467781614f6d565b9150604084013561468781614fa6565b809150509250925092565b6000806000806000608086880312156146a9578283fd5b853594506020860135935060408601356146c281614f6d565b9250606086013567ffffffffffffffff808211156146de578283fd5b818801915088601f8301126146f1578283fd5b8135818111156146ff578384fd5b896020828501011115614710578384fd5b9699959850939650602001949392505050565b60008060008060808587031215614738578182fd5b8435935060208501359250604085013561475181614f6d565b9150606085013567ffffffffffffffff8111156142ea578182fd5b600080600060608486031215614780578081fd5b8335925060208401359150604084013561468781614fa6565b600080604083850312156147ab578182fd5b82359150602083013561424d81614fa6565b6000602082840312156147ce578081fd5b813561297a81614fa6565b600080604083850312156147eb578182fd5b823561423d81614fa6565b60008060006060848603121561480a578081fd5b833561481581614fa6565b9250602084013561467781614f6d565b6000815180845260208085019450808401835b8381101561487d578151805163ffffffff9081168952848201511684890152604080820151908901526060908101519088015260809096019590820190600101614838565b509495945050505050565b600081518084526148a0816020860160208601614e89565b601f01601f19169290920160200192915050565b600061018082518185526148ca82860182614825565b91505060208301516148e1602086018260ff169052565b5060408301516040850152606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e085015261010080840151818601525061012080840151818601525061014080840151614951828701826001600160a01b03169052565b5050610160928301516001600160a01b03169390920192909252919050565b60008251614982818460208701614e89565b9190910192915050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906149bf90830184614888565b9695505050505050565b600061012060018060a01b03808d168452808c166020850152808b1660408501525088606084015287608084015286151560a08401528560c08401528460e084015280610100840152614a1e81840185614888565b9c9b505050505050505050505050565b6001600160a01b038a81168252898116602083015288166040820152606081018790526080810186905260a0810185905260c0810184905261010060e0820181905281018290526000610120838582850137828401810191909152601f909201601f1916010198975050505050505050565b6060808252810184905260006001600160fb1b03851115614abf578081fd5b8460051b80876080850137820160800190815260208201939093526040015292915050565b60208152600061297a6020830184614888565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208152600061297a60208301846148b4565b60006101008201905060018060a01b0380845116835280602085015116602084015250604083015163ffffffff8082166040850152806060860151166060850152608085015160808501528060a08601511660a0850152505060c083015160c083015260e0830151613ae660e08401826001600160a01b03169052565b84815283602082015263ffffffff831660408201526080606082015260006149bf60808301846148b4565b604051601f8201601f1916810167ffffffffffffffff81118282101715614cb557614cb5614f57565b604052919050565b600067ffffffffffffffff821115614cd757614cd7614f57565b50601f01601f191660200190565b600080821280156001600160ff1b0384900385131615614d0757614d07614f2b565b600160ff1b8390038412811615614d2057614d20614f2b565b50500190565b60008219821115614d3957614d39614f2b565b500190565b600063ffffffff808316818516808303821115614d5d57614d5d614f2b565b01949350505050565b600082614d7557614d75614f41565b500490565b600063ffffffff80841680614d9157614d91614f41565b92169190910492915050565b60006001600160a01b0382811684821681151582840482111615614dc357614dc3614f2b565b02949350505050565b6000816000190483118215151615614de657614de6614f2b565b500290565b600063ffffffff80831681851681830481118215151615614dc357614dc3614f2b565b60008083128015600160ff1b850184121615614e2c57614e2c614f2b565b6001600160ff1b0384018313811615614e4757614e47614f2b565b50500390565b600082821015614e5f57614e5f614f2b565b500390565b600063ffffffff83811690831681811015614e8157614e81614f2b565b039392505050565b60005b83811015614ea4578181015183820152602001614e8c565b83811115611e1f5750506000910152565b600181811c90821680614ec957607f821691505b60208210811415614eea57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415614f0457614f04614f2b565b5060010190565b600060ff821660ff811415614f2257614f22614f2b565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612ab557600080fd5b8015158114612ab557600080fd5b6001600160e01b031981168114612ab557600080fd5b63ffffffff81168114612ab557600080fdfea264697066735822122078a60ac89a2b8bf88cb46133f450ab5898b677790422ba50c2b8578db6f4092464736f6c63430008040033a264697066735822122095623cfde60cef894554e2a96c01dca30cfe5607be3ce54e1ee7a728fb46a91f64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4504,
        "contract": "contracts/DCAFactory/DCAFactory.sol:DCAFactory",
        "label": "_pairByTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 4507,
        "contract": "contracts/DCAFactory/DCAFactory.sol:DCAFactory",
        "label": "_allPairs",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)3156_storage"
      },
      {
        "astId": 4511,
        "contract": "contracts/DCAFactory/DCAFactory.sol:DCAFactory",
        "label": "globalParameters",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IDCAGlobalParameters)9214"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDCAGlobalParameters)9214": {
        "encoding": "inplace",
        "label": "contract IDCAGlobalParameters",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3156_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3155,
            "contract": "contracts/DCAFactory/DCAFactory.sol:DCAFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2881_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2881_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2876,
            "contract": "contracts/DCAFactory/DCAFactory.sol:DCAFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2880,
            "contract": "contracts/DCAFactory/DCAFactory.sol:DCAFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}